[
    {
        "template": {
            "input_function": {
                "type": "FunctionCall",
                "name": "symbol-similarity-search",
                "arguments": {"query": "{query}"}
            },
            "expected_action": {
                "type": "SymbolSearchAction",
                "query": "{query}",
                "search_results": "{result}"
            }
        },
        "formatters": [
            {"query": "Which class is an abstraction for agents?", "result": "automata.agent.agent.Agent"},
            {"query": "Which class is an abstraction for building agent tools?", "result": "automata.agent.agent.AgentToolkitBuilder"},
            {"query": "Which class enumerates the available agent tools?", "result": "automata.agent.agent.AgentToolkitNames"},
            {"query": "Which class represents a general agent error?", "result": "automata.agent.error.AgentGeneralError"},
            {"query": "Which class builds tools for an OpenAI agent?", "result": "automata.agent.openai_agent.OpenAIAgentToolkitBuilder"},
            {"query": "Which class manages an OpenAI agent lifecycle?", "result": "automata.agent.openai_agent.OpenAIAutomataAgent"},
            {"query": "Which method of the OpenAI agent is responsible for running the agent?", "result": "automata.agent.openai_agent.OpenAIAutomataAgent.run"},
            {"query": "Which private method does the OpenAI agent call to perform setup?", "result": "automata.agent.openai_agent.OpenAIAutomataAgent._setup"},
            {"query": "Which class is responsible for executing instructions and reporting results back to the main system?", "result": "automata.agent.openai_agent.OpenAIAutomataAgent"},
            {"query": "Which method in the OpenAI agent is responsible for executing a single iteration of the task?", "result": "automata.agent.openai_agent.OpenAIAutomataAgent.__next__"},
            {"query": "Which method in the OpenAI agent is responsible for running the agent and iterating through the tasks until a result is produced?", "result": "automata.agent.openai_agent.OpenAIAutomataAgent.run"},
            {"query": "Which method in the OpenAI agent is responsible for getting the result of the agent?", "result": "automata.agent.openai_agent.OpenAIAutomataAgent.get_result"},
            {"query": "Which method in the OpenAI agent is responsible for setting the database provider for the agent?", "result": "automata.agent.openai_agent.OpenAIAutomataAgent.set_database_provider"},
            {"query": "Which method in the OpenAI agent is responsible for building the initial messages for the agent's conversation?", "result": "automata.agent.openai_agent.OpenAIAutomataAgent._build_initial_messages"},
            {"query": "Which method in the OpenAI agent is responsible for generating a user message based on the assistant's message?", "result": "automata.agent.openai_agent.OpenAIAutomataAgent._get_next_user_response"},
            {"query": "Which method in the OpenAI agent is responsible for setting up the agent by initializing the conversation and chat provider?", "result": "automata.agent.openai_agent.OpenAIAutomataAgent._setup"},
            {"query": "What is the method that gets the tool responsible for terminating the OpenAI agent?", "result": "automata.agent.openai_agent.OpenAIAutomataAgent._get_termination_tool"},
            {"query": "Which class is an abstract class for building OpenAI agent tools?", "result": "automata.agent.openai_agent.OpenAIAgentToolkitBuilder"},
            {"query": "Which method in the OpenAIAgentToolkitBuilder class is responsible for building an OpenAITool to be used by the associated agent?", "result": "automata.agent.openai_agent.OpenAIAgentToolkitBuilder.build_for_open_ai"},
            {"query": "Which function contains the CLI command responsible for running the agent?", "result": "automata.cli.commands.run_agent"},
            {"query": "Which function contains the CLI command responsible for running agent evaluations?", "result": "automata.cli.commands.run_agent_eval"},
            {"query": "Which function contains the CLI command responsible for running tool evaluations?", "result": "automata.cli.commands.run_tool_eval"},
            {"query": "Which function contains the CLI command responsible for configuring up the local environment?", "result": "automata.cli.cli_utils.setup_files"},
            {"query": "Which class represents a node in the file tree?", "result": "automata.code_parsers.directory.Node"},
            {"query": "Which class represents a file in the file tree?", "result": "automata.code_parsers.directory.File"},
            {"query": "Which class represents a directory in the file tree?", "result": "automata.code_parsers.directory.Directory"},
            {"query": "Which method adds a child node to a directory?", "result": "automata.code_parsers.directory.Directory.add_child"},
            {"query": "Which method gets a list of file names in a directory?", "result": "automata.code_parsers.directory.Directory.get_file_names"},
            {"query": "Which method gets a list of subdirectory names in a directory?", "result": "automata.code_parsers.directory.Directory.get_subdirectories"},
            {"query": "Which method checks if a directory is the root directory?", "result": "automata.code_parsers.directory.Directory.is_root_dir"},
            {"query": "Which method checks if a directory is a leaf directory?", "result": "automata.code_parsers.directory.Directory.is_leaf_dir"},
            {"query": "Which class handles operations related to directory structure?", "result": "automata.code_parsers.directory.DirectoryManager"},
            {"query": "Which method loads the directory structure into Directory and File objects?", "result": "automata.code_parsers.directory.DirectoryManager._load_directory_structure"},
            {"query": "Which method gets a list of files in the given directory?", "result": "automata.code_parsers.directory.DirectoryManager.get_files_in_dir"},
            {"query": "Which method gets a list of subdirectories in the given directory?", "result": "automata.code_parsers.directory.DirectoryManager.get_subdirectories"},
            {"query": "Which method ensures a directory exists?", "result": "automata.code_parsers.directory.DirectoryManager.ensure_directory_exists"},
            {"query": "Which method finds the node for a given path?", "result": "automata.code_parsers.directory.DirectoryManager._get_node_for_path"},
            {"query": "Which class is responsible for fetching python code?", "result": "automata.code_parsers.py.py_reader.PyReader"},
            {"query": "Which method in the PyReader class is responsible for getting code for a specified module, class, or function/method?", "result": "automata.code_parsers.py.py_reader.PyReader.get_source_code"},
            {"query": "Which method in the PyReader class is responsible for getting the docstring for a specified module, class, or function/method?", "result": "automata.code_parsers.py.py_reader.PyReader.get_docstring"},
            {"query": "Which method in the PyReader class is responsible for getting code for a specified module, class, or function/method without its docstrings?", "result": "automata.code_parsers.py.py_reader.PyReader.get_source_code_without_docstrings"},
            {"query": "Which method in the PyReader class is responsible for getting the docstring from the specified node?", "result": "automata.code_parsers.py.py_reader.PyReader.get_docstring_from_node"},
            {"query": "Which function converts a filepath to a module dotpath?", "result": "automata.code_parsers.py.dotpath_map.convert_fpath_to_module_dotpath"},
            {"query": "Which class maps module dotpaths to module filepaths?", "result": "automata.code_parsers.py.dotpath_map.DotPathMap"},
            {"query": "Which method in the DotPathMap class builds a map from module dotpaths to module filepaths?", "result": "automata.code_parsers.py.dotpath_map.DotPathMap._build_module_dotpath_to_fpath_map"},
            {"query": "Which method in the DotPathMap class gets the filepath of a module given its dotpath?", "result": "automata.code_parsers.py.dotpath_map.DotPathMap.get_module_fpath_by_dotpath"},
            {"query": "Which method in the DotPathMap class gets the dotpath of a module given its filepath?", "result": "automata.code_parsers.py.dotpath_map.DotPathMap.get_module_dotpath_by_fpath"},
            {"query": "Which method in the DotPathMap class checks if the map contains a module with the given dotpath?", "result": "automata.code_parsers.py.dotpath_map.DotPathMap.contains_dotpath"},
            {"query": "Which method in the DotPathMap class checks if the map contains a module with the given filepath?", "result": "automata.code_parsers.py.dotpath_map.DotPathMap.contains_fpath"},
            {"query": "Which method in the DotPathMap class adds a module with the given dotpath to the local store?", "result": "automata.code_parsers.py.dotpath_map.DotPathMap.put_module"},
            {"query": "Which method in the DotPathMap class deletes a module with the given dotpath in the local store?", "result": "automata.code_parsers.py.dotpath_map.DotPathMap.delete_module"},
            {"query": "Which method in the DotPathMap class returns a dictionary containing the module dotpath to module filepath mapping?", "result": "automata.code_parsers.py.dotpath_map.DotPathMap.items"},
            {"query": "Which function checks if a method is private in Python?", "result": "automata.code_parsers.py.context_processing.context_utils.is_private_method"},
            {"query": "Which function processes a specified method in Python code?", "result": "automata.code_parsers.py.context_processing.context_utils.process_method"},
            {"query": "Which function retrieves all methods from a given AST in Python?", "result": "automata.code_parsers.py.context_processing.context_utils.get_all_methods"},
            {"query": "Which function retrieves all classes from a given AST in Python?", "result": "automata.code_parsers.py.context_processing.context_utils.get_all_classes"},
            {"query": "Which function retrieves all attributes from a given class in Python?", "result": "automata.code_parsers.py.context_processing.context_utils.get_all_attributes"},
            {"query": "What is the configuration class for the PyContextHandler?", "result": "automata.code_parsers.py.context_processing.context_handler.PyContextHandlerConfig"},
            {"query": "What is the class that handles the context in Python code?", "result": "automata.code_parsers.py.context_processing.context_handler.PyContextHandler"},
            {"query": "Which method of the PyContextHandler is responsible for constructing the context for a symbol?", "result": "automata.code_parsers.py.context_processing.context_handler.PyContextHandler.construct_symbol_context"},
            {"query": "Which method of the PyContextHandler is responsible for getting the top N symbols according to their ranks?", "result": "automata.code_parsers.py.context_processing.context_handler.PyContextHandler.get_top_n_symbol_rank_matches"},
            {"query": "Which method of the PyContextHandler is responsible for getting the top N symbols that the given symbol depends on?", "result": "automata.code_parsers.py.context_processing.context_handler.PyContextHandler.get_top_n_symbol_dependencies"},
            {"query": "What is the base class for context components?", "result": "automata.code_parsers.py.context_processing.context_retriever.BaseContextComponent"},
            {"query": "What class generates a headline for a symbol?", "result": "automata.code_parsers.py.context_processing.context_retriever.HeadlineContextComponent"},
            {"query": "What class generates source code for a symbol?", "result": "automata.code_parsers.py.context_processing.context_retriever.SourceCodeContextComponent"},
            {"query": "What class generates an interface for a symbol?", "result": "automata.code_parsers.py.context_processing.context_retriever.InterfaceContextComponent"},
            {"query": "What class is used to retrieve the context of a symbol in a Python project?", "result": "automata.code_parsers.py.context_processing.context_retriever.PyContextRetriever"},
            {"query": "Which method of the PyContextRetriever is responsible for processing the context of a specified symbol?", "result": "automata.code_parsers.py.context_processing.context_retriever.PyContextRetriever.process_symbol"},
            {"query": "Which class holds the configuration for the Automata OpenAI Agent?", "result": "automata.config.openai_config.OpenAIAutomataAgentConfig"},
            {"query": "Which method sets up the Automata OpenAI Agent configuration?", "result": "automata.config.openai_config.OpenAIAutomataAgentConfig.setup"},
            {"query": "Which method loads the configuration for the Automata OpenAI Agent?", "result": "automata.config.openai_config.OpenAIAutomataAgentConfig.load"},
            {"query": "Which method gets the provider for the Automata OpenAI Agent?", "result": "automata.config.openai_config.OpenAIAutomataAgentConfig.get_llm_provider"},
            {"query": "Which method is responsible for formatting the system template to produce the system instruction?", "result": "automata.config.openai_config.OpenAIAutomataAgentConfig._formatted_instruction"},
            {"query": "Which class is responsible for building the Automata OpenAI Agent configuration?", "result": "automata.config.openai_config.OpenAIAutomataAgentConfigBuilder"},
            {"query": "Which method sets the model for the Automata OpenAI Agent configuration builder?", "result": "automata.config.openai_config.OpenAIAutomataAgentConfigBuilder.with_model"},
            {"query": "Which method sets the system template formatter for the Automata OpenAI Agent configuration builder?", "result": "automata.config.openai_config.OpenAIAutomataAgentConfigBuilder.with_system_template_formatter"},
            {"query": "Which method sets the instruction version for the Automata OpenAI Agent configuration builder?", "result": "automata.config.openai_config.OpenAIAutomataAgentConfigBuilder.with_instruction_version"},
            {"query": "Which method creates an AutomataAgentConfig instance from the provided arguments?", "result": "automata.config.openai_config.OpenAIAutomataAgentConfigBuilder.create_from_args"},
            {"query": "Which class creates a default formatter for the Automata configuration?", "result": "automata.config.formatter.TemplateFormatter"},
            {"query": "Which method creates a default formatter for the Automata configuration?", "result": "automata.config.formatter.TemplateFormatter.create_default_formatter"},
            {"query": "Which class registers and tracks instances of ISymbolProvider?", "result": "automata.context_providers.symbol_synchronization_context.SymbolProviderRegistry"},
            {"query": "Which method registers a symbol provider?", "result": "automata.context_providers.symbol_synchronization_context.SymbolProviderRegistry.register_provider"},
            {"query": "Which method synchronizes all symbol providers?", "result": "automata.context_providers.symbol_synchronization_context.SymbolProviderRegistry.synchronize"},
            {"query": "Which class provides a context manager for synchronizing symbol providers?", "result": "automata.context_providers.symbol_synchronization_context.SymbolProviderSynchronizationContext"},
            {"query": "Which method in SymbolProviderSynchronizationContext registers a symbol provider?", "result": "automata.context_providers.symbol_synchronization_context.SymbolProviderSynchronizationContext.register_provider"},
            {"query": "Which method in SymbolProviderSynchronizationContext synchronizes all symbol providers?", "result": "automata.context_providers.symbol_synchronization_context.SymbolProviderSynchronizationContext.synchronize"},
            {"query": "What function sets the OpenAI API key from the environment variable OPENAI_API_KEY?", "result": "automata.core.utils.set_openai_api_key"},
            {"query": "What function gets the path to the root of the Automata python code directory?", "result": "automata.core.utils.get_root_py_fpath"},
            {"query": "What function gets the path to the root of the Automata directory?", "result": "automata.core.utils.get_root_fpath"},
            {"query": "What function gets the path to the root of the Automata config directory?", "result": "automata.core.utils.get_config_fpath"},
            {"query": "What function loads a config file from the config directory?", "result": "automata.core.utils.load_config"},
            {"query": "What function formats expected strings into the config?", "result": "automata.core.utils.format_text"},
            {"query": "What function converts a kebab-case string to snake_case?", "result": "automata.core.utils.convert_kebab_to_snake_case"},
            {"query": "What function returns the logging configuration?", "result": "automata.core.utils.get_logging_config"},
            {"query": "What function checks if a list is sorted?", "result": "automata.core.utils.is_sorted"},
            {"query": "What function calculates the similarity between two strings?", "result": "automata.core.utils.calculate_similarity"},
            {"query": "What function initializes the Automata task environment?", "result": "automata.core.run_handlers.initialize_automata"},
            {"query": "What function sets up the Automata task environment?", "result": "automata.core.run_handlers.run_setup"},
            {"query": "What function runs an agent with the given parameters?", "result": "automata.core.run_handlers.run_with_agent"},
            {"query": "What function creates a task with the given parameters?", "result": "automata.core.run_handlers.create_task"},
            {"query": "What function runs a task with the given parameters?", "result": "automata.core.run_handlers.run_with_task"},
            {"query": "What function runs a task with the given parameters and evaluates it?", "result": "automata.core.run_handlers.run_with_eval"},
            {"query": "What function finds the bounding box of a node in the AST?", "result": "automata.core.ast_handlers.fetch_bounding_box"},
            {"query": "What function gets the docstring from the specified node?", "result": "automata.core.ast_handlers.get_docstring_from_node"},
            {"query": "What class removes docstrings from a class or function?", "result": "automata.core.ast_handlers.DocstringRemover"},
            {"query": "What function creates a copy of the specified node without docstrings?", "result": "automata.core.ast_handlers.get_node_without_docstrings"},
            {"query": "What class removes import statements from a module, class or function?", "result": "automata.core.ast_handlers.ImportRemover"},
            {"query": "What function creates a copy of the specified node without import statements?", "result": "automata.core.ast_handlers.get_node_without_imports"},
            {"query": "What function finds the imports for a specified module?", "result": "automata.core.ast_handlers.find_imports"},
            {"query": "What function finds a module, or a function, method, or class inside a module?", "result": "automata.core.ast_handlers.find_syntax_tree_node"},
            {"query": "What is the base class for Automata exceptions?", "result": "automata.core.base.base_error.AutomataError"},
            {"query": "What is the abstract class for implementing an observer?", "result": "automata.core.base.patterns.observer.Observer"},
            {"query": "What abstract method is used to save data in the VectorDatabaseProvider?", "result": "automata.core.base.database.vector_database.VectorDatabaseProvider.save"},
            {"query": "What abstract method is used to load data in the VectorDatabaseProvider?", "result": "automata.core.base.database.vector_database.VectorDatabaseProvider.load"},
            {"query": "What abstract method is used to add an entry to the database in the VectorDatabaseProvider?", "result": "automata.core.base.database.vector_database.VectorDatabaseProvider.add"},
            {"query": "What abstract method is used to update a specific entry in the VectorDatabaseProvider?", "result": "automata.core.base.database.vector_database.VectorDatabaseProvider.update_entry"},
            {"query": "What abstract method is used to get a specific entry in the VectorDatabaseProvider?", "result": "automata.core.base.database.vector_database.VectorDatabaseProvider.get"},
            {"query": "What abstract method is used to discard a specific entry in the VectorDatabaseProvider?", "result": "automata.core.base.database.vector_database.VectorDatabaseProvider.discard"},
            {"query": "What method is used to save the vector database to the JSON file in JSONVectorDatabase?", "result": "automata.core.base.database.vector_database.JSONVectorDatabase.save"},
            {"query": "What method is used to load the vector database from the JSON file in JSONVectorDatabase?", "result": "automata.core.base.database.vector_database.JSONVectorDatabase.load"},
            {"query": "What method is used to add an entry to the database in JSONVectorDatabase?", "result": "automata.core.base.database.vector_database.JSONVectorDatabase.add"},
            {"query": "What method is used to update a specific entry in JSONVectorDatabase?", "result": "automata.core.base.database.vector_database.JSONVectorDatabase.update_entry"},
            {"query": "What method is used to get a specific entry in JSONVectorDatabase?", "result": "automata.core.base.database.vector_database.JSONVectorDatabase.get"},
            {"query": "What method is used to discard a specific entry in JSONVectorDatabase?", "result": "automata.core.base.database.vector_database.JSONVectorDatabase.discard"},
            {"query": "What method is used to save the vector database to the Chroma database in ChromaVectorDatabase?", "result": "automata.core.base.database.vector_database.ChromaVectorDatabase.save"},
            {"query": "What method is used to load the vector database from the Chroma database in ChromaVectorDatabase?", "result": "automata.core.base.database.vector_database.ChromaVectorDatabase.load"},
            {"query": "What method is used to add an entry to the database in ChromaVectorDatabase?", "result": "automata.core.base.database.vector_database.ChromaVectorDatabase.add"},
            {"query": "What method is used to update a specific entry in ChromaVectorDatabase?", "result": "automata.core.base.database.vector_database.ChromaVectorDatabase.update_entry"},
            {"query": "What method is used to get a specific entry in ChromaVectorDatabase?", "result": "automata.core.base.database.vector_database.ChromaVectorDatabase.get"},
            {"query": "What method is used to discard a specific entry in ChromaVectorDatabase?", "result": "automata.core.base.database.vector_database.ChromaVectorDatabase.discard"},
            {"query": "What abstract method is used to connect to the database in RelationalDatabase?", "result": "automata.core.base.database.relational_database.RelationalDatabase.connect"},
            {"query": "What abstract method is used to close the connection to the database in RelationalDatabase?", "result": "automata.core.base.database.relational_database.RelationalDatabase.close"},
            {"query": "What abstract method is used to create a new table in RelationalDatabase?", "result": "automata.core.base.database.relational_database.RelationalDatabase.create_table"},
            {"query": "What abstract method is used to insert data into a table in RelationalDatabase?", "result": "automata.core.base.database.relational_database.RelationalDatabase.insert"},
            {"query": "What abstract method is used to select data from a table in RelationalDatabase?", "result": "automata.core.base.database.relational_database.RelationalDatabase.select"},
            {"query": "What abstract method is used to update data in a table in RelationalDatabase?", "result": "automata.core.base.database.relational_database.RelationalDatabase.update_entry"},
            {"query": "What abstract method is used to delete data from a table in RelationalDatabase?", "result": "automata.core.base.database.relational_database.RelationalDatabase.delete"},
            {"query": "What method is used to connect to the SQL database in SQLDatabase?", "result": "automata.core.base.database.relational_database.SQLDatabase.connect"},
            {"query": "What method is used to close the connection to the SQL database in SQLDatabase?", "result": "automata.core.base.database.relational_database.SQLDatabase.close"},
            {"query": "What method is used to create a new table in SQLDatabase?", "result": "automata.core.base.database.relational_database.SQLDatabase.create_table"},
            {"query": "What method is used to insert data into a table in SQLDatabase?", "result": "automata.core.base.database.relational_database.SQLDatabase.insert"},
            {"query": "What method is used to select data from a table in SQLDatabase?", "result": "automata.core.base.database.relational_database.SQLDatabase.select"},
            {"query": "What method is used to update data in a table in SQLDatabase?", "result": "automata.core.base.database.relational_database.SQLDatabase.update_entry"},
            {"query": "What method is used to delete data from a table in SQLDatabase?", "result": "automata.core.base.database.relational_database.SQLDatabase.delete"},
            {"query": "What is the Enum type used for Embedding normalization?", "result": "automata.embedding.embedding_base.EmbeddingNormType"},
            {"query": "What class provides embeddings for symbols?", "result": "automata.embedding.embedding_base.EmbeddingVectorProvider"},
            {"query": "What class represents an abstract base for different types of embeddings?", "result": "automata.embedding.embedding_base.Embedding"},
            {"query": "What class is used to build embeddings?", "result": "automata.embedding.embedding_base.EmbeddingBuilder"},
            {"query": "What method is used to fetch embedding source code in the EmbeddingBuilder class?", "result": "automata.embedding.embedding_base.EmbeddingBuilder.fetch_embedding_source_code"},
            {"query": "What class is responsible for handling batch embeddings?", "result": "automata.embedding.embedding_base.EmbeddingHandler"},
            {"query": "What class is used to calculate the similarity of embeddings?", "result": "automata.embedding.embedding_base.EmbeddingSimilarityCalculator"},
            {"query": "What method is used to calculate the similarity of a query in the EmbeddingSimilarityCalculator class?", "result": "automata.embedding.embedding_base.EmbeddingSimilarityCalculator.calculate_query_similarity_dict"},
            {"query": "What method is used to normalize embeddings in the EmbeddingSimilarityCalculator class?", "result": "automata.embedding.embedding_base.EmbeddingSimilarityCalculator._normalize_embeddings"},
            {"query": "What is the Enum type used for Embedding normalization?", "result": "automata.embedding.embedding_base.EmbeddingNormType"},
            {"query": "What abstract base class provides embeddings for symbols?", "result": "automata.embedding.embedding_base.EmbeddingVectorProvider"},
            {"query": "What abstract base class represents different types of embeddings?", "result": "automata.embedding.embedding_base.Embedding"},
            {"query": "What abstract base class is used to build embeddings?", "result": "automata.embedding.embedding_base.EmbeddingBuilder"},
            {"query": "What abstract method is used to fetch embedding source code in the EmbeddingBuilder class?", "result": "automata.embedding.embedding_base.EmbeddingBuilder.fetch_embedding_source_code"},
            {"query": "What abstract base class is responsible for handling batch embeddings?", "result": "automata.embedding.embedding_base.EmbeddingHandler"},
            {"query": "What class is used to calculate the similarity of embeddings?", "result": "automata.embedding.embedding_base.EmbeddingSimilarityCalculator"},
            {"query": "What method is used to calculate the similarity of a query in the EmbeddingSimilarityCalculator class?", "result": "automata.embedding.embedding_base.EmbeddingSimilarityCalculator.calculate_query_similarity_dict"},
            {"query": "What method is used to normalize embeddings in the EmbeddingSimilarityCalculator class?", "result": "automata.embedding.embedding_base.EmbeddingSimilarityCalculator._normalize_embeddings"},
            {"query": "What is the Enum type used for Embedding normalization?", "result": "automata.embedding.embedding_base.EmbeddingNormType"},
            {"query": "What abstract base class provides embeddings for symbols?", "result": "automata.embedding.embedding_base.EmbeddingVectorProvider"},
            {"query": "What abstract base class represents different types of embeddings?", "result": "automata.embedding.embedding_base.Embedding"},
            {"query": "What abstract base class is used to build embeddings?", "result": "automata.embedding.embedding_base.EmbeddingBuilder"},
            {"query": "What abstract method is used to fetch embedding source code in the EmbeddingBuilder class?", "result": "automata.embedding.embedding_base.EmbeddingBuilder.fetch_embedding_source_code"},
            {"query": "What abstract base class is responsible for handling batch embeddings?", "result": "automata.embedding.embedding_base.EmbeddingHandler"},
            {"query": "What class is used to calculate the similarity of embeddings?", "result": "automata.embedding.embedding_base.EmbeddingSimilarityCalculator"},
            {"query": "What method is used to calculate the similarity of a query in the EmbeddingSimilarityCalculator class?", "result": "automata.embedding.embedding_base.EmbeddingSimilarityCalculator.calculate_query_similarity_dict"},
            {"query": "What method is used to normalize embeddings in the EmbeddingSimilarityCalculator class?", "result": "automata.embedding.embedding_base.EmbeddingSimilarityCalculator._normalize_embeddings"},
            {"query": "What decorator is used to register an Action subclass in the ACTION_REGISTRY?", "result": "automata.eval.eval_base.register_action"},
            {"query": "What function parses the corresponding action from a raw dictionary?", "result": "automata.eval.eval_base.parse_action_from_payload"},
            {"query": "What is the abstract base class for an arbitrary action to be taken by an LLM?", "result": "automata.eval.eval_base.Action"},
            {"query": "What abstract base class represents the result of an evaluation?", "result": "automata.eval.eval_base.EvalResult"},
            {"query": "What abstract method is used to determine if an evaluation was a full match?", "result": "automata.eval.eval_base.EvalResult.is_full_match"},
            {"query": "What abstract method is used to determine if an evaluation was a partial match?", "result": "automata.eval.eval_base.EvalResult.is_partial_match"},
            {"query": "What abstract base class is used for evaluating an LLM's performance?", "result": "automata.eval.eval_base.Eval"},
            {"query": "What abstract method is used to generate an eval result in the Eval class?", "result": "automata.eval.eval_base.Eval.generate_eval_result"},
            {"query": "What abstract method is used to extract a list of action from the given message in the Eval class?", "result": "automata.eval.eval_base.Eval.extract_action"},
            {"query": "What exception is raised when there's an issue with loading evaluations?", "result": "automata.eval.eval_error.EvalLoadingError"},
            {"query": "What exception is raised when there's an issue during task execution?", "result": "automata.eval.eval_error.EvalExecutionError"},
            {"query": "Which class in automata.core.base.patterns.singleton is a metaclass ensuring only one instance of a class?", "result": "automata.core.base.patterns.singleton.Singleton"},
            {"query": "Which method in automata.core.base.patterns.singleton.Singleton is responsible for creating an instance if it does not exist?", "result": "automata.core.base.patterns.singleton.Singleton.__call__"},
            {"query": "Which abstract class in automata.eval.tool.tool_eval represents the result of a tool eval?", "result": "automata.eval.tool.tool_eval.ToolEvalResult"},
            {"query": "Which abstract class in automata.eval.tool.tool_eval evaluates tools' performance?", "result": "automata.eval.tool.tool_eval.ToolEval"},
            {"query": "Which method in automata.eval.tool.tool_eval.ToolEval generates an eval result for a given set of instructions and expected actions?", "result": "automata.eval.tool.tool_eval.ToolEval.generate_eval_result"},
            {"query": "Which method in automata.eval.tool.tool_eval.ToolEval extracts a list of action from the given message?", "result": "automata.eval.tool.tool_eval.ToolEval.extract_action"},
            {"query": "Which method in automata.eval.tool.tool_eval.ToolEval converts the evaluation result to a ToolEvalResult?", "result": "automata.eval.tool.tool_eval.ToolEval.to_tool_result"},
            {"query": "Which class in automata.eval.tool.tool_eval_metrics evaluates detailed metrics from a sequence of ToolEvalResults?", "result": "automata.eval.tool.tool_eval_metrics.ToolEvaluationMetrics"},
            {"query": "Which method in automata.eval.tool.tool_eval_metrics.ToolEvaluationMetrics calculates the full match rate?", "result": "automata.eval.tool.tool_eval_metrics.ToolEvaluationMetrics.full_match_rate"},
            {"query": "Which method in automata.eval.tool.tool_eval_metrics.ToolEvaluationMetrics calculates the partial match rate?", "result": "automata.eval.tool.tool_eval_metrics.ToolEvaluationMetrics.partial_match_rate"},
            {"query": "Which class in automata.eval.tool.tool_eval_harness loads a list of function calls and their expected actions from a JSON file?", "result": "automata.eval.tool.tool_eval_harness.ToolEvalSetLoader"},
            {"query": "Which class in automata.eval.tool.tool_eval_harness evaluates a list of function calls against a list of expected actions?", "result": "automata.eval.tool.tool_eval_harness.ToolEvaluationHarness"},
            {"query": "Which method in automata.eval.tool.tool_eval_harness.ToolEvaluationHarness returns the evaluation metrics for the given function calls and expected actions?", "result": "automata.eval.tool.tool_eval_harness.ToolEvaluationHarness.evaluate"},
            {"query": "Which class in automata.eval.tool.search_eval represents a concrete action for a symbol search?", "result": "automata.eval.tool.search_eval.SymbolSearchAction"},
            {"query": "Which class in automata.eval.tool.search_eval represents the result of a symbol search eval?", "result": "automata.eval.tool.search_eval.SymbolSearchEvalResult"},
            {"query": "Which class in automata.eval.tool.search_eval evaluates an LLM's symbol searching ability?", "result": "automata.eval.tool.search_eval.SymbolSearchEval"},
            {"query": "Which method in automata.eval.tool.search_eval.SymbolSearchEval extracts the search action implicitly?", "result": "automata.eval.tool.search_eval.SymbolSearchEval.extract_action"},
            {"query": "Which method in automata.eval.tool.search_eval.SymbolSearchEval converts the evaluation result to a ToolEvalResult?", "result": "automata.eval.tool.search_eval.SymbolSearchEval.to_tool_result"},
            {"query": "What function aggregates a list of EvalResult objects into a single result?", "result": "automata.eval.agent.agent_eval_composite.aggregate_agent_result"},
            {"query": "What function checks if all evaluators are of different types?", "result": "automata.eval.agent.agent_eval_composite.check_eval_uniqueness"},
            {"query": "What class creates a composite evaluator from a list of evaluator classes?", "result": "automata.eval.agent.agent_eval_composite.AgentEvalComposite"},
            {"query": "Which class writes evaluation results to a SQLite database?", "result": "automata.eval.agent.agent_eval_database.AgentEvalResultDatabase"},
            {"query": "What function writes the result to the database?", "result": "automata.eval.agent.agent_eval_database.AgentEvalResultDatabase.write_result"},
            {"query": "What function gets the results from the database", "result": "automata.eval.agent.agent_eval_database.AgentEvalResultDatabase.get_results"},
            {"query": "What class loads a list of tasks from a JSON file?", "result": "automata.eval.agent.agent_eval_harness.AgentEvalSetLoader"},
            {"query": "What function creates a payload?", "result": "automata.eval.agent.agent_eval_harness.create_payload"},
            {"query": "What function processes a single task and returns the evaluation results?", "result": "automata.eval.agent.agent_eval_harness.process_task"},
            {"query": "What class evaluates a list of instructions against a list of expected actions?", "result": "automata.eval.agent.agent_eval_harness.AgentEvaluationHarness"},
            {"query": "Which function aggregates a list of EvalResult objects into a single result?", "result": "automata.eval.agent.agent_metrics.aggregate_agent_result"},
            {"query": "Which function checks that all evaluators are of different types?", "result": "automata.eval.agent.agent_metrics.check_eval_uniqueness"},
            {"query": "Which class creates a composite evaluator from a list of evaluator classes?", "result": "automata.eval.agent.agent_metrics.AgentEvalComposite"},
            {"query": "Which class writes evaluation results to a SQLite database?", "result": "automata.eval.agent.agent_eval_database.AgentEvalResultDatabase"},
            {"query": "Which class loads a list of tasks from a JSON file?", "result": "automata.eval.agent.agent_eval_harness.AgentEvalSetLoader"},
            {"query": "Which function processes a single task and returns the evaluation results?", "result": "automata.eval.agent.agent_eval_harness.process_task"},
            {"query": "Which class evaluates a list of instructions against a list of expected actions?", "result": "automata.eval.agent.agent_eval_harness.AgentEvaluationHarness"},
            {"query": "Which class represents the result of an agent eval?", "result": "automata.eval.agent.agent_eval.AgentEvalResult"},
            {"query": "Which class provides an abstraction for evaluating an LLM's performance?", "result": "automata.eval.agent.agent_eval.AgentEval"},
            {"query": "Which class raises an exception when there's an error executing the code?", "result": "automata.eval.agent.code_writing_eval.CodeExecutionError"},
            {"query": "Which class raises an exception when the target variable is not found?", "result": "automata.eval.agent.code_writing_eval.VariableNotFoundError"},
            {"query": "Which class represents written code in action?", "result": "automata.eval.agent.code_writing_eval.CodeWritingAction"},
            {"query": "Which class evaluates an LLM's code writing ability?", "result": "automata.eval.agent.code_writing_eval.CodeWritingEval"},
            {"query": "Which class represents an OpenAI function call in action?", "result": "automata.eval.agent.openai_function_eval.OpenAIFunctionCallAction"},
            {"query": "Which class evaluates OpenAI messages for function call actions?", "result": "automata.eval.agent.openai_function_eval.OpenAIFunctionEval"}
        ]
    }
]
