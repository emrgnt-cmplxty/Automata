[
    {
        "template": {
            "input_function": {
                "type": "FunctionCall",
                "name": "symbol-similarity-search",
                "arguments": {
                    "query": "{query}"
                }
            },
            "expected_action": {
                "type": "SymbolSearchAction",
                "query": "{query}",
                "search_results": "{result}"
            }
        },
        "entries": [
            {
                "query": "Which class is an abstract base class for building for agents?",
                "result": "automata.agent.agent.Agent"
            },
            {
                "query": "Which class is an abstract base class for building agent tools?",
                "result": "automata.agent.agent.AgentToolkitBuilder"
            },
            {
                "query": "Which class enumerates the available agent tools?",
                "result": "automata.agent.agent.AgentToolkitNames"
            },
            {
                "query": "Which class represents a general agent error?",
                "result": "automata.agent.error.AgentGeneralError"
            },
            {
                "query": "Which class builds tools for an OpenAI agent?",
                "result": "automata.agent.openai_agent.OpenAIAgentToolkitBuilder"
            },
            {
                "query": "Which class manages an OpenAI agent lifecycle?",
                "result": "automata.agent.openai_agent.OpenAIAutomataAgent"
            },
            {
                "query": "Which method of the OpenAI agent is responsible for running the agent?",
                "result": "automata.agent.openai_agent.OpenAIAutomataAgent.run"
            },
            {
                "query": "Which private method does the OpenAI agent call to perform setup?",
                "result": "automata.agent.openai_agent.OpenAIAutomataAgent._setup"
            },
            {
                "query": "Which class is responsible for executing instructions and reporting results back to the main system?",
                "result": "automata.agent.openai_agent.OpenAIAutomataAgent"
            },
            {
                "query": "Which method of the OpenAI agent is responsible for executing a single iteration of the task?",
                "result": "automata.agent.openai_agent.OpenAIAutomataAgent.__next__"
            },
            {
                "query": "Which method of the OpenAI agent is responsible for running the agent and iterating through the tasks until a result is produced?",
                "result": "automata.agent.openai_agent.OpenAIAutomataAgent.run"
            },
            {
                "query": "Which method of the OpenAI agent is responsible for getting the result of the agent?",
                "result": "automata.agent.openai_agent.OpenAIAutomataAgent.get_result"
            },
            {
                "query": "Which method in the OpenAI agent is responsible for setting the database provider for the agent?",
                "result": "automata.agent.openai_agent.OpenAIAutomataAgent.set_database_provider"
            },
            {
                "query": "Which private method in the OpenAI agent is responsible for building the initial messages for the agent's conversation?",
                "result": "automata.agent.openai_agent.OpenAIAutomataAgent._build_initial_messages"
            },
            {
                "query": "Which private method in the OpenAI agent is responsible for generating a user message based on the assistant's message?",
                "result": "automata.agent.openai_agent.OpenAIAutomataAgent._get_next_user_response"
            },
            {
                "query": "Which private method in the OpenAI agent is responsible for setting up the agent by initializing the conversation and chat provider?",
                "result": "automata.agent.openai_agent.OpenAIAutomataAgent._setup"
            },
            {
                "query": "Which private method is responsible for terminating the OpenAI agent?",
                "result": "automata.agent.openai_agent.OpenAIAutomataAgent._get_termination_tool"
            },
            {
                "query": "Which class is an abstract class for building OpenAI agent tools?",
                "result": "automata.agent.openai_agent.OpenAIAgentToolkitBuilder"
            },
            {
                "query": "Which method in the OpenAIAgentToolkitBuilder class is responsible for building an OpenAITool to be used by the associated agent?",
                "result": "automata.agent.openai_agent.OpenAIAgentToolkitBuilder.build_for_open_ai"
            },
            {
                "query": "Which function contains the CLI command responsible for running the agent?",
                "result": "automata.cli.commands.run_agent"
            },
            {
                "query": "Which function contains the CLI command responsible for running agent evaluations?",
                "result": "automata.cli.commands.run_agent_eval"
            },
            {
                "query": "Which function contains the CLI command responsible for running tool evaluations?",
                "result": "automata.cli.commands.run_tool_eval"
            },
            {
                "query": "Which function contains the CLI command responsible for configuring up the local environment?",
                "result": "automata.cli.cli_utils.setup_files"
            },
            {
                "query": "Which class represents a node in the file tree?",
                "result": "automata.code_parsers.directory.Node"
            },
            {
                "query": "Which class represents a file in the file tree?",
                "result": "automata.code_parsers.directory.File"
            },
            {
                "query": "Which class represents a directory in the file tree?",
                "result": "automata.code_parsers.directory.Directory"
            },
            {
                "query": "Which method adds a child node to a directory?",
                "result": "automata.code_parsers.directory.Directory.add_child"
            },
            {
                "query": "Which method gets a list of file names in a directory?",
                "result": "automata.code_parsers.directory.Directory.get_file_names"
            },
            {
                "query": "Which method gets a list of subdirectory names in a directory?",
                "result": "automata.code_parsers.directory.Directory.get_subdirectories"
            },
            {
                "query": "Which method checks if a directory is the root directory?",
                "result": "automata.code_parsers.directory.Directory.is_root_dir"
            },
            {
                "query": "Which method checks if a directory is a leaf directory?",
                "result": "automata.code_parsers.directory.Directory.is_leaf_dir"
            },
            {
                "query": "Which class handles operations related to directory structure?",
                "result": "automata.code_parsers.directory.DirectoryManager"
            },
            {
                "query": "Which method loads the directory structure into Directory and File objects?",
                "result": "automata.code_parsers.directory.DirectoryManager._load_directory_structure"
            },
            {
                "query": "Which method gets a list of files in the given directory?",
                "result": "automata.code_parsers.directory.DirectoryManager.get_files_in_dir"
            },
            {
                "query": "Which method gets a list of subdirectories in the given directory?",
                "result": "automata.code_parsers.directory.DirectoryManager.get_subdirectories"
            },
            {
                "query": "Which method ensures a directory exists?",
                "result": "automata.code_parsers.directory.DirectoryManager.ensure_directory_exists"
            },
            {
                "query": "Which private method finds the node for a given path?",
                "result": "automata.code_parsers.directory.DirectoryManager._get_node_for_path"
            },
            {
                "query": "Which class is responsible for fetching python code?",
                "result": "automata.code_parsers.py.py_reader.PyReader"
            },
            {
                "query": "Which method in the PyReader class is responsible for getting code for a specified module, class, or function/method?",
                "result": "automata.code_parsers.py.py_reader.PyReader.get_source_code"
            },
            {
                "query": "Which method in the PyReader class is responsible for getting the docstring for a specified module, class, or function/method?",
                "result": "automata.code_parsers.py.py_reader.PyReader.get_docstring"
            },
            {
                "query": "Which method in the PyReader class is responsible for getting code for a specified module, class, or function/method without its docstrings?",
                "result": "automata.code_parsers.py.py_reader.PyReader.get_source_code_without_docstrings"
            },
            {
                "query": "Which method in the PyReader class is responsible for getting the docstring from the specified node?",
                "result": "automata.code_parsers.py.py_reader.PyReader.get_docstring_from_node"
            },
            {
                "query": "Which function converts a filepath to a module dotpath?",
                "result": "automata.code_parsers.py.dotpath_map.convert_fpath_to_module_dotpath"
            },
            {
                "query": "Which class maps module dotpaths to module filepaths?",
                "result": "automata.code_parsers.py.dotpath_map.DotPathMap"
            },
            {
                "query": "Which private method in the DotPathMap class builds a map from module dotpaths to module filepaths?",
                "result": "automata.code_parsers.py.dotpath_map.DotPathMap._build_module_dotpath_to_fpath_map"
            },
            {
                "query": "Which method in the DotPathMap class gets the filepath of a module given its dotpath?",
                "result": "automata.code_parsers.py.dotpath_map.DotPathMap.get_module_fpath_by_dotpath"
            },
            {
                "query": "Which method in the DotPathMap class gets the dotpath of a module given its filepath?",
                "result": "automata.code_parsers.py.dotpath_map.DotPathMap.get_module_dotpath_by_fpath"
            },
            {
                "query": "Which method in the DotPathMap class checks if the map contains a module with the given dotpath?",
                "result": "automata.code_parsers.py.dotpath_map.DotPathMap.contains_dotpath"
            },
            {
                "query": "Which method in the DotPathMap class checks if the map contains a module with the given filepath?",
                "result": "automata.code_parsers.py.dotpath_map.DotPathMap.contains_fpath"
            },
            {
                "query": "Which method in the DotPathMap class adds a module with the given dotpath to the local store?",
                "result": "automata.code_parsers.py.dotpath_map.DotPathMap.put_module"
            },
            {
                "query": "Which method in the DotPathMap class deletes a module with the given dotpath in the local store?",
                "result": "automata.code_parsers.py.dotpath_map.DotPathMap.delete_module"
            },
            {
                "query": "Which method in the DotPathMap class returns a dictionary containing the module dotpath to module filepath mapping?",
                "result": "automata.code_parsers.py.dotpath_map.DotPathMap.items"
            },
            {
                "query": "Which function checks if a method is private in Python?",
                "result": "automata.code_parsers.py.context_processing.context_utils.is_private_method"
            },
            {
                "query": "Which function processes a specified method in Python code?",
                "result": "automata.code_parsers.py.context_processing.context_utils.process_method"
            },
            {
                "query": "Which function retrieves all methods from a given AST in Python?",
                "result": "automata.code_parsers.py.context_processing.context_utils.get_all_methods"
            },
            {
                "query": "Which function retrieves all classes from a given AST in Python?",
                "result": "automata.code_parsers.py.context_processing.context_utils.get_all_classes"
            },
            {
                "query": "Which function retrieves all attributes from a given class in Python?",
                "result": "automata.code_parsers.py.context_processing.context_utils.get_all_attributes"
            },
            {
                "query": "What is the configuration class for the PyContextHandler?",
                "result": "automata.code_parsers.py.context_processing.context_handler.PyContextHandlerConfig"
            },
            {
                "query": "What is the class that handles the context in Python code?",
                "result": "automata.code_parsers.py.context_processing.context_handler.PyContextHandler"
            },
            {
                "query": "Which method of the PyContextHandler is responsible for constructing the context for a symbol?",
                "result": "automata.code_parsers.py.context_processing.context_handler.PyContextHandler.construct_symbol_context"
            },
            {
                "query": "Which method of the PyContextHandler is responsible for getting the top N symbols according to their ranks?",
                "result": "automata.code_parsers.py.context_processing.context_handler.PyContextHandler.get_top_n_symbol_rank_matches"
            },
            {
                "query": "Which method of the PyContextHandler is responsible for getting the top N symbols that the given symbol depends on?",
                "result": "automata.code_parsers.py.context_processing.context_handler.PyContextHandler.get_top_n_symbol_dependencies"
            },
            {
                "query": "What is the base class for context components?",
                "result": "automata.code_parsers.py.context_processing.context_retriever.BaseContextComponent"
            },
            {
                "query": "What class generates a headline for a symbol?",
                "result": "automata.code_parsers.py.context_processing.context_retriever.HeadlineContextComponent"
            },
            {
                "query": "What class generates source code for a symbol?",
                "result": "automata.code_parsers.py.context_processing.context_retriever.SourceCodeContextComponent"
            },
            {
                "query": "What class generates an interface for a symbol?",
                "result": "automata.code_parsers.py.context_processing.context_retriever.InterfaceContextComponent"
            },
            {
                "query": "What class is used to retrieve the context of a symbol in a Python project?",
                "result": "automata.code_parsers.py.context_processing.context_retriever.PyContextRetriever"
            },
            {
                "query": "Which method of the PyContextRetriever is responsible for processing the context of a specified symbol?",
                "result": "automata.code_parsers.py.context_processing.context_retriever.PyContextRetriever.process_symbol"
            },
            {
                "query": "Which class holds the configuration for the Automata OpenAI Agent?",
                "result": "automata.config.openai_config.OpenAIAutomataAgentConfig"
            },
            {
                "query": "Which method loads the configuration for the Automata OpenAI Agent?",
                "result": "automata.config.openai_config.OpenAIAutomataAgentConfig.load"
            },
            {
                "query": "Which method gets the provider for the Automata OpenAI Agent?",
                "result": "automata.config.openai_config.OpenAIAutomataAgentConfig.get_llm_provider"
            },
            {
                "query": "Which private method is responsible for formatting the system template to produce the system instruction?",
                "result": "automata.config.openai_config.OpenAIAutomataAgentConfig._formatted_instruction"
            },
            {
                "query": "Which class is responsible for building the Automata OpenAI Agent configuration?",
                "result": "automata.config.openai_config.OpenAIAutomataAgentConfigBuilder"
            },
            {
                "query": "Which method sets the model for the Automata OpenAI Agent configuration builder?",
                "result": "automata.config.openai_config.OpenAIAutomataAgentConfigBuilder.with_model"
            },
            {
                "query": "Which method sets the system template formatter for the Automata OpenAI Agent configuration builder?",
                "result": "automata.config.openai_config.OpenAIAutomataAgentConfigBuilder.with_system_template_formatter"
            },
            {
                "query": "Which method sets the instruction version for the Automata OpenAI Agent configuration builder?",
                "result": "automata.config.openai_config.OpenAIAutomataAgentConfigBuilder.with_instruction_version"
            },
            {
                "query": "Which method creates an AutomataAgentConfig instance from the provided arguments?",
                "result": "automata.config.openai_config.OpenAIAutomataAgentConfigBuilder.create_from_args"
            },
            {
                "query": "Which class creates a default formatter for the Automata configuration?",
                "result": "automata.config.formatter.TemplateFormatter"
            },
            {
                "query": "Which method creates a default formatter for the Automata configuration?",
                "result": "automata.config.formatter.TemplateFormatter.create_default_formatter"
            },
            {
                "query": "Which class registers and tracks instances of ISymbolProvider?",
                "result": "automata.context_providers.symbol_synchronization_context.SymbolProviderRegistry"
            },
            {
                "query": "Which method registers a symbol provider?",
                "result": "automata.context_providers.symbol_synchronization_context.SymbolProviderRegistry.register_provider"
            },
            {
                "query": "Which method synchronizes all symbol providers?",
                "result": "automata.context_providers.symbol_synchronization_context.SymbolProviderRegistry.synchronize"
            },
            {
                "query": "Which class provides a context manager for synchronizing symbol providers?",
                "result": "automata.context_providers.symbol_synchronization_context.SymbolProviderSynchronizationContext"
            },
            {
                "query": "Which method in SymbolProviderSynchronizationContext registers a symbol provider?",
                "result": "automata.context_providers.symbol_synchronization_context.SymbolProviderSynchronizationContext.register_provider"
            },
            {
                "query": "Which method in SymbolProviderSynchronizationContext synchronizes all symbol providers?",
                "result": "automata.context_providers.symbol_synchronization_context.SymbolProviderSynchronizationContext.synchronize"
            },
            {
                "query": "What function sets the OpenAI API key from the environment variable OPENAI_API_KEY?",
                "result": "automata.core.utils.set_openai_api_key"
            },
            {
                "query": "What function gets the path to the root of the Automata python code directory?",
                "result": "automata.core.utils.get_root_py_fpath"
            },
            {
                "query": "What function gets the path to the root of the Automata directory?",
                "result": "automata.core.utils.get_root_fpath"
            },
            {
                "query": "What function gets the path to the root of the Automata config directory?",
                "result": "automata.core.utils.get_config_fpath"
            },
            {
                "query": "What function loads a config file from the config directory?",
                "result": "automata.core.utils.load_config"
            },
            {
                "query": "What function formats expected strings into the config?",
                "result": "automata.core.utils.format_text"
            },
            {
                "query": "What function converts a kebab-case string to snake_case?",
                "result": "automata.core.utils.convert_kebab_to_snake_case"
            },
            {
                "query": "What function returns the logging configuration?",
                "result": "automata.core.utils.get_logging_config"
            },
            {
                "query": "What function checks if a list is sorted?",
                "result": "automata.core.utils.is_sorted"
            },
            {
                "query": "What function calculates the similarity between two strings?",
                "result": "automata.core.utils.calculate_similarity"
            },
            {
                "query": "What function initializes the Automata task environment?",
                "result": "automata.core.run_handlers.initialize_automata"
            },
            {
                "query": "What function runs an agent with the given parameters?",
                "result": "automata.core.run_handlers.run_with_agent"
            },
            {
                "query": "What function creates a task with the given parameters?",
                "result": "automata.core.run_handlers.create_task"
            },
            {
                "query": "What function runs a task with the given parameters?",
                "result": "automata.core.run_handlers.run_with_task"
            },
            {
                "query": "What function runs a task with the given parameters and evaluates it?",
                "result": "automata.core.run_handlers.run_with_eval"
            },
            {
                "query": "What function finds the bounding box of a node in the AST?",
                "result": "automata.core.ast_handlers.fetch_bounding_box"
            },
            {
                "query": "What function gets the docstring from the specified node?",
                "result": "automata.core.ast_handlers.get_docstring_from_node"
            },
            {
                "query": "What class removes docstrings from a class or function?",
                "result": "automata.core.ast_handlers.DocstringRemover"
            },
            {
                "query": "What function creates a copy of the specified node without docstrings?",
                "result": "automata.core.ast_handlers.get_node_without_docstrings"
            },
            {
                "query": "What class removes import statements from a module, class or function?",
                "result": "automata.core.ast_handlers.ImportRemover"
            },
            {
                "query": "What function creates a copy of the specified node without import statements?",
                "result": "automata.core.ast_handlers.get_node_without_imports"
            },
            {
                "query": "What function finds the imports for a specified module?",
                "result": "automata.core.ast_handlers.find_imports"
            },
            {
                "query": "What function finds a module, or a function, method, or class inside a module?",
                "result": "automata.core.ast_handlers.find_syntax_tree_node"
            },
            {
                "query": "What is the base class for Automata exceptions?",
                "result": "automata.core.base.base_error.AutomataError"
            },
            {
                "query": "What is the abstract class for implementing an observer?",
                "result": "automata.core.base.patterns.observer.Observer"
            },
            {
                "query": "What abstract method is used to save data in the VectorDatabaseProvider?",
                "result": "automata.core.base.database.vector_database.VectorDatabaseProvider.save"
            },
            {
                "query": "What abstract method is used to load data in the VectorDatabaseProvider?",
                "result": "automata.core.base.database.vector_database.VectorDatabaseProvider.load"
            },
            {
                "query": "What abstract method is used to add an entry to the database in the VectorDatabaseProvider?",
                "result": "automata.core.base.database.vector_database.VectorDatabaseProvider.add"
            },
            {
                "query": "What abstract method is used to update a specific entry in the VectorDatabaseProvider?",
                "result": "automata.core.base.database.vector_database.VectorDatabaseProvider.update_entry"
            },
            {
                "query": "What abstract method is used to get a specific entry in the VectorDatabaseProvider?",
                "result": "automata.core.base.database.vector_database.VectorDatabaseProvider.get"
            },
            {
                "query": "What abstract method is used to discard a specific entry in the VectorDatabaseProvider?",
                "result": "automata.core.base.database.vector_database.VectorDatabaseProvider.discard"
            },
            {
                "query": "What method is used to save the vector database to the JSON file in JSONVectorDatabase?",
                "result": "automata.core.base.database.vector_database.JSONVectorDatabase.save"
            },
            {
                "query": "What method is used to load the vector database from the JSON file in JSONVectorDatabase?",
                "result": "automata.core.base.database.vector_database.JSONVectorDatabase.load"
            },
            {
                "query": "What method is used to add an entry to the database in JSONVectorDatabase?",
                "result": "automata.core.base.database.vector_database.JSONVectorDatabase.add"
            },
            {
                "query": "What method is used to update a specific entry in JSONVectorDatabase?",
                "result": "automata.core.base.database.vector_database.JSONVectorDatabase.update_entry"
            },
            {
                "query": "What method is used to get a specific entry in JSONVectorDatabase?",
                "result": "automata.core.base.database.vector_database.JSONVectorDatabase.get"
            },
            {
                "query": "What method is used to discard a specific entry in JSONVectorDatabase?",
                "result": "automata.core.base.database.vector_database.JSONVectorDatabase.discard"
            },
            {
                "query": "What method is used to save the vector database to the Chroma database in ChromaVectorDatabase?",
                "result": "automata.core.base.database.vector_database.ChromaVectorDatabase.save"
            },
            {
                "query": "What method is used to load the vector database from the Chroma database in ChromaVectorDatabase?",
                "result": "automata.core.base.database.vector_database.ChromaVectorDatabase.load"
            },
            {
                "query": "What method is used to add an entry to the database in ChromaVectorDatabase?",
                "result": "automata.core.base.database.vector_database.ChromaVectorDatabase.add"
            },
            {
                "query": "What method is used to update a specific entry in ChromaVectorDatabase?",
                "result": "automata.core.base.database.vector_database.ChromaVectorDatabase.update_entry"
            },
            {
                "query": "What method is used to discard a specific entry in ChromaVectorDatabase?",
                "result": "automata.core.base.database.vector_database.ChromaVectorDatabase.discard"
            },
            {
                "query": "What abstract method is used to connect to the database in RelationalDatabase?",
                "result": "automata.core.base.database.relational_database.RelationalDatabase.connect"
            },
            {
                "query": "What abstract method is used to close the connection to the database in RelationalDatabase?",
                "result": "automata.core.base.database.relational_database.RelationalDatabase.close"
            },
            {
                "query": "What abstract method is used to create a new table in RelationalDatabase?",
                "result": "automata.core.base.database.relational_database.RelationalDatabase.create_table"
            },
            {
                "query": "What abstract method is used to insert data into a table in RelationalDatabase?",
                "result": "automata.core.base.database.relational_database.RelationalDatabase.insert"
            },
            {
                "query": "What abstract method is used to select data from a table in RelationalDatabase?",
                "result": "automata.core.base.database.relational_database.RelationalDatabase.select"
            },
            {
                "query": "What abstract method is used to update data in a table in RelationalDatabase?",
                "result": "automata.core.base.database.relational_database.RelationalDatabase.update_entry"
            },
            {
                "query": "What abstract method is used to delete data from a table in RelationalDatabase?",
                "result": "automata.core.base.database.relational_database.RelationalDatabase.delete"
            },
            {
                "query": "What method is used to connect to the SQL database in SQLDatabase?",
                "result": "automata.core.base.database.relational_database.SQLDatabase.connect"
            },
            {
                "query": "What method is used to close the connection to the SQL database in SQLDatabase?",
                "result": "automata.core.base.database.relational_database.SQLDatabase.close"
            },
            {
                "query": "What method is used to create a new table in SQLDatabase?",
                "result": "automata.core.base.database.relational_database.SQLDatabase.create_table"
            },
            {
                "query": "What method is used to insert data into a table in SQLDatabase?",
                "result": "automata.core.base.database.relational_database.SQLDatabase.insert"
            },
            {
                "query": "What method is used to select data from a table in SQLDatabase?",
                "result": "automata.core.base.database.relational_database.SQLDatabase.select"
            },
            {
                "query": "What method is used to update data in a table in SQLDatabase?",
                "result": "automata.core.base.database.relational_database.SQLDatabase.update_entry"
            },
            {
                "query": "What method is used to delete data from a table in SQLDatabase?",
                "result": "automata.core.base.database.relational_database.SQLDatabase.delete"
            },
            {
                "query": "What is the Enum type used for Embedding normalization?",
                "result": "automata.embedding.embedding_base.EmbeddingNormType"
            },
            {
                "query": "What class provides embeddings for symbols?",
                "result": "automata.embedding.embedding_base.EmbeddingVectorProvider"
            },
            {
                "query": "What class represents an abstract base for different types of embeddings?",
                "result": "automata.embedding.embedding_base.Embedding"
            },
            {
                "query": "What class is used to build embeddings?",
                "result": "automata.embedding.embedding_base.EmbeddingBuilder"
            },
            {
                "query": "What method is used to fetch embedding source code in the EmbeddingBuilder class?",
                "result": "automata.embedding.embedding_base.EmbeddingBuilder.fetch_embedding_source_code"
            },
            {
                "query": "What class is responsible for handling batch embeddings?",
                "result": "automata.embedding.embedding_base.EmbeddingHandler"
            },
            {
                "query": "What class is used to calculate the similarity of embeddings?",
                "result": "automata.embedding.embedding_base.EmbeddingSimilarityCalculator"
            },
            {
                "query": "What method is used to calculate the similarity of a query in the EmbeddingSimilarityCalculator class?",
                "result": "automata.embedding.embedding_base.EmbeddingSimilarityCalculator.calculate_query_similarity_dict"
            },
            {
                "query": "What private method is used to normalize embeddings in the EmbeddingSimilarityCalculator class?",
                "result": "automata.embedding.embedding_base.EmbeddingSimilarityCalculator._normalize_embeddings"
            },
            {
                "query": "What is the Enum type used for Embedding normalization?",
                "result": "automata.embedding.embedding_base.EmbeddingNormType"
            },
            {
                "query": "What abstract base class provides embeddings for symbols?",
                "result": "automata.embedding.embedding_base.EmbeddingVectorProvider"
            },
            {
                "query": "What abstract base class represents different types of embeddings?",
                "result": "automata.embedding.embedding_base.Embedding"
            },
            {
                "query": "What abstract base class is used to build embeddings?",
                "result": "automata.embedding.embedding_base.EmbeddingBuilder"
            },
            {
                "query": "What abstract method is used to fetch embedding source code in the EmbeddingBuilder class?",
                "result": "automata.embedding.embedding_base.EmbeddingBuilder.fetch_embedding_source_code"
            },
            {
                "query": "What abstract base class is responsible for handling batch embeddings?",
                "result": "automata.embedding.embedding_base.EmbeddingHandler"
            },
            {
                "query": "What class is used to calculate the similarity of embeddings?",
                "result": "automata.embedding.embedding_base.EmbeddingSimilarityCalculator"
            },
            {
                "query": "What method is used to calculate the similarity of a query in the EmbeddingSimilarityCalculator class?",
                "result": "automata.embedding.embedding_base.EmbeddingSimilarityCalculator.calculate_query_similarity_dict"
            },
            {
                "query": "What method is used to normalize embeddings in the EmbeddingSimilarityCalculator class?",
                "result": "automata.embedding.embedding_base.EmbeddingSimilarityCalculator._normalize_embeddings"
            },
            {
                "query": "What is the Enum type used for Embedding normalization?",
                "result": "automata.embedding.embedding_base.EmbeddingNormType"
            },
            {
                "query": "What abstract base class provides embeddings for symbols?",
                "result": "automata.embedding.embedding_base.EmbeddingVectorProvider"
            },
            {
                "query": "What abstract base class represents different types of embeddings?",
                "result": "automata.embedding.embedding_base.Embedding"
            },
            {
                "query": "What abstract base class is used to build embeddings?",
                "result": "automata.embedding.embedding_base.EmbeddingBuilder"
            },
            {
                "query": "What abstract method is used to fetch embedding source code in the EmbeddingBuilder class?",
                "result": "automata.embedding.embedding_base.EmbeddingBuilder.fetch_embedding_source_code"
            },
            {
                "query": "What abstract base class is responsible for handling batch embeddings?",
                "result": "automata.embedding.embedding_base.EmbeddingHandler"
            },
            {
                "query": "What class is used to calculate the similarity of embeddings?",
                "result": "automata.embedding.embedding_base.EmbeddingSimilarityCalculator"
            },
            {
                "query": "What method is used to calculate the similarity of a query in the EmbeddingSimilarityCalculator class?",
                "result": "automata.embedding.embedding_base.EmbeddingSimilarityCalculator.calculate_query_similarity_dict"
            },
            {
                "query": "What method is used to normalize embeddings in the EmbeddingSimilarityCalculator class?",
                "result": "automata.embedding.embedding_base.EmbeddingSimilarityCalculator._normalize_embeddings"
            },
            {
                "query": "What decorator is used to register an Action subclass in the ACTION_REGISTRY?",
                "result": "automata.eval.eval_base.register_action"
            },
            {
                "query": "What function parses the corresponding action from a raw dictionary?",
                "result": "automata.eval.eval_base.parse_action_from_payload"
            },
            {
                "query": "What abstract base class represents the result of an evaluation?",
                "result": "automata.eval.eval_base.EvalResult"
            },
            {
                "query": "What abstract method is used to determine if an evaluation was a full match?",
                "result": "automata.eval.eval_base.EvalResult.is_full_match"
            },
            {
                "query": "What abstract method is used to determine if an evaluation was a partial match?",
                "result": "automata.eval.eval_base.EvalResult.is_partial_match"
            },
            {
                "query": "What abstract base class is used for evaluating an LLM's performance?",
                "result": "automata.eval.eval_base.Eval"
            },
            {
                "query": "What abstract method is used to generate an eval result in the Eval class?",
                "result": "automata.eval.eval_base.Eval.generate_eval_result"
            },
            {
                "query": "What abstract method is used to extract a list of action from the given message in the Eval class?",
                "result": "automata.eval.eval_base.Eval.extract_action"
            },
            {
                "query": "What exception is raised when there's an issue with loading evaluations?",
                "result": "automata.eval.eval_error.EvalLoadingError"
            },
            {
                "query": "What exception is raised when there's an issue during task execution?",
                "result": "automata.eval.eval_error.EvalExecutionError"
            },
            {
                "query": "Which class in automata.core.base.patterns.singleton is a metaclass ensuring only one instance of a class?",
                "result": "automata.core.base.patterns.singleton.Singleton"
            },
            {
                "query": "Which method in automata.core.base.patterns.singleton.Singleton is responsible for creating an instance if it does not exist?",
                "result": "automata.core.base.patterns.singleton.Singleton.__call__"
            },
            {
                "query": "Which abstract class in automata.eval.tool.tool_eval represents the result of a tool eval?",
                "result": "automata.eval.tool.tool_eval.ToolEvalResult"
            },
            {
                "query": "Which abstract class in automata.eval.tool.tool_eval evaluates tools' performance?",
                "result": "automata.eval.tool.tool_eval.ToolEval"
            },
            {
                "query": "Which method in automata.eval.tool.tool_eval.ToolEval generates an eval result for a given set of instructions and expected actions?",
                "result": "automata.eval.tool.tool_eval.ToolEval.generate_eval_result"
            },
            {
                "query": "Which method in automata.eval.tool.tool_eval.ToolEval extracts a list of action from the given message?",
                "result": "automata.eval.tool.tool_eval.ToolEval.extract_action"
            },
            {
                "query": "Which method in automata.eval.tool.tool_eval.ToolEval converts the evaluation result to a ToolEvalResult?",
                "result": "automata.eval.tool.tool_eval.ToolEval.to_tool_result"
            },
            {
                "query": "Which class in automata.eval.tool.tool_eval_metrics evaluates detailed metrics from a sequence of ToolEvalResults?",
                "result": "automata.eval.tool.tool_eval_metrics.ToolEvaluationMetrics"
            },
            {
                "query": "Which method in automata.eval.tool.tool_eval_metrics.ToolEvaluationMetrics calculates the full match rate?",
                "result": "automata.eval.tool.tool_eval_metrics.ToolEvaluationMetrics.full_match_rate"
            },
            {
                "query": "Which method in automata.eval.tool.tool_eval_metrics.ToolEvaluationMetrics calculates the partial match rate?",
                "result": "automata.eval.tool.tool_eval_metrics.ToolEvaluationMetrics.partial_match_rate"
            },
            {
                "query": "Which class in automata.eval.tool.tool_eval_harness loads a list of function calls and their expected actions from a JSON file?",
                "result": "automata.eval.tool.tool_eval_harness.ToolEvalSetLoader"
            },
            {
                "query": "Which class in automata.eval.tool.tool_eval_harness evaluates a list of function calls against a list of expected actions?",
                "result": "automata.eval.tool.tool_eval_harness.ToolEvaluationHarness"
            },
            {
                "query": "Which method in automata.eval.tool.tool_eval_harness.ToolEvaluationHarness returns the evaluation metrics for the given function calls and expected actions?",
                "result": "automata.eval.tool.tool_eval_harness.ToolEvaluationHarness.evaluate"
            },
            {
                "query": "Which class in automata.eval.tool.search_eval represents a concrete action for a symbol search?",
                "result": "automata.eval.tool.search_eval.SymbolSearchAction"
            },
            {
                "query": "Which class in automata.eval.tool.search_eval represents the result of a symbol search eval?",
                "result": "automata.eval.tool.search_eval.SymbolSearchEvalResult"
            },
            {
                "query": "Which class in automata.eval.tool.search_eval evaluates an LLM's symbol searching ability?",
                "result": "automata.eval.tool.search_eval.SymbolSearchEval"
            },
            {
                "query": "Which method in automata.eval.tool.search_eval.SymbolSearchEval extracts the search action implicitly?",
                "result": "automata.eval.tool.search_eval.SymbolSearchEval.extract_action"
            },
            {
                "query": "Which method in automata.eval.tool.search_eval.SymbolSearchEval converts the evaluation result to a ToolEvalResult?",
                "result": "automata.eval.tool.search_eval.SymbolSearchEval.to_tool_result"
            },
            {
                "query": "What function aggregates a list of EvalResult objects into a single result?",
                "result": "automata.eval.agent.agent_eval_composite.aggregate_agent_result"
            },
            {
                "query": "What function checks if all evaluators are of different types?",
                "result": "automata.eval.agent.agent_eval_composite.check_eval_uniqueness"
            },
            {
                "query": "What class creates a composite evaluator from a list of evaluator classes?",
                "result": "automata.eval.agent.agent_eval_composite.AgentEvalComposite"
            },
            {
                "query": "Which class writes evaluation results to a SQLite database?",
                "result": "automata.eval.agent.agent_eval_database.AgentEvalResultDatabase"
            },
            {
                "query": "What function writes the result to the database?",
                "result": "automata.eval.agent.agent_eval_database.AgentEvalResultDatabase.write_result"
            },
            {
                "query": "What function gets the results from the database",
                "result": "automata.eval.agent.agent_eval_database.AgentEvalResultDatabase.get_results"
            },
            {
                "query": "What class loads a list of tasks from a JSON file?",
                "result": "automata.eval.agent.agent_eval_harness.AgentEvalSetLoader"
            },
            {
                "query": "What function creates a payload?",
                "result": "automata.eval.agent.agent_eval_harness.create_payload"
            },
            {
                "query": "What function processes a single task and returns the evaluation results?",
                "result": "automata.eval.agent.agent_eval_harness.process_task"
            },
            {
                "query": "What class evaluates a list of instructions against a list of expected actions?",
                "result": "automata.eval.agent.agent_eval_harness.AgentEvaluationHarness"
            },
            {
                "query": "Which class writes evaluation results to a SQLite database?",
                "result": "automata.eval.agent.agent_eval_database.AgentEvalResultDatabase"
            },
            {
                "query": "Which class loads a list of tasks from a JSON file?",
                "result": "automata.eval.agent.agent_eval_harness.AgentEvalSetLoader"
            },
            {
                "query": "Which function processes a single task and returns the evaluation results?",
                "result": "automata.eval.agent.agent_eval_harness.process_task"
            },
            {
                "query": "Which class evaluates a list of instructions against a list of expected actions?",
                "result": "automata.eval.agent.agent_eval_harness.AgentEvaluationHarness"
            },
            {
                "query": "Which class represents the result of an agent eval?",
                "result": "automata.eval.agent.agent_eval.AgentEvalResult"
            },
            {
                "query": "Which class provides an abstraction for evaluating an LLM's performance?",
                "result": "automata.eval.agent.agent_eval.AgentEval"
            },
            {
                "query": "Which class raises an exception when there's an error executing the code?",
                "result": "automata.eval.agent.code_writing_eval.CodeExecutionError"
            },
            {
                "query": "Which class raises an exception when the target variable is not found?",
                "result": "automata.eval.agent.code_writing_eval.VariableNotFoundError"
            },
            {
                "query": "Which class represents written code in action?",
                "result": "automata.eval.agent.code_writing_eval.CodeWritingAction"
            },
            {
                "query": "Which class evaluates an LLM's code writing ability?",
                "result": "automata.eval.agent.code_writing_eval.CodeWritingEval"
            },
            {
                "query": "Which class represents an OpenAI function call in action?",
                "result": "automata.eval.agent.openai_function_eval.OpenAIFunctionCallAction"
            },
            {
                "query": "Which class evaluates OpenAI messages for function call actions?",
                "result": "automata.eval.agent.openai_function_eval.OpenAIFunctionEval"
            },
            {
                "query": "What enum class defines the available search tools?",
                "result": "automata.experimental.tools.builders.symbol_search_builder.SearchTool"
            },
            {
                "query": "What class builds tools for interacting with the SymbolSearch API?",
                "result": "automata.experimental.tools.builders.symbol_search_builder.SymbolSearchToolkitBuilder"
            },
            {
                "query": "How is the SymbolSearchToolkitBuilder object constructed?",
                "result": "automata.experimental.tools.builders.symbol_search_builder.SymbolSearchToolkitBuilder.__init__"
            },
            {
                "query": "What method builds a specific search tool?",
                "result": "automata.experimental.tools.builders.symbol_search_builder.SymbolSearchToolkitBuilder.build_tool"
            },
            {
                "query": "What method builds all search tools defined in the toolkit?",
                "result": "automata.experimental.tools.builders.symbol_search_builder.SymbolSearchToolkitBuilder.build"
            },
            {
                "query": "How does the toolkit process a query?",
                "result": "automata.experimental.tools.builders.symbol_search_builder.SymbolSearchToolkitBuilder.process_query"
            },
            {
                "query": "What class extends SymbolSearchToolkitBuilder for openAI?",
                "result": "automata.experimental.tools.builders.symbol_search_builder.SymbolSearchOpenAIToolkitBuilder"
            },
            {
                "query": "What method builds tools for OpenAI?",
                "result": "automata.experimental.tools.builders.symbol_search_builder.SymbolSearchOpenAIToolkitBuilder.build_for_open_ai"
            },
            {
                "query": "How does the toolkit perform a symbol rank search?",
                "result": "automata.experimental.tools.builders.symbol_search_builder.SymbolSearchToolkitBuilder._symbol_rank_search_processor"
            },
            {
                "query": "How does the toolkit perform a similarity based search of symbols?",
                "result": "automata.experimental.tools.builders.symbol_search_builder.SymbolSearchToolkitBuilder._symbol_code_similarity_search_processor"
            },
            {
                "query": "How does the toolkit find all references to a given symbol?",
                "result": "automata.experimental.tools.builders.symbol_search_builder.SymbolSearchToolkitBuilder._symbol_symbol_references_processor"
            },
            {
                "query": "How does the toolkit return the source code for a given symbol?",
                "result": "automata.experimental.tools.builders.symbol_search_builder.SymbolSearchToolkitBuilder._retrieve_source_code_by_symbol_processor"
            },
            {
                "query": "How does the toolkit perform an exact search?",
                "result": "automata.experimental.tools.builders.symbol_search_builder.SymbolSearchToolkitBuilder._exact_search_processor"
            },
            {
                "query": "Which class provides tools for translating an NLP query to relevant context?",
                "result": "automata.experimental.tools.builders.document_oracle_builder.DocumentOracleToolkitBuilder"
            },
            {
                "query": "Which method in DocumentOracleToolkitBuilder builds the associated tools?",
                "result": "automata.experimental.tools.builders.document_oracle_builder.DocumentOracleToolkitBuilder.build"
            },
            {
                "query": "Which method in DocumentOracleToolkitBuilder retrieves the best matching class documentation for a query?",
                "result": "automata.experimental.tools.builders.document_oracle_builder.DocumentOracleToolkitBuilder._get_best_match"
            },
            {
                "query": "Which class is a builder for toolkit for OpenAI API and provides the tools of context oracle?",
                "result": "automata.experimental.tools.builders.document_oracle_builder.DocumentOracleOpenAIToolkitBuilder"
            },
            {
                "query": "Which method in DocumentOracleOpenAIToolkitBuilder builds the associated tools for OpenAI API?",
                "result": "automata.experimental.tools.builders.document_oracle_builder.DocumentOracleOpenAIToolkitBuilder.build_for_open_ai"
            },
            {
                "query": "Which class provides tools for translating a NLP query to relevant context?",
                "result": "automata.experimental.tools.builders.document_oracle_builder.DocumentOracleToolkitBuilder"
            },
            {
                "query": "How is the DocumentOracleToolkitBuilder object constructed?",
                "result": "automata.experimental.tools.builders.document_oracle_builder.DocumentOracleToolkitBuilder.__init__"
            },
            {
                "query": "Which method builds the tools associated with the context oracle in DocumentOracleToolkitBuilder?",
                "result": "automata.experimental.tools.builders.document_oracle_builder.DocumentOracleToolkitBuilder.build"
            },
            {
                "query": "Which private method retrieves the best matching class documentation according to a given query in DocumentOracleToolkitBuilder?",
                "result": "automata.experimental.tools.builders.document_oracle_builder.DocumentOracleToolkitBuilder._get_best_match"
            },
            {
                "query": "Which class extends DocumentOracleToolkitBuilder and OpenAIAgentToolkitBuilder to build the document oracle for the OpenAI API?",
                "result": "automata.experimental.tools.builders.document_oracle_builder.DocumentOracleOpenAIToolkitBuilder"
            },
            {
                "query": "Which method constructs the tools associated with the context oracle for the OpenAI API in DocumentOracleOpenAIToolkitBuilder?",
                "result": "automata.experimental.tools.builders.document_oracle_builder.DocumentOracleOpenAIToolkitBuilder.build_for_open_ai"
            },
            {
                "query": "Which class is responsible for building advanced context oracle toolkits?",
                "result": "automata.experimental.tools.builders.advanced_context_oracle_builder.AdvancedContextOracleToolkitBuilder"
            },
            {
                "query": "How is the AdvancedContextOracleToolkitBuilder object constructed?",
                "result": "automata.experimental.tools.builders.advanced_context_oracle_builder.AdvancedContextOracleToolkitBuilder.__init__"
            },
            {
                "query": "What method is used to build tools associated with the context oracle using AdvancedContextOracleToolkitBuilder?",
                "result": "automata.experimental.tools.builders.advanced_context_oracle_builder.AdvancedContextOracleToolkitBuilder.build"
            },
            {
                "query": "What private method is used by AdvancedContextOracleToolkitBuilder to retrieve context corresponding to a given query?",
                "result": "automata.experimental.tools.builders.advanced_context_oracle_builder.AdvancedContextOracleToolkitBuilder._get_context"
            },
            {
                "query": "Which class is responsible for building advanced context oracle toolkit using OpenAI?",
                "result": "automata.experimental.tools.builders.advanced_context_oracle_builder.AdvancedContextOracleOpenAIToolkitBuilder"
            },
            {
                "query": "What method is used to build tools associated with context oracle for the OpenAI API using AdvancedContextOracleOpenAIToolkitBuilder?",
                "result": "automata.experimental.tools.builders.advanced_context_oracle_builder.AdvancedContextOracleOpenAIToolkitBuilder.build_for_open_ai"
            },
            {
                "query": "How a new AdvancedContextOracleToolkitBuilder or AdvancedContextOracleOpenAIToolkitBuilder is registered?",
                "result": "automata.singletons.toolkit_registry.OpenAIAutomataAgentToolkitRegistry.register_tool_manager"
            },
            {
                "query": "What class exposes various search methods for symbols?",
                "result": "automata.experimental.search.symbol_search.SymbolSearch"
            },
            {
                "query": "Which method in the SymbolSearch class fetches the list of the SymbolRank similar symbols ordered by rank?",
                "result": "automata.experimental.search.symbol_search.SymbolSearch.get_symbol_rank_results"
            },
            {
                "query": "Which method in the SymbolSearch class fetches the list of similar symbols sorted by embedding similarity?",
                "result": "automata.experimental.search.symbol_search.SymbolSearch.get_symbol_code_similarity_results"
            },
            {
                "query": "Which method in SymbolSearch class finds all references to a module, class, method, or standalone function represented by a symbol?",
                "result": "automata.experimental.search.symbol_search.SymbolSearch.symbol_references"
            },
            {
                "query": "Which method in SymbolSearch class retrieves the source code of a module, class, method, or standalone function represented by a symbol?",
                "result": "automata.experimental.search.symbol_search.SymbolSearch.retrieve_source_code_by_symbol"
            },
            {
                "query": "Which method in SymbolSearch class performs an exact search across the indexed codebase?",
                "result": "automata.experimental.search.symbol_search.SymbolSearch.exact_search"
            },
            {
                "query": "Which method in SymbolSearch class processes a natural language query and returns the appropriate search result?",
                "result": "automata.experimental.search.symbol_search.SymbolSearch.process_query"
            },
            {
                "query": "Which method in the SymbolSearch class calculates the z-score, shifts them to be positive, and raises the values to the specified power?",
                "result": "automata.experimental.search.symbol_search.SymbolSearch.shifted_z_score_powered"
            },
            {
                "query": "Which method in SymbolSearch applies a function to each value in a dictionary and returns a new dictionary?",
                "result": "automata.experimental.search.symbol_search.SymbolSearch.transform_dict_values"
            },
            {
                "query": "What configuration class is used for SymbolRank?",
                "result": "automata.experimental.search.symbol_rank.SymbolRankConfig"
            },
            {
                "query": "How do you validate a SymbolRankConfig?",
                "result": "automata.experimental.search.symbol_rank.SymbolRankConfig.validate_config"
            },
            {
                "query": "What class applies the PageRank algorithm on symbols in a graph?",
                "result": "automata.experimental.search.symbol_rank.SymbolRank"
            },
            {
                "query": "How is SymbolRank object constructed?",
                "result": "automata.experimental.search.symbol_rank.SymbolRank.__init__"
            },
            {
                "query": "How do you perform the SymbolRank ranking calculations?",
                "result": "automata.experimental.search.symbol_rank.SymbolRank.get_ordered_ranks"
            },
            {
                "query": "How do you filter the top N symbols according to their ranks?",
                "result": "automata.experimental.search.symbol_rank.SymbolRank.get_top_symbols"
            },
            {
                "query": "What method prepares the graph for the SymbolRank algorithm?",
                "result": "automata.experimental.search.symbol_rank.SymbolRank._prepare_graph"
            },
            {
                "query": "How are the initial rank values for each node in the graph prepared?",
                "result": "automata.experimental.search.symbol_rank.SymbolRank._prepare_initial_ranks"
            },
            {
                "query": "How to prepare the similarity input dictionary for the SymbolRank algorithm?",
                "result": "automata.experimental.search.symbol_rank.SymbolRank._prepare_query_to_symbol_similarity"
            },
            {
                "query": "How to prepare the dangling node weights for the SymbolRank algorithm?",
                "result": "automata.experimental.search.symbol_rank.SymbolRank._prepare_dangling_weights"
            },
            {
                "query": "How to identify the dangling nodes in the graph?",
                "result": "automata.experimental.search.symbol_rank.SymbolRank._get_dangling_nodes"
            },
            {
                "query": "Which class is a Singleton for lazy loading mapping dotpaths to AST objects?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader"
            },
            {
                "query": "How can the PyModuleLoader Singleton be initialized?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader.initialize"
            },
            {
                "query": "How can we check if a dotpath is present in the PyModuleLoader?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader.__contains__"
            },
            {
                "query": "How does PyModuleLoader perform its initialization assertions?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader._assert_initialized"
            },
            {
                "query": "How can we retrieve all items from the PyModuleLoader map?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader.items"
            },
            {
                "query": "How can we fetch the AST module for a given dotpath using PyModuleLoader?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader.fetch_ast_module"
            },
            {
                "query": "How can we retrieve the dotpath for a given module object in PyModuleLoader?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader.fetch_existing_module_dotpath"
            },
            {
                "query": "How can we retrieve the filepath for a given dotpath in PyModuleLoader?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader.fetch_existing_module_fpath_by_dotpath"
            },
            {
                "query": "How can we retrieve the dotpath for a given filepath using PyModuleLoader?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader.get_module_dotpath_by_fpath"
            },
            {
                "query": "How can we add a new module with its dotpath to the PyModuleLoader map?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader.put_module"
            },
            {
                "query": "How can we remove a module using its dotpath from the PyModuleLoader map?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader.delete_module"
            },
            {
                "query": "How can we reset the PyModuleLoader to its initial state?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader.reset"
            },
            {
                "query": "What does the method _load_all_modules of PyModuleLoader do?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader._load_all_modules"
            },
            {
                "query": "How can a Python AST object be loaded from a filepath?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader._load_module_from_fpath"
            },
            {
                "query": "What class exists as a Singleton to create dependencies for input Tool construction?",
                "result": "automata.singletons.dependency_factory.DependencyFactory"
            },
            {
                "query": "How is DependencyFactory object constructed?",
                "result": "automata.singletons.dependency_factory.DependencyFactory.__init__"
            },
            {
                "query": "How can the DependencyFactory set its overrides?",
                "result": "automata.singletons.dependency_factory.DependencyFactory.set_overrides"
            },
            {
                "query": "How to get a dependency from the DependencyFactory?",
                "result": "automata.singletons.dependency_factory.DependencyFactory.get"
            },
            {
                "query": "What's the purpose of 'build_dependencies_for_tools' method in DependencyFactory?",
                "result": "automata.singletons.dependency_factory.DependencyFactory.build_dependencies_for_tools"
            },
            {
                "query": "How can DependencyFactory synchronize an `ISymbolProvider` instance?",
                "result": "automata.singletons.dependency_factory.DependencyFactory._synchronize_provider"
            },
            {
                "query": "How does the DependencyFactory create a `SymbolGraph` instance?",
                "result": "automata.singletons.dependency_factory.DependencyFactory.create_symbol_graph"
            },
            {
                "query": "How can DependencyFactory create a netowrkx DiGraph as a subgraph?",
                "result": "automata.singletons.dependency_factory.DependencyFactory.create_subgraph"
            },
            {
                "query": "How can DependencyFactory create a `SymbolRank` instance?",
                "result": "automata.singletons.dependency_factory.DependencyFactory.create_symbol_rank"
            },
            {
                "query": "How can DependencyFactory create a `SymbolCodeEmbeddingHandler` instance?",
                "result": "automata.singletons.dependency_factory.DependencyFactory.create_symbol_code_embedding_handler"
            },
            {
                "query": "How can DependencyFactory create a `SymbolDocEmbeddingHandler` instance?",
                "result": "automata.singletons.dependency_factory.DependencyFactory.create_symbol_doc_embedding_handler"
            },
            {
                "query": "How can DependencyFactory create `SymbolSearch` instance?",
                "result": "automata.singletons.dependency_factory.DependencyFactory.create_symbol_search"
            },
            {
                "query": "How can DependencyFactory create `PyContextRetriever` instance?",
                "result": "automata.singletons.dependency_factory.DependencyFactory.create_py_context_retriever"
            },
            {
                "query": "How can DependencyFactory create `PyContextHandler` instance?",
                "result": "automata.singletons.dependency_factory.DependencyFactory.create_py_context_handler"
            },
            {
                "query": "How can DependencyFactory create `EmbeddingSimilarityCalculator` instance?",
                "result": "automata.singletons.dependency_factory.DependencyFactory.create_embedding_similarity_calculator"
            },
            {
                "query": "How can DependencyFactory create `PyReader` instance?",
                "result": "automata.singletons.dependency_factory.DependencyFactory.create_py_reader"
            },
            {
                "query": "How can DependencyFactory create `PyCodeWriter` instance?",
                "result": "automata.singletons.dependency_factory.DependencyFactory.create_py_writer"
            },
            {
                "query": "What method can reset the entire dependency cache in DependencyFactory?",
                "result": "automata.singletons.dependency_factory.DependencyFactory.reset"
            },
            {
                "query": "Which class acts as a registry for different OpenAI agent toolkits?",
                "result": "automata.singletons.toolkit_registry.OpenAIAutomataAgentToolkitRegistry"
            },
            {
                "query": "How can a toolkit be registered to the OpenAIAutomataAgentToolkitRegistry?",
                "result": "automata.singletons.toolkit_registry.OpenAIAutomataAgentToolkitRegistry.register_tool_manager"
            },
            {
                "query": "How to get all the registered toolkits in the OpenAIAutomataAgentToolkitRegistry?",
                "result": "automata.singletons.toolkit_registry.OpenAIAutomataAgentToolkitRegistry.get_all_builders"
            },
            {
                "query": "How does the OpenAIAutomataAgentToolkitRegistry initialize and automatically import all available builders?",
                "result": "automata.singletons.toolkit_registry.OpenAIAutomataAgentToolkitRegistry.initialize"
            },
            {
                "query": "What abstract class provides an interface for managing repositories?",
                "result": "automata.singletons.github_client.RepositoryClient"
            },
            {
                "query": "What method is used to clone a repository?",
                "result": "automata.singletons.github_client.RepositoryClient.clone_repository"
            },
            {
                "query": "What method is used to create a new branch in the repository?",
                "result": "automata.singletons.github_client.RepositoryClient.create_branch"
            },
            {
                "query": "What method is used to checkout a branch in the repository?",
                "result": "automata.singletons.github_client.RepositoryClient.checkout_branch"
            },
            {
                "query": "Which method is used to stage all changes in the repository?",
                "result": "automata.singletons.github_client.RepositoryClient.stage_all_changes"
            },
            {
                "query": "What method is used to commit and push all changes in the repository?",
                "result": "automata.singletons.github_client.RepositoryClient.commit_and_push_changes"
            },
            {
                "query": "How do you create a new pull request on the remote?",
                "result": "automata.singletons.github_client.RepositoryClient.create_pull_request"
            },
            {
                "query": "What method is used to merge a pull request on the remote?",
                "result": "automata.singletons.github_client.RepositoryClient.merge_pull_request"
            },
            {
                "query": "How can you check if a branch exists on the remote?",
                "result": "automata.singletons.github_client.RepositoryClient.branch_exists"
            },
            {
                "query": "What class provides an interface for working with GitHub repositories?",
                "result": "automata.singletons.github_client.GitHubClient"
            },
            {
                "query": "Which method is used to get open issues for the remote repository?",
                "result": "automata.singletons.github_client.GitHubClient.get_open_issues"
            },
            {
                "query": "Which function is used to retrieve the open pull requests for the remote repository?",
                "result": "automata.singletons.github_client.GitHubClient.get_open_pull_requests"
            },
            {
                "query": "What method is used to create a new issue on Github?",
                "result": "automata.singletons.github_client.GitHubClient.create_issue"
            },
            {
                "query": "Which method is used to add a label to an issue on the remote repository?",
                "result": "automata.singletons.github_client.GitHubClient.add_label"
            },
            {
                "query": "Which method is used to remove a label from an issue on the remote repository?",
                "result": "automata.singletons.github_client.GitHubClient.remove_label"
            },
            {
                "query": "What method is used to add a comment to an issue on the remote repository?",
                "result": "automata.singletons.github_client.GitHubClient.create_issue_comment"
            },
            {
                "query": "What method is used to remove a comment from an issue on the remote repository?",
                "result": "automata.singletons.github_client.GitHubClient.remove_issue_comment"
            },
            {
                "query": "What method is used to fetch an issue from the remote repository?",
                "result": "automata.singletons.github_client.GitHubClient.fetch_issue"
            },
            {
                "query": "Which class is designed to manage, store, and retrieve tasks?",
                "result": "automata.tasks.task_registry.AutomataTaskRegistry"
            },
            {
                "query": "Which method of AutomataTaskRegistry is responsible for registering tasks?",
                "result": "automata.tasks.task_registry.AutomataTaskRegistry.register"
            },
            {
                "query": "Which method of AutomataTaskRegistry is responsible for updating tasks?",
                "result": "automata.tasks.task_registry.AutomataTaskRegistry.update_task"
            },
            {
                "query": "How can a task be fetched based on its recorded session id?",
                "result": "automata.tasks.task_registry.AutomataTaskRegistry.fetch_task_by_id"
            },
            {
                "query": "How can all tasks be retrieved from the registry?",
                "result": "automata.tasks.task_registry.AutomataTaskRegistry.get_all_tasks"
            },
            {
                "query": "What class represents a general error during task execution?",
                "result": "automata.tasks.task_error.TaskGeneralError"
            },
            {
                "query": "What class is used to signal the task is not in the correct state for the operation?",
                "result": "automata.tasks.task_error.TaskStateError"
            },
            {
                "query": "What class indicates an error with the task instructions?",
                "result": "automata.tasks.task_error.TaskInstructionsError"
            },
            {
                "query": "Which class creates a local store for all tasks?",
                "result": "automata.tasks.task_database.AutomataAgentTaskDatabase"
            },
            {
                "query": "What method is used to connect to the task database and create a table?",
                "result": "automata.tasks.task_database.AutomataAgentTaskDatabase.__init__"
            },
            {
                "query": "Which method of the task database is responsible for inserting a new task?",
                "result": "automata.tasks.task_database.AutomataAgentTaskDatabase.insert_task"
            },
            {
                "query": "Which method of the task database is used to update an existing task?",
                "result": "automata.tasks.task_database.AutomataAgentTaskDatabase.update_task"
            },
            {
                "query": "Which method of the task database retrieves tasks based on a specified query?",
                "result": "automata.tasks.task_database.AutomataAgentTaskDatabase.get_tasks_by_query"
            },
            {
                "query": "Which method of the task database checks if a task already exists?",
                "result": "automata.tasks.task_database.AutomataAgentTaskDatabase.contains"
            },
            {
                "query": "What class represents a generic task object used by the TaskExecutor?",
                "result": "automata.tasks.task_base.Task"
            },
            {
                "query": "How is a Task object constructed?",
                "result": "automata.tasks.task_base.Task.__init__"
            },
            {
                "query": "Which method is used to notify the observer when the task status changes?",
                "result": "automata.tasks.task_base.Task.notify_observer"
            },
            {
                "query": "What property gives the status of a Task?",
                "result": "automata.tasks.task_base.Task.status"
            },
            {
                "query": "What method generates a deterministic session id for a Task?",
                "result": "automata.tasks.task_base.Task._deterministic_session_id"
            },
            {
                "query": "What method is used to get the output directory for a Task?",
                "result": "automata.tasks.task_base.Task._get_task_dir"
            },
            {
                "query": "What method is used to get the output directory where task logs are saved?",
                "result": "automata.tasks.task_base.Task._get_log_dir"
            },
            {
                "query": "What interface represents the task execution behaviours?",
                "result": "automata.tasks.task_base.ITaskExecution"
            },
            {
                "query": "What abstract base class provides the methods for implementing a task task_environment?",
                "result": "automata.tasks.task_base.TaskEnvironment"
            },
            {
                "query": "What method of TaskEnvironment is used to set up the task_environment?",
                "result": "automata.tasks.task_base.TaskEnvironment.setup"
            },
            {
                "query": "What method of TaskEnvironment is used to tear down the task_environment?",
                "result": "automata.tasks.task_base.TaskEnvironment.teardown"
            },
            {
                "query": "What method of TaskEnvironment is used to validate the task_environment?",
                "result": "automata.tasks.task_base.TaskEnvironment.validate"
            },
            {
                "query": "What method of TaskEnvironment is used to reset the task_environment to its initial state?",
                "result": "automata.tasks.task_base.TaskEnvironment.reset"
            },
            {
                "query": "What Enum represents the different statuses a Task can have?",
                "result": "automata.tasks.task_base.TaskStatus"
            },
            {
                "query": "What's the purpose of the class `AutomataTask`?",
                "result": "automata.tasks.automata_task.AutomataTask"
            },
            {
                "query": "How is an instance of `AutomataTask` created, and what arguments are required?",
                "result": "automata.tasks.automata_task.AutomataTask.__init__"
            },
            {
                "query": "What method of `AutomataTask` is responsible for initializing the task's logging?",
                "result": "automata.tasks.automata_task.AutomataTask.initialize_logging"
            },
            {
                "query": "How does one retrieve the task's logs?",
                "result": "automata.tasks.automata_task.AutomataTask.get_logs"
            },
            {
                "query": "What enumeration lists the environment modes for tasks?",
                "result": "automata.tasks.task_environment.EnvironmentMode"
            },
            {
                "query": "What class provides a concrete implementation of the abstract TaskEnvironment for Automata providers?",
                "result": "automata.tasks.task_environment.AutomataTaskEnvironment"
            },
            {
                "query": "How is an AutomataTaskEnvironment object constructed?",
                "result": "automata.tasks.task_environment.AutomataTaskEnvironment.__init__"
            },
            {
                "query": "How does AutomataTaskEnvironment setup a task?",
                "result": "automata.tasks.task_environment.AutomataTaskEnvironment.setup"
            },
            {
                "query": "What method decommissions the taskEnvironment in AutomataTaskEnvironment?",
                "result": "automata.tasks.task_environment.AutomataTaskEnvironment.teardown"
            },
            {
                "query": "What method does AutomataTaskEnvironment use to check if the environment of the task is correctly set up?",
                "result": "automata.tasks.task_environment.AutomataTaskEnvironment.validate"
            },
            {
                "query": "How does AutomataTaskEnvironment reset the task environment?",
                "result": "automata.tasks.task_environment.AutomataTaskEnvironment.reset"
            },
            {
                "query": "What method does AutomataTaskEnvironment use to send the results of a task to the remote repository?",
                "result": "automata.tasks.task_environment.AutomataTaskEnvironment.commit_task"
            },
            {
                "query": "What interface is responsible for executing general tasks?",
                "result": "automata.tasks.task_executor.IAutomataTaskExecution"
            },
            {
                "query": "What method does the IAutomataTaskExecution interface use to execute a task?",
                "result": "automata.tasks.task_executor.IAutomataTaskExecution.execute"
            },
            {
                "query": "What static method does the IAutomataTaskExecution interface use to build an OpenAIAutomataAgent?",
                "result": "automata.tasks.task_executor.IAutomataTaskExecution._build_agent"
            },
            {
                "query": "What class wraps the ITaskExecution behavior to execute a task?",
                "result": "automata.tasks.task_executor.AutomataTaskExecutor"
            },
            {
                "query": "How does the AutomataTaskExecutor class initialize?",
                "result": "automata.tasks.task_executor.AutomataTaskExecutor.__init__"
            },
            {
                "query": "What method of the AutomataTaskExecutor class executes a task with retry functionality?",
                "result": "automata.tasks.task_executor.AutomataTaskExecutor.execute"
            },
            {
                "query": "Which static method of the AutomataTaskExecutor class accomplishes the exponential backoff strategy?",
                "result": "automata.tasks.task_executor.AutomataTaskExecutor._exponential_backoff"
            },
            {
                "query": "Which class represents an exception for when an unknown tool type is provided?",
                "result": "automata.tools.tool_error.UnknownToolError"
            },
            {
                "query": "How is the UnknownToolError object constructed?",
                "result": "automata.tools.tool_error.UnknownToolError.__init__"
            },
            {
                "query": "What is the purpose of the AgentToolFactory class?",
                "result": "automata.tools.agent_tool_factory.AgentToolFactory"
            },
            {
                "query": "Which static method is used to create tools given the agent's toolkit?",
                "result": "automata.tools.agent_tool_factory.AgentToolFactory.create_tools_from_builder"
            },
            {
                "query": "How are tools built from specified toolkits?",
                "result": "automata.tools.agent_tool_factory.AgentToolFactory.build_tools"
            },
            {
                "query": "What interface represents the action of executing tools?",
                "result": "automata.tools.tool_executor.IToolExecution"
            },
            {
                "query": "What method in the IToolExecution interface is used to execute a function call?",
                "result": "automata.tools.tool_executor.IToolExecution.execute"
            },
            {
                "query": "What class is used for executing tools?",
                "result": "automata.tools.tool_executor.ToolExecution"
            },
            {
                "query": "How is the ToolExecution object constructed?",
                "result": "automata.tools.tool_executor.ToolExecution.__init__"
            },
            {
                "query": "What method is used to execute a function call in the ToolExecution class?",
                "result": "automata.tools.tool_executor.ToolExecution.execute"
            },
            {
                "query": "What class uses the IToolExecution behaviour to execute a tool?",
                "result": "automata.tools.tool_executor.ToolExecutor"
            },
            {
                "query": "How is the ToolExecutor object constructed?",
                "result": "automata.tools.tool_executor.ToolExecutor.__init__"
            },
            {
                "query": "What method in the ToolExecutor class is used for execution?",
                "result": "automata.tools.tool_executor.ToolExecutor.execute"
            },
            {
                "query": "What class acts as an interface for tools?",
                "result": "automata.tools.tool_base.Tool"
            },
            {
                "query": "What is the configuration class for class Tool?",
                "result": "automata.tools.tool_base.Tool.Config"
            },
            {
                "query": "What method in class Tool runs the function with the provided input?",
                "result": "automata.tools.tool_base.Tool.run"
            },
            {
                "query": "What class extends AgentToolkitBuilder to interact with the PythonIndexer API?",
                "result": "automata.tools.builders.py_reader_builder.PyReaderToolkitBuilder"
            },
            {
                "query": "How is a PyReaderToolkitBuilder object created?",
                "result": "automata.tools.builders.py_reader_builder.PyReaderToolkitBuilder.__init__"
            },
            {
                "query": "Which method of PyReaderToolkitBuilder is responsible for building associated tools?",
                "result": "automata.tools.builders.py_reader_builder.PyReaderToolkitBuilder.build"
            },
            {
                "query": "What function is associated with the tool 'py-retriever-code' in PyReaderToolkitBuilder?",
                "result": "automata.tools.builders.py_reader_builder.PyReaderToolkitBuilder._run_indexer_retrieve_code"
            },
            {
                "query": "What function is associated with the tool 'py-retriever-retrieve-docstring' in PyReaderToolkitBuilder?",
                "result": "automata.tools.builders.py_reader_builder.PyReaderToolkitBuilder._run_indexer_retrieve_docstring"
            },
            {
                "query": "What class extends PyReaderToolkitBuilder and OpenAIAgentToolkitBuilder and is registered with OpenAIAutomataAgentToolkitRegistry?",
                "result": "automata.tools.builders.py_reader_builder.PyReaderOpenAIToolkit"
            },
            {
                "query": "What method on the PyReaderOpenAIToolkit class is responsible for building OpenAI Tools?",
                "result": "automata.tools.builders.py_reader_builder.PyReaderOpenAIToolkit.build_for_open_ai"
            },
            {
                "query": "What class provides functionality to interact with the PythonWriter API that modifies python code?",
                "result": "automata.tools.builders.py_writer_builder.PyCodeWriterToolkitBuilder"
            },
            {
                "query": "How is the PyCodeWriterToolkitBuilder object constructed?",
                "result": "automata.tools.builders.py_writer_builder.PyCodeWriterToolkitBuilder.__init__"
            },
            {
                "query": "What method  builds a suite of tools for writing Python code?",
                "result": "automata.tools.builders.py_writer_builder.PyCodeWriterToolkitBuilder.build"
            },
            {
                "query": "What method is used to update an existing Python module with the given code?",
                "result": "automata.tools.builders.py_writer_builder.PyCodeWriterToolkitBuilder._update_existing_module"
            },
            {
                "query": "What method is used to create a new Python module with the given code?",
                "result": "automata.tools.builders.py_writer_builder.PyCodeWriterToolkitBuilder._create_new_module"
            },
            {
                "query": "What class extends the PyCodeWriterToolkitBuilder for usage with the OpenAI toolkit?",
                "result": "automata.tools.builders.py_writer_builder.PyCodeWriterOpenAIToolkitBuilder"
            },
            {
                "query": "What are the built tools for an OpenAI agent in PyCodeWriterOpenAIToolkitBuilder?",
                "result": "automata.tools.builders.py_writer_builder.PyCodeWriterOpenAIToolkitBuilder.build_for_open_ai"
            },
            {
                "query": "What class represents the result of a language model completion?",
                "result": "automata.llm.llm_base.LLMCompletionResult"
            },
            {
                "query": "How to get role of a language model completion result?",
                "result": "automata.llm.llm_base.LLMCompletionResult.get_role"
            },
            {
                "query": "How to get content of a language model completion result?",
                "result": "automata.llm.llm_base.LLMCompletionResult.get_content"
            },
            {
                "query": "What class represents a language model chat message?",
                "result": "automata.llm.llm_base.LLMChatMessage"
            },
            {
                "query": "How to convert LLMChatMessage object to a dictionary?",
                "result": "automata.llm.llm_base.LLMChatMessage.to_dict"
            },
            {
                "query": "What abstract base class represents the different types of language model conversations?",
                "result": "automata.llm.llm_base.LLMConversation"
            },
            {
                "query": "How can an observer be registered to a LLMConversation?",
                "result": "automata.llm.llm_base.LLMConversation.register_observer"
            },
            {
                "query": "How can an observer be unregistered from a LLMConversation?",
                "result": "automata.llm.llm_base.LLMConversation.unregister_observer"
            },
            {
                "query": "How can all observers of a LLMConversation be notified of a change in conversation?",
                "result": "automata.llm.llm_base.LLMConversation.notify_observers"
            },
            {
                "query": "What abstract base class represents the different types of database providers?",
                "result": "automata.llm.llm_base.LLMConversationDatabaseProvider"
            },
            {
                "query": "What abstract base class represents the different types of LLM chat completion providers?",
                "result": "automata.llm.llm_base.LLMChatCompletionProvider"
            },
            {
                "query": "What class represents a function call to be made by the OpenAI agent?",
                "result": "automata.llm.llm_base.FunctionCall"
            },
            {
                "query": "How can a FunctionCall be converted to a dictionary?",
                "result": "automata.llm.llm_base.FunctionCall.to_dict"
            },
            {
                "query": "How can a FunctionCall object be created from a response dictionary?",
                "result": "automata.llm.llm_base.FunctionCall.from_response_dict"
            },
            {
                "query": "How is termination message from the conversation handled in FunctionCall?",
                "result": "automata.llm.llm_base.FunctionCall.handle_termination"
            },
            {
                "query": "How can a FunctionCall object be represented as a string?",
                "result": "automata.llm.llm_base.FunctionCall.__str__"
            },
            {
                "query": "What class represents a completion result from the OpenAI API?",
                "result": "automata.llm.providers.openai_llm.OpenAIChatCompletionResult"
            },
            {
                "query": "What method is used to construct the OpenAIChatCompletionResult?",
                "result": "automata.llm.providers.openai_llm.OpenAIChatCompletionResult.__init__"
            },
            {
                "query": "What method is used to get a function call from the completion result?",
                "result": "automata.llm.providers.openai_llm.OpenAIChatCompletionResult.get_function_call"
            },
            {
                "query": "What method is used to create a completion result from the given arguments?",
                "result": "automata.llm.providers.openai_llm.OpenAIChatCompletionResult.from_args"
            },
            {
                "query": "What class represents a processed chat message TO or FROM the OpenAI LLM Chat API?",
                "result": "automata.llm.providers.openai_llm.OpenAIChatMessage"
            },
            {
                "query": "What method is used to construct the OpenAIChatMessage?",
                "result": "automata.llm.providers.openai_llm.OpenAIChatMessage.__init__"
            },
            {
                "query": "What method is used to convert the chat message to a dictionary?",
                "result": "automata.llm.providers.openai_llm.OpenAIChatMessage.to_dict"
            },
            {
                "query": "What method is used to create a chat message from a completion result?",
                "result": "automata.llm.providers.openai_llm.OpenAIChatMessage.from_completion_result"
            },
            {
                "query": "What class is used to represent a conversation with the OpenAI API?",
                "result": "automata.llm.providers.openai_llm.OpenAIConversation"
            },
            {
                "query": "What method is used to add a message to the conversation?",
                "result": "automata.llm.providers.openai_llm.OpenAIConversation.add_message"
            },
            {
                "query": "What method is used to get the messages for the next completion?",
                "result": "automata.llm.providers.openai_llm.OpenAIConversation.get_messages_for_next_completion"
            },
            {
                "query": "What method is used to get the latest message in the conversation?",
                "result": "automata.llm.providers.openai_llm.OpenAIConversation.get_latest_message"
            },
            {
                "query": "What method is used to reset the conversation?",
                "result": "automata.llm.providers.openai_llm.OpenAIConversation.reset_conversation"
            },
            {
                "query": "What class represents a function callable by the OpenAI agent?",
                "result": "automata.llm.providers.openai_llm.OpenAIFunction"
            },
            {
                "query": "What method is used to provide chat messages to the OpenAI API?",
                "result": "automata.llm.providers.openai_llm.OpenAIChatCompletionProvider"
            },
            {
                "query": "What method gets the next completion from the assistant?",
                "result": "automata.llm.providers.openai_llm.OpenAIChatCompletionProvider.get_next_assistant_completion"
            },
            {
                "query": "What method is used to reset the conversation?",
                "result": "automata.llm.providers.openai_llm.OpenAIChatCompletionProvider.reset"
            },
            {
                "query": "What method is used to return the completion message based on a given prompt?",
                "result": "automata.llm.providers.openai_llm.OpenAIChatCompletionProvider.standalone_call"
            },
            {
                "query": "What method is used to add a message to the conversation?",
                "result": "automata.llm.providers.openai_llm.OpenAIChatCompletionProvider.add_message"
            },
            {
                "query": "What class provides embeddings from the OpenAI API?",
                "result": "automata.llm.providers.openai_llm.OpenAIEmbeddingProvider"
            },
            {
                "query": "What method is used to get an embedding for a given source text?",
                "result": "automata.llm.providers.openai_llm.OpenAIEmbeddingProvider.build_embedding_vector"
            },
            {
                "query": "What method builds embeddings for a batch of source texts?",
                "result": "automata.llm.providers.openai_llm.OpenAIEmbeddingProvider.batch_build_embedding_vector"
            },
            {
                "query": "What class represents a tool used by the OpenAI agent?",
                "result": "automata.llm.providers.openai_llm.OpenAITool"
            },
            {
                "query": "What class is used for searching for symbols?",
                "result": "automata.experimental.search.symbol_search.SymbolSearch"
            },
            {
                "query": "How is the SymbolSearch object initialized?",
                "result": "automata.experimental.search.symbol_search.SymbolSearch.__init__"
            },
            {
                "query": "Which method of SymbolSearch fetches the list of the SymbolRank similar symbols ordered by rank?",
                "result": "automata.experimental.search.symbol_search.SymbolSearch.get_symbol_rank_results"
            },
            {
                "query": "Which method of SymbolSearch fetches the list of similar symbols sorted by embedding similarity?",
                "result": "automata.experimental.search.symbol_search.SymbolSearch.get_symbol_code_similarity_results"
            },
            {
                "query": "Which method of SymbolSearch finds all references to a module, class, method, or standalone function?",
                "result": "automata.experimental.search.symbol_search.SymbolSearch.symbol_references"
            },
            {
                "query": "Which method of SymbolSearch finds the raw text of a module, class, method, or standalone function?",
                "result": "automata.experimental.search.symbol_search.SymbolSearch.retrieve_source_code_by_symbol"
            },
            {
                "query": "What method is used to perform an exact search across the indexed codebase?",
                "result": "automata.experimental.search.symbol_search.SymbolSearch.exact_search"
            },
            {
                "query": "What method is used to process an NLP-formatted query and returns the results of the appropriate downstream search?",
                "result": "automata.experimental.search.symbol_search.SymbolSearch.process_query"
            },
            {
                "query": "What function is used to load JSON data from a file?",
                "result": "automata.experimental.scripts.run_update_tool_eval.load_json_data"
            },
            {
                "query": "What function is used to save data into a JSON file?",
                "result": "automata.experimental.scripts.run_update_tool_eval.save_json_data"
            },
            {
                "query": "Which function retrieves the processed paths from the data?",
                "result": "automata.experimental.scripts.run_update_tool_eval.get_processed_paths"
            },
            {
                "query": "How are entries filtered in the JSON data?",
                "result": "automata.experimental.scripts.run_update_tool_eval.filter_entries"
            },
            {
                "query": "What function obtains the missing symbols?",
                "result": "automata.experimental.scripts.run_update_tool_eval.get_missing_symbols"
            },
            {
                "query": "What function gets the extra symbols?",
                "result": "automata.experimental.scripts.run_update_tool_eval.get_extra_symbols"
            },
            {
                "query": "What function serves as the main event loop for updating tool evaluations?",
                "result": "automata.experimental.scripts.run_update_tool_eval.main"
            },
            {
                "query": "What is the purpose of the PyModuleLoader Singleton?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader"
            },
            {
                "query": "How is the PyModuleLoader Singleton initialized?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader.initialize"
            },
            {
                "query": "How can we check if a particular dotpath exists in the PyModuleLoader?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader.__contains__"
            },
            {
                "query": "How can we assure if the PyModuleLoader has been initialized?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader._assert_initialized"
            },
            {
                "query": "How to fetch all the items in the PyModuleLoader?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader.items"
            },
            {
                "query": "How to fetch the abstract syntax tree of a module given the dotpath?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader.fetch_ast_module"
            },
            {
                "query": "How to fetch the dotpath of a module given the module object?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader.fetch_existing_module_dotpath"
            },
            {
                "query": "How to fetch a module's file path given the dotpath?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader.fetch_existing_module_fpath_by_dotpath"
            },
            {
                "query": "How to fetch the dotpath of a module given its file path?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader.get_module_dotpath_by_fpath"
            },
            {
                "query": "How to insert a new module into the PyModuleLoader?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader.put_module"
            },
            {
                "query": "How to remove a module given its dotpath from PyModuleLoader?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader.delete_module"
            },
            {
                "query": "How to reset the PyModuleLoader to its initialized state?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader.reset"
            },
            {
                "query": "How to load all modules into the PyModuleLoader?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader._load_all_modules"
            },
            {
                "query": "How to load an individual module into the PyModuleLoader from a given file path?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader._load_module_from_fpath"
            },
            {
                "query": "Which abstract base class is used for managing repositories?",
                "result": "automata.singletons.github_client.RepositoryClient"
            },
            {
                "query": "Which method of the RepositoryClient class is used to clone a repository?",
                "result": "automata.singletons.github_client.RepositoryClient.clone_repository"
            },
            {
                "query": "Which method of the RepositoryClient class is used to create a new branch in the repository?",
                "result": "automata.singletons.github_client.RepositoryClient.create_branch"
            },
            {
                "query": "How can one checkout a branch in the repository using the RepositoryClient class method?",
                "result": "automata.singletons.github_client.RepositoryClient.checkout_branch"
            },
            {
                "query": "Which method of the RepositoryClient class is used for staging all changes in the repository?",
                "result": "automata.singletons.github_client.RepositoryClient.stage_all_changes"
            },
            {
                "query": "How to commit and push all changes in the repository using RepositoryClient class method?",
                "result": "automata.singletons.github_client.RepositoryClient.commit_and_push_changes"
            },
            {
                "query": "How to create a new pull request on the remote using RepositoryClient class method?",
                "result": "automata.singletons.github_client.RepositoryClient.create_pull_request"
            },
            {
                "query": "Which method of RepositoryClient class is used to merge a pull request on the remote?",
                "result": "automata.singletons.github_client.RepositoryClient.merge_pull_request"
            },
            {
                "query": "Which method checks if a branch exists on the remote in the RepositoryClient class?",
                "result": "automata.singletons.github_client.RepositoryClient.branch_exists"
            },
            {
                "query": "What is the class that provides an interface for interacting with GitHub repositories?",
                "result": "automata.singletons.github_client.GitHubClient"
            },
            {
                "query": "What is the constructor for the GitHubClient?",
                "result": "automata.singletons.github_client.GitHubClient.__init__"
            },
            {
                "query": "How to clone a repository to a local path using GitHubClient class method?",
                "result": "automata.singletons.github_client.GitHubClient.clone_repository"
            },
            {
                "query": "How to create a new branch in a repository using GitHubClient class method?",
                "result": "automata.singletons.github_client.GitHubClient.create_branch"
            },
            {
                "query": "Which method of the GitHubClient is used for checking out a branch in a repository?",
                "result": "automata.singletons.github_client.GitHubClient.checkout_branch"
            },
            {
                "query": "Which method of the GitHubClient stages all changes in the repository?",
                "result": "automata.singletons.github_client.GitHubClient.stage_all_changes"
            },
            {
                "query": "Which method of the GitHubClient class is used for committing and pushing all changes in the repository?",
                "result": "automata.singletons.github_client.GitHubClient.commit_and_push_changes"
            },
            {
                "query": "Which method of the GitHubClient class is used for creating a new pull request on GitHub?",
                "result": "automata.singletons.github_client.GitHubClient.create_pull_request"
            },
            {
                "query": "Which method of GitHubClient class is used to merge a pull request on GitHub?",
                "result": "automata.singletons.github_client.GitHubClient.merge_pull_request"
            },
            {
                "query": "Which method of the GitHubClient is used to check if a branch exists on GitHub?",
                "result": "automata.singletons.github_client.GitHubClient.branch_exists"
            },
            {
                "query": "Which method of the GitHubClient class fetches the open issues for the remote repository?",
                "result": "automata.singletons.github_client.GitHubClient.get_open_issues"
            },
            {
                "query": "Which method of the GitHubClient class fetches the open pull requests for the remote repository?",
                "result": "automata.singletons.github_client.GitHubClient.get_open_pull_requests"
            },
            {
                "query": "How to create a new issue on GitHub using GitHubClient class method?",
                "result": "automata.singletons.github_client.GitHubClient.create_issue"
            },
            {
                "query": "How to add a label to an issue on the remote repository using GitHubClient class method?",
                "result": "automata.singletons.github_client.GitHubClient.add_label"
            },
            {
                "query": "How to remove a label from an issue on the remote repository using GitHubClient?",
                "result": "automata.singletons.github_client.GitHubClient.remove_label"
            },
            {
                "query": "How to add a comment to an issue on the remote repository using GitHubClient class method?",
                "result": "automata.singletons.github_client.GitHubClient.create_issue_comment"
            },
            {
                "query": "How to remove a comment from an issue on the remote repository using GitHubClient?",
                "result": "automata.singletons.github_client.GitHubClient.remove_issue_comment"
            },
            {
                "query": "Which method fetches an issue from the remote repository in the GitHubClient class?",
                "result": "automata.singletons.github_client.GitHubClient.fetch_issue"
            },
            {
                "query": "What class is responsible for managing the storing and retrieving tasks?",
                "result": "automata.tasks.task_registry.AutomataTaskRegistry"
            },
            {
                "query": "What method is used to construct the AutomataTaskRegistry?",
                "result": "automata.tasks.task_registry.AutomataTaskRegistry.__init__"
            },
            {
                "query": "Which method adds the task to the registry?",
                "result": "automata.tasks.task_registry.AutomataTaskRegistry.register"
            },
            {
                "query": "Which method is used to update a task in the registry?",
                "result": "automata.tasks.task_registry.AutomataTaskRegistry.update_task"
            },
            {
                "query": "Which method retrieves a task by its recorded session id?",
                "result": "automata.tasks.task_registry.AutomataTaskRegistry.fetch_task_by_id"
            },
            {
                "query": "Which method gets all tasks from the registry?",
                "result": "automata.tasks.task_registry.AutomataTaskRegistry.get_all_tasks"
            },
            {
                "query": "What enumeration represents the various states a task can be in?",
                "result": "automata.tasks.task_base.TaskStatus"
            },
            {
                "query": "Which generic class is used by 'TaskExecutor'?",
                "result": "automata.tasks.task_base.Task"
            },
            {
                "query": "How is a Task object initialized?",
                "result": "automata.tasks.task_base.Task.__init__"
            },
            {
                "query": "What method is used to notify the observer when the task status changes?",
                "result": "automata.tasks.task_base.Task.notify_observer"
            },
            {
                "query": "What method is used to set the status of a Task?",
                "result": "automata.tasks.task_base.Task.status"
            },
            {
                "query": "What method is used to generate a deterministic session id for a Task?",
                "result": "automata.tasks.task_base.Task._deterministic_session_id"
            },
            {
                "query": "What method is used to get the output directory for a Task?",
                "result": "automata.tasks.task_base.Task._get_task_dir"
            },
            {
                "query": "What method is used to get the output directory where task logs are saved?",
                "result": "automata.tasks.task_base.Task._get_log_dir"
            },
            {
                "query": "What is the interface for task execution behaviors?",
                "result": "automata.tasks.task_base.ITaskExecution"
            },
            {
                "query": "What function does 'ITaskExecution' provide for executing a task?",
                "result": "automata.tasks.task_base.ITaskExecution.execute"
            },
            {
                "query": "What abstract base class is used for implementing a task environment?",
                "result": "automata.tasks.task_base.TaskEnvironment"
            },
            {
                "query": "What method does 'TaskEnvironment' provide to set up its environment?",
                "result": "automata.tasks.task_base.TaskEnvironment.setup"
            },
            {
                "query": "What method does 'TaskEnvironment' provide to tear down its environment?",
                "result": "automata.tasks.task_base.TaskEnvironment.teardown"
            },
            {
                "query": "What method does 'TaskEnvironment' provide to validate its environment?",
                "result": "automata.tasks.task_base.TaskEnvironment.validate"
            },
            {
                "query": "What method does 'TaskEnvironment' provide to reset its environment?",
                "result": "automata.tasks.task_base.TaskEnvironment.reset"
            },
            {
                "query": "What base class is used for different types of LLM completion results?",
                "result": "automata.llm.llm_base.LLMCompletionResult"
            },
            {
                "query": "What model represents different types of LLM chat messages?",
                "result": "automata.llm.llm_base.LLMChatMessage"
            },
            {
                "query": "What method is used to represent a LLM chat message as a dictionary?",
                "result": "automata.llm.llm_base.LLMChatMessage.to_dict"
            },
            {
                "query": "What is the abstract base class for different types of LLM conversations?",
                "result": "automata.llm.llm_base.LLMConversation"
            },
            {
                "query": "What is the abstract base class for different types of database providers?",
                "result": "automata.llm.llm_base.LLMConversationDatabaseProvider"
            },
            {
                "query": "What is the abstract base class for different types of LLM chat completion providers?",
                "result": "automata.llm.llm_base.LLMChatCompletionProvider"
            },
            {
                "query": "What class represents a function call to be made by the OpenAI agent?",
                "result": "automata.llm.llm_base.FunctionCall"
            },
            {
                "query": "How can a FunctionCall instance be created from a dictionary response?",
                "result": "automata.llm.llm_base.FunctionCall.from_response_dict"
            },
            {
                "query": "What class represents a completion result from the OpenAI API?",
                "result": "automata.llm.providers.openai_llm.OpenAIChatCompletionResult"
            },
            {
                "query": "What function is used to convert a completion result into an OpenAIChatMessage?",
                "result": "automata.llm.providers.openai_llm.OpenAIChatMessage.from_completion_result"
            },
            {
                "query": "Which class represents a conversation with the OpenAI API?",
                "result": "automata.llm.providers.openai_llm.OpenAIConversation"
            },
            {
                "query": "What method is used to add a message to the OpenAIConversation?",
                "result": "automata.llm.providers.openai_llm.OpenAIConversation.add_message"
            },
            {
                "query": "Which class provides chat messages from the OpenAI API?",
                "result": "automata.llm.providers.openai_llm.OpenAIChatCompletionProvider"
            },
            {
                "query": "What method in OpenAIChatCompletionProvider is used to reset the conversation?",
                "result": "automata.llm.providers.openai_llm.OpenAIChatCompletionProvider.reset"
            },
            {
                "query": "What class captures a function callable by the OpenAI agent?",
                "result": "automata.llm.providers.openai_llm.OpenAIFunction"
            },
            {
                "query": "What class is used to provide embeddings from the OpenAI API?",
                "result": "automata.llm.providers.openai_llm.OpenAIEmbeddingProvider"
            },
            {
                "query": "What method in OpenAIEmbeddingProvider is used to get an embedding for a given source text?",
                "result": "automata.llm.providers.openai_llm.OpenAIEmbeddingProvider.build_embedding_vector"
            },
            {
                "query": "What class represents a tool that can be used by the OpenAI agent?",
                "result": "automata.llm.providers.openai_llm.OpenAITool"
            },
            {
                "query": "What method in OpenAIChatMessage is used to convert the chat message to a dictionary?",
                "result": "automata.llm.providers.openai_llm.OpenAIChatMessage.to_dict"
            },
            {
                "query": "What method in OpenAIChatCompletionResult is used to get the function call from the completion result?",
                "result": "automata.llm.providers.openai_llm.OpenAIChatCompletionResult.get_function_call"
            },
            {
                "query": "What method is used to create a completion result from the given arguments?",
                "result": "automata.llm.providers.openai_llm.OpenAIChatCompletionResult.from_args"
            },
            {
                "query": "Which function initializes the automata task environment?",
                "result": "automata.core.run_handlers.initialize_automata"
            },
            {
                "query": "Which function sets up the automata task environment?",
                "result": "automata.core.run_handlers.run_setup"
            },
            {
                "query": "Which function runs an agent with given parameters?",
                "result": "automata.core.run_handlers.run_with_agent"
            },
            {
                "query": "Which function creates a task with given parameters?",
                "result": "automata.core.run_handlers.create_task"
            },
            {
                "query": "Which function runs a task with given parameters?",
                "result": "automata.core.run_handlers.run_with_task"
            },
            {
                "query": "Which function creates and runs a task with evaluation based on given parameters?",
                "result": "automata.core.run_handlers.run_with_eval"
            },
            {
                "query": "What class represents a line item in a bounding box?",
                "result": "automata.core.ast_handlers.LineItem"
            },
            {
                "query": "What class represents the bounding box of a symbol?",
                "result": "automata.core.ast_handlers.BoundingBox"
            },
            {
                "query": "How can you find the bounding box of a node in the AST?",
                "result": "automata.core.ast_handlers.fetch_bounding_box"
            },
            {
                "query": "How can you get the docstring from a specified node?",
                "result": "automata.core.ast_handlers.get_docstring_from_node"
            },
            {
                "query": "What class is responsible for removing docstrings from a class or function?",
                "result": "automata.core.ast_handlers.DocstringRemover"
            },
            {
                "query": "How to create a copy of the specified node without docstrings?",
                "result": "automata.core.ast_handlers.get_node_without_docstrings"
            },
            {
                "query": "What class is responsible for removing import statements from a node?",
                "result": "automata.core.ast_handlers.ImportRemover"
            },
            {
                "query": "How to create a copy of the specified node without import statements?",
                "result": "automata.core.ast_handlers.get_node_without_imports"
            },
            {
                "query": "How to find the imports for a specified module?",
                "result": "automata.core.ast_handlers.find_imports"
            },
            {
                "query": "How to find a module, or a function, method, or class inside a module?",
                "result": "automata.core.ast_handlers.find_syntax_tree_node"
            },
            {
                "query": "Which function sets the OpenAI API key from the environment variable?",
                "result": "automata.core.utils.set_openai_api_key"
            },
            {
                "query": "Which function retrieves the path to the root of the Automata python?",
                "result": "automata.core.utils.get_root_py_fpath"
            },
            {
                "query": "Which function retrieves the path to the root of the Automata directory?",
                "result": "automata.core.utils.get_root_fpath"
            },
            {
                "query": "Which function retrieves the path to the root of the Automata embedding data?",
                "result": "automata.core.utils.get_embedding_data_fpath"
            },
            {
                "query": "Which function retrieves the path to the root of the Automata config directory?",
                "result": "automata.core.utils.get_config_fpath"
            },
            {
                "query": "Which function loads a config file from the config directory?",
                "result": "automata.core.utils.load_config"
            },
            {
                "query": "Which function formats expected strings into the config?",
                "result": "automata.core.utils.format_text"
            },
            {
                "query": "Which function converts a kebab-case string to snake_case?",
                "result": "automata.core.utils.convert_kebab_to_snake_case"
            },
            {
                "query": "Which method returns logging configurations?",
                "result": "automata.core.utils.get_logging_config"
            },
            {
                "query": "Which function checks if a list is sorted?",
                "result": "automata.core.utils.is_sorted"
            },
            {
                "query": "Which function calculates a similarity between two strings using an embedding vector provider?",
                "result": "automata.core.utils.calculate_similarity"
            },
            {
                "query": "What class serves as the base for Automata exceptions?",
                "result": "automata.core.base.base_error.AutomataError"
            },
            {
                "query": "How is the AutomataError object constructed?",
                "result": "automata.core.base.base_error.AutomataError.__init__"
            },
            {
                "query": "What property is used to get the underlying Exception message?",
                "result": "automata.core.base.base_error.AutomataError.user_message"
            },
            {
                "query": "How is the AutomataError represented as a string?",
                "result": "automata.core.base.base_error.AutomataError.__str__"
            },
            {
                "query": "How is the AutomataError represented as a string for debugging?",
                "result": "automata.core.base.base_error.AutomataError.__repr__"
            },
            {
                "query": "What abstract base class represents different types of vector database providers?",
                "result": "automata.core.base.database.vector_database.VectorDatabaseProvider"
            },
            {
                "query": "What abstract method is used to save data in VectorDatabaseProvider?",
                "result": "automata.core.base.database.vector_database.VectorDatabaseProvider.save"
            },
            {
                "query": "What abstract method is used to load data in VectorDatabaseProvider?",
                "result": "automata.core.base.database.vector_database.VectorDatabaseProvider.load"
            },
            {
                "query": "What abstract method is used to clear all entries in VectorDatabaseProvider?",
                "result": "automata.core.base.database.vector_database.VectorDatabaseProvider.clear"
            },
            {
                "query": "What abstract method is used to get all keys stored in VectorDatabaseProvider?",
                "result": "automata.core.base.database.vector_database.VectorDatabaseProvider.get_ordered_keys"
            },
            {
                "query": "What abstract method is used to get an ordered list entries in VectorDatabaseProvider?",
                "result": "automata.core.base.database.vector_database.VectorDatabaseProvider.get_all_ordered_embeddings"
            },
            {
                "query": "What abstract method is used to add entry to VectorDatabaseProvider?",
                "result": "automata.core.base.database.vector_database.VectorDatabaseProvider.add"
            },
            {
                "query": "What method is used to add batch entries to VectorDatabaseProvider?",
                "result": "automata.core.base.database.vector_database.VectorDatabaseProvider.batch_add"
            },
            {
                "query": "What abstract method is used to update entry in VectorDatabaseProvider?",
                "result": "automata.core.base.database.vector_database.VectorDatabaseProvider.update_entry"
            },
            {
                "query": "What abstract method is used to update a list of entries in VectorDatabaseProvider?",
                "result": "automata.core.base.database.vector_database.VectorDatabaseProvider.batch_update"
            },
            {
                "query": "What abstract method is used to generate a unique hashable key from an entry of type V in VectorDatabaseProvider?",
                "result": "automata.core.base.database.vector_database.VectorDatabaseProvider.entry_to_key"
            },
            {
                "query": "What concrete class represents a vector database that uses Chroma?",
                "result": "automata.core.base.database.vector_database.ChromaVectorDatabase"
            },
            {
                "query": "What method is used to initialize ChromaVectorDatabase?",
                "result": "automata.core.base.database.vector_database.ChromaVectorDatabase.__init__"
            },
            {
                "query": "What method is used to save data in ChromaVectorDatabase?",
                "result": "automata.core.base.database.vector_database.ChromaVectorDatabase.save"
            },
            {
                "query": "What method is used to load data in ChromaVectorDatabase?",
                "result": "automata.core.base.database.vector_database.ChromaVectorDatabase.load"
            },
            {
                "query": "What method is used to clear all entries in ChromaVectorDatabase?",
                "result": "automata.core.base.database.vector_database.ChromaVectorDatabase.clear"
            },
            {
                "query": "What method is used to discard a specific entry in ChromaVectorDatabase?",
                "result": "automata.core.base.database.vector_database.ChromaVectorDatabase.discard"
            },
            {
                "query": "What method is used to discard a batch of entries in ChromaVectorDatabase?",
                "result": "automata.core.base.database.vector_database.ChromaVectorDatabase.batch_discard"
            },
            {
                "query": "What abstract base class represents different types of relational databases?",
                "result": "automata.core.base.database.relational_database.RelationalDatabase"
            },
            {
                "query": "What method is used to establish a connection to the database?",
                "result": "automata.core.base.database.relational_database.RelationalDatabase.connect"
            },
            {
                "query": "What method is used to close the connection to the database?",
                "result": "automata.core.base.database.relational_database.RelationalDatabase.close"
            },
            {
                "query": "Which method is used to create a new table in the database?",
                "result": "automata.core.base.database.relational_database.RelationalDatabase.create_table"
            },
            {
                "query": "Which method is used to insert data into a table?",
                "result": "automata.core.base.database.relational_database.RelationalDatabase.insert"
            },
            {
                "query": "Which method is used to select data from a table?",
                "result": "automata.core.base.database.relational_database.RelationalDatabase.select"
            },
            {
                "query": "Which method is used to update data in a table?",
                "result": "automata.core.base.database.relational_database.RelationalDatabase.update_entry"
            },
            {
                "query": "Which method is used to delete data from a table?",
                "result": "automata.core.base.database.relational_database.RelationalDatabase.delete"
            },
            {
                "query": "What concrete class provides a SQL database?",
                "result": "automata.core.base.database.relational_database.SQLDatabase"
            },
            {
                "query": "How does SQLDatabase connect to a SQLite database?",
                "result": "automata.core.base.database.relational_database.SQLDatabase.connect"
            },
            {
                "query": "How does SQLDatabase close a SQLite database connection?",
                "result": "automata.core.base.database.relational_database.SQLDatabase.close"
            },
            {
                "query": "How does SQLDatabase create a new table in a SQLite database?",
                "result": "automata.core.base.database.relational_database.SQLDatabase.create_table"
            },
            {
                "query": "How does SQLDatabase insert data into a table in a SQLite database?",
                "result": "automata.core.base.database.relational_database.SQLDatabase.insert"
            },
            {
                "query": "How does SQLDatabase select data from a table in a SQLite database?",
                "result": "automata.core.base.database.relational_database.SQLDatabase.select"
            },
            {
                "query": "How does SQLDatabase update data in a table in a SQLite database?",
                "result": "automata.core.base.database.relational_database.SQLDatabase.update_entry"
            },
            {
                "query": "How does SQLDatabase delete data from a table in a SQLite database?",
                "result": "automata.core.base.database.relational_database.SQLDatabase.delete"
            },
            {
                "query": "What abstract base class is used for implementing an observer?",
                "result": "automata.core.base.patterns.observer.Observer"
            },
            {
                "query": "What abstract method is used to notify an observer when the subject changes?",
                "result": "automata.core.base.patterns.observer.Observer.update"
            },
            {
                "query": "What base class represents enums for paths?",
                "result": "automata.config.config_base.PathEnum"
            },
            {
                "query": "Which class represents different categories of configuration options, corresponding to folders in '/automata/configs/'?",
                "result": "automata.config.config_base.ConfigCategory"
            },
            {
                "query": "What class represents different categories of embedding data?",
                "result": "automata.config.config_base.EmbeddingDataCategory"
            },
            {
                "query": "What class represents different versions of instruction configurations?",
                "result": "automata.config.config_base.InstructionConfigVersion"
            },
            {
                "query": "What class represents different names of agent configurations?",
                "result": "automata.config.config_base.AgentConfigName"
            },
            {
                "query": "What class represents the provider of lower level models?",
                "result": "automata.config.config_base.LLMProvider"
            },
            {
                "query": "What class represents a model's information such as cost of prompt tokens, completion tokens and maximum tokens?",
                "result": "automata.config.config_base.ModelInformation"
            },
            {
                "query": "What is the abstract base class for agent configurations?",
                "result": "automata.config.config_base.AgentConfig"
            },
            {
                "query": "Which abstract method in AgentConfig is used to set up the configuration?",
                "result": "automata.config.config_base.AgentConfig.setup"
            },
            {
                "query": "Which abstract static method in AgentConfig returns the lower level model provider?",
                "result": "automata.config.config_base.AgentConfig.get_llm_provider"
            },
            {
                "query": "Which class method in AgentConfig loads yaml config files?",
                "result": "automata.config.config_base.AgentConfig._load_automata_yaml_config"
            },
            {
                "query": "What class is designed to build agent configurations?",
                "result": "automata.config.config_base.AgentConfigBuilder"
            },
            {
                "query": "What method in AgentConfigBuilder builds and returns an Agent instance with the current configuration?",
                "result": "automata.config.config_base.AgentConfigBuilder.build"
            },
            {
                "query": "Which abstract method in AgentConfigBuilder is used to set the model for the agent?",
                "result": "automata.config.config_base.AgentConfigBuilder.with_model"
            },
            {
                "query": "Which method in AgentConfigBuilder is used to set the tools for the agent?",
                "result": "automata.config.config_base.AgentConfigBuilder.with_tools"
            },
            {
                "query": "Which class holds the configuration for the Automata OpenAI Agent?",
                "result": "automata.config.openai_config.OpenAIAutomataAgentConfig"
            },
            {
                "query": "What method is used to setup the OpenAIAutomataAgentConfig?",
                "result": "automata.config.openai_config.OpenAIAutomataAgentConfig.setup"
            },
            {
                "query": "What method is used to load the config for the agent?",
                "result": "automata.config.openai_config.OpenAIAutomataAgentConfig.load"
            },
            {
                "query": "What static method is used to get the low-level middleware provider for the agent?",
                "result": "automata.config.openai_config.OpenAIAutomataAgentConfig.get_llm_provider"
            },
            {
                "query": "What method is used to format the system template and produce the system instruction?",
                "result": "automata.config.openai_config.OpenAIAutomataAgentConfig._formatted_instruction"
            },
            {
                "query": "Which class is a builder for constructing instances of AutomataAgents?",
                "result": "automata.config.openai_config.OpenAIAutomataAgentConfigBuilder"
            },
            {
                "query": "What static method creates a new OpenAIAutomataAgentConfig?",
                "result": "automata.config.openai_config.OpenAIAutomataAgentConfigBuilder.create_config"
            },
            {
                "query": "What method sets and validates the desired model for the AutomataAgent?",
                "result": "automata.config.openai_config.OpenAIAutomataAgentConfigBuilder.with_model"
            },
            {
                "query": "What method sets the template formatter for the AutomataAgent instance and validates if it is supported?",
                "result": "automata.config.openai_config.OpenAIAutomataAgentConfigBuilder.with_system_template_formatter"
            },
            {
                "query": "What method sets the instruction version for the AutomataAgent instance and validate if it is supported?",
                "result": "automata.config.openai_config.OpenAIAutomataAgentConfigBuilder.with_instruction_version"
            },
            {
                "query": "What static method creates an AutomataAgentConfig instance from the provided arguments?",
                "result": "automata.config.openai_config.OpenAIAutomataAgentConfigBuilder.create_from_args"
            },
            {
                "query": "What enum type is used for the types of embedding normalization?",
                "result": "automata.embedding.embedding_base.EmbeddingNormType"
            },
            {
                "query": "What abstract base class provides embeddings for symbols?",
                "result": "automata.embedding.embedding_base.EmbeddingVectorProvider"
            },
            {
                "query": "Which method is used to indicate the abstract construction of embedding vector for a document?",
                "result": "automata.embedding.embedding_base.EmbeddingVectorProvider.build_embedding_vector"
            },
            {
                "query": "Which method is used to indicate the abstract batch construction of embedding vectors for documents?",
                "result": "automata.embedding.embedding_base.EmbeddingVectorProvider.batch_build_embedding_vector"
            },
            {
                "query": "What abstract base class is used for different types of embeddings?",
                "result": "automata.embedding.embedding_base.Embedding"
            },
            {
                "query": "What is the method used to convert an embedding instance into a string?",
                "result": "automata.embedding.embedding_base.Embedding.__str__"
            },
            {
                "query": "What abstract base class is used to build embeddings?",
                "result": "automata.embedding.embedding_base.EmbeddingBuilder"
            },
            {
                "query": "Which method is used to indicate the construction of embedding for a symbol?",
                "result": "automata.embedding.embedding_base.EmbeddingBuilder.build"
            },
            {
                "query": "Which method is used to indicate the batch construction of embeddings for a list of symbols?",
                "result": "automata.embedding.embedding_base.EmbeddingBuilder.batch_build"
            },
            {
                "query": "What method is used to fetch the source code for the context of a symbol?",
                "result": "automata.embedding.embedding_base.EmbeddingBuilder.fetch_embedding_source_code"
            },
            {
                "query": "What abstract base class is used to handle batch embeddings?",
                "result": "automata.embedding.embedding_base.EmbeddingHandler"
            },
            {
                "query": "Which method is used to retrieve the embeddings entries for a list of symbols?",
                "result": "automata.embedding.embedding_base.EmbeddingHandler.get_embeddings"
            },
            {
                "query": "Which method is used to retrieve all the embeddings entries in a sorted order?",
                "result": "automata.embedding.embedding_base.EmbeddingHandler.get_all_ordered_embeddings"
            },
            {
                "query": "Which method is used for processing embeddings?",
                "result": "automata.embedding.embedding_base.EmbeddingHandler.process_embedding"
            },
            {
                "query": "Which method is used to perform any remaining updates?",
                "result": "automata.embedding.embedding_base.EmbeddingHandler.flush"
            },
            {
                "query": "What class is used for calculating embedding similarity?",
                "result": "automata.embedding.embedding_base.EmbeddingSimilarityCalculator"
            },
            {
                "query": "What method is used to calculate similarity between a query and the embeddings?",
                "result": "automata.embedding.embedding_base.EmbeddingSimilarityCalculator.calculate_query_similarity_dict"
            },
            {
                "query": "How is the similarity score between the embedding and all symbols embeddings calculated?",
                "result": "automata.embedding.embedding_base.EmbeddingSimilarityCalculator._calculate_embedding_similarity"
            },
            {
                "query": "Which method is responsible for normalizing the embeddings?",
                "result": "automata.embedding.embedding_base.EmbeddingSimilarityCalculator._normalize_embeddings"
            },
            {
                "query": "Which class is responsible for registering and tracking `ISymbolProvider` instances?",
                "result": "automata.context_providers.symbol_synchronization_context.SymbolProviderRegistry"
            },
            {
                "query": "What static method in SymbolProviderRegistry is used to register a symbol provider?",
                "result": "automata.context_providers.symbol_synchronization_context.SymbolProviderRegistry.register_provider"
            },
            {
                "query": "What static method in SymbolProviderRegistry is used to synchronize all symbol providers?",
                "result": "automata.context_providers.symbol_synchronization_context.SymbolProviderRegistry.synchronize"
            },
            {
                "query": "What static method in SymbolProviderRegistry provides a list of all supported symbols?",
                "result": "automata.context_providers.symbol_synchronization_context.SymbolProviderRegistry.get_sorted_supported_symbols"
            },
            {
                "query": "What static method in SymbolProviderRegistry is used to reset the registry?",
                "result": "automata.context_providers.symbol_synchronization_context.SymbolProviderRegistry.reset"
            },
            {
                "query": "Which class serves as a context manager for synchronizing symbol providers?",
                "result": "automata.context_providers.symbol_synchronization_context.SymbolProviderSynchronizationContext"
            },
            {
                "query": "How is the SymbolProviderSynchronizationContext object constructed?",
                "result": "automata.context_providers.symbol_synchronization_context.SymbolProviderSynchronizationContext.__init__"
            },
            {
                "query": "What method in SymbolProviderSynchronizationContext is used to register a symbol provider?",
                "result": "automata.context_providers.symbol_synchronization_context.SymbolProviderSynchronizationContext.register_provider"
            },
            {
                "query": "What method in SymbolProviderSynchronizationContext is used to synchronize all symbol providers?",
                "result": "automata.context_providers.symbol_synchronization_context.SymbolProviderSynchronizationContext.synchronize"
            },
            {
                "query": "What class provides logic to convert the symbol URI into a human-readable form?",
                "result": "automata.symbol.symbol_parser._SymbolParser"
            },
            {
                "query": "Which method in the _SymbolParser class produces a pointer error?",
                "result": "automata.symbol.symbol_parser._SymbolParser.error"
            },
            {
                "query": "Which method in the _SymbolParser class returns the current character in the Symbol?",
                "result": "automata.symbol.symbol_parser._SymbolParser.current"
            },
            {
                "query": "Which method in the _SymbolParser class looks ahead to the next character in the Symbol?",
                "result": "automata.symbol.symbol_parser._SymbolParser.peek_next"
            },
            {
                "query": "Which method in the _SymbolParser class parses the list of descriptors associated with the Symbol?",
                "result": "automata.symbol.symbol_parser._SymbolParser.parse_descriptors"
            },
            {
                "query": "Which method in the _SymbolParser class parses a single descriptor in the list associated with the Symbol?",
                "result": "automata.symbol.symbol_parser._SymbolParser.parse_descriptor"
            },
            {
                "query": "Which function parses a Symbol given a Symbol URI?",
                "result": "automata.symbol.symbol_parser.parse_symbol"
            },
            {
                "query": "Which function creates a new local Symbol?",
                "result": "automata.symbol.symbol_parser.new_local_symbol"
            },
            {
                "query": "Which function checks if a name is a simple identifier?",
                "result": "automata.symbol.symbol_parser.is_simple_identifier"
            },
            {
                "query": "Which function gets the escaped name of a symbol?",
                "result": "automata.symbol.symbol_parser.get_escaped_name"
            },
            {
                "query": "What function is used to convert a symbol into its corresponding `ast.AST` object?",
                "result": "automata.symbol.symbol_utils.convert_to_ast_object"
            },
            {
                "query": "What function is used to get a list of symbols which are supported by SymbolRank?",
                "result": "automata.symbol.symbol_utils.get_rankable_symbols"
            },
            {
                "query": "Which class represents the description component of a Symbol URI?",
                "result": "automata.symbol.symbol_base.SymbolDescriptor"
            },
            {
                "query": "What method is used to convert a SymbolDescriptor back into a URI string?",
                "result": "automata.symbol.symbol_base.SymbolDescriptor.unparse"
            },
            {
                "query": "Which method provides an escaped name of a symbol?",
                "result": "automata.symbol.symbol_base.SymbolDescriptor.get_escaped_name"
            },
            {
                "query": "What method is used to convert a SCIP suffix to a Python kind?",
                "result": "automata.symbol.symbol_base.SymbolDescriptor.convert_scip_to_python_kind"
            },
            {
                "query": "Which class represents the package component of a Symbol URI?",
                "result": "automata.symbol.symbol_base.SymbolPackage"
            },
            {
                "query": "Which method aids in converting a SymbolPackage back into a URI string?",
                "result": "automata.symbol.symbol_base.SymbolPackage.unparse"
            },
            {
                "query": "What class contains the logic for a Symbol?",
                "result": "automata.symbol.symbol_base.Symbol"
            },
            {
                "query": "Which method of Symbol class is for comparing two Symbol instances or a Symbol and a string?",
                "result": "automata.symbol.symbol_base.Symbol.__eq__"
            },
            {
                "query": "What method of the Symbol class helps fetch the parent of a Symbol?",
                "result": "automata.symbol.symbol_base.Symbol.parent"
            },
            {
                "query": "Which class represents a reference to a symbol in a file?",
                "result": "automata.symbol.symbol_base.SymbolReference"
            },
            {
                "query": "Which abstract class is a base class for providing symbols?",
                "result": "automata.symbol.symbol_base.ISymbolProvider"
            },
            {
                "query": "What method in ISymbolProvider abstract class is meant to get a sorted list of supported symbols?",
                "result": "automata.symbol.symbol_base.ISymbolProvider._get_sorted_supported_symbols"
            },
            {
                "query": "What method in ISymbolProvider abstract class is for filtering symbols?",
                "result": "automata.symbol.symbol_base.ISymbolProvider.filter_symbols"
            },
            {
                "query": "What method of ISymbolProvider instigates the ISymbolProvider instance into a synchronized state?",
                "result": "automata.symbol.symbol_base.ISymbolProvider.set_synchronized"
            },
            {
                "query": "What class adds edges to the `MultiDiGraph` for relationships between `Symbol` nodes?",
                "result": "automata.symbol.graph.symbol_relationships.RelationshipProcessor"
            },
            {
                "query": "How is the RelationshipProcessor object constructed?",
                "result": "automata.symbol.graph.symbol_relationships.RelationshipProcessor.__init__"
            },
            {
                "query": "What method is used to add edges between `Symbol` nodes in the `MultiDiGraph`?",
                "result": "automata.symbol.graph.symbol_relationships.RelationshipProcessor.process"
            },
            {
                "query": "What is the abstract base class for processing edges in the `MultiDiGraph`?",
                "result": "automata.symbol.graph.symbol_graph_base.GraphProcessor"
            },
            {
                "query": "Which abstract method is used to add new edges of a specified type to the graph?",
                "result": "automata.symbol.graph.symbol_graph_base.GraphProcessor.process"
            },
            {
                "query": "Which class adds edges to the `MultiDiGraph` for references between `Symbol` nodes?",
                "result": "automata.symbol.graph.symbol_references.ReferenceProcessor"
            },
            {
                "query": "How is the ReferenceProcessor object constructed?",
                "result": "automata.symbol.graph.symbol_references.ReferenceProcessor.__init__"
            },
            {
                "query": "What method is used to add edges for references between `Symbol` nodes in the `MultiDiGraph`?",
                "result": "automata.symbol.graph.symbol_references.ReferenceProcessor.process"
            },
            {
                "query": "What static method processes symbol roles into a dictionary mapping?",
                "result": "automata.symbol.graph.symbol_references.ReferenceProcessor._process_symbol_roles"
            },
            {
                "query": "What method is used to compute the bounding box of a `Symbol` using AST?",
                "result": "automata.symbol.graph.symbol_navigator.process_symbol_bounds"
            },
            {
                "query": "What class handles the navigation within a symbol graph?",
                "result": "automata.symbol.graph.symbol_navigator.SymbolGraphNavigator"
            },
            {
                "query": "How is the SymbolGraphNavigator object constructed?",
                "result": "automata.symbol.graph.symbol_navigator.SymbolGraphNavigator.__init__"
            },
            {
                "query": "What method is used fetch the supported symbols and sort them?",
                "result": "automata.symbol.graph.symbol_navigator.SymbolGraphNavigator.get_sorted_supported_symbols"
            },
            {
                "query": "How are the dependencies of a symbol retrieved?",
                "result": "automata.symbol.graph.symbol_navigator.SymbolGraphNavigator.get_symbol_dependencies"
            },
            {
                "query": "How are the relationships of a symbol retrieved?",
                "result": "automata.symbol.graph.symbol_navigator.SymbolGraphNavigator.get_symbol_relationships"
            },
            {
                "query": "What method retrieves all references to a `Symbol` based on 'reference' label?",
                "result": "automata.symbol.graph.symbol_navigator.SymbolGraphNavigator.get_references_to_symbol"
            },
            {
                "query": "What method retrieves potential caller references of a `Symbol` based on 'callee' label?",
                "result": "automata.symbol.graph.symbol_navigator.SymbolGraphNavigator.get_potential_symbol_callers"
            },
            {
                "query": "What method retrieves potential callee references of a `Symbol` based on 'caller' label?",
                "result": "automata.symbol.graph.symbol_navigator.SymbolGraphNavigator.get_potential_symbol_callees"
            },
            {
                "query": "How can one get the file containing a particular symbol?",
                "result": "automata.symbol.graph.symbol_navigator.SymbolGraphNavigator._get_symbol_containing_file"
            },
            {
                "query": "How are symbol references in the scope of a symbol fetched?",
                "result": "automata.symbol.graph.symbol_navigator.SymbolGraphNavigator._get_symbol_references_in_scope"
            },
            {
                "query": "What method gets all references to a module in the symbol graph?",
                "result": "automata.symbol.graph.symbol_navigator.SymbolGraphNavigator._get_references_to_module"
            },
            {
                "query": "What method pre-computes and caches the bounding boxes for all symbols in the symbol graph?",
                "result": "automata.symbol.graph.symbol_navigator.SymbolGraphNavigator._pre_compute_rankable_bounding_boxes"
            },
            {
                "query": "Which class exposes various search methods for symbols?",
                "result": "automata.experimental.search.symbol_search.SymbolSearch"
            },
            {
                "query": "How is the SymbolSearch object constructed?",
                "result": "automata.experimental.search.symbol_search.SymbolSearch.__init__"
            },
            {
                "query": "What is the purpose of the `get_symbol_rank_results` method?",
                "result": "automata.experimental.search.symbol_search.SymbolSearch.get_symbol_rank_results"
            },
            {
                "query": "What method fetches the list of similar symbols sorted by embedding similarity?",
                "result": "automata.experimental.search.symbol_search.SymbolSearch.get_symbol_code_similarity_results"
            },
            {
                "query": "How can we find all references to a module, class, method, or standalone function?",
                "result": "automata.experimental.search.symbol_search.SymbolSearch.symbol_references"
            },
            {
                "query": "How can we retrieve the source code of a module, class, method, or standalone function?",
                "result": "automata.experimental.search.symbol_search.SymbolSearch.retrieve_source_code_by_symbol"
            },
            {
                "query": "What method performs an exact search across the indexed codebase?",
                "result": "automata.experimental.search.symbol_search.SymbolSearch.exact_search"
            },
            {
                "query": "What method processes an NLP-formatted query and returns the results of the appropriate downstream search?",
                "result": "automata.experimental.search.symbol_search.SymbolSearch.process_query"
            },
            {
                "query": "What private method finds exact line matches for a given pattern string in all modules?",
                "result": "automata.experimental.search.symbol_search.SymbolSearch._find_pattern_in_modules"
            },
            {
                "query": "What method calculates the z-score, shifts them to be positive, and then raises the values to the specified power?",
                "result": "automata.experimental.search.symbol_search.SymbolSearch.shifted_z_score_powered"
            },
            {
                "query": "What static method applies a function to each value in a dictionary and returns a new dictionary?",
                "result": "automata.experimental.search.symbol_search.SymbolSearch.transform_dict_values"
            },
            {
                "query": "What singleton class is used to map dotpaths to python AST modules?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader"
            },
            {
                "query": "How is the PyModuleLoader initialized?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader.initialize"
            },
            {
                "query": "How can it be checked if a dotpath exists in the PyModuleLoader?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader.__contains__"
            },
            {
                "query": "How can all the items in the PyModuleLoader be accessed?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader.items"
            },
            {
                "query": "How to fetch an AST module with a given dotpath from the PyModuleLoader?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader.fetch_ast_module"
            },
            {
                "query": "How to fetch an existing module's dotpath in the PyModuleLoader?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader.fetch_existing_module_dotpath"
            },
            {
                "query": "How to fetch an existing module's filepath given a dotpath in the PyModuleLoader?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader.fetch_existing_module_fpath_by_dotpath"
            },
            {
                "query": "How to fetch a module's dotpath given a filepath in the PyModuleLoader?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader.get_module_dotpath_by_fpath"
            },
            {
                "query": "How can a new module be added to the PyModuleLoader?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader.put_module"
            },
            {
                "query": "How can a module be removed from the PyModuleLoader?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader.delete_module"
            },
            {
                "query": "How can the PyModuleLoader be reset to its initial state?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader.reset"
            },
            {
                "query": "How are all modules loaded in the PyModuleLoader?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader._load_all_modules"
            },
            {
                "query": "How is a module loaded from a file path in the PyModuleLoader?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader._load_module_from_fpath"
            },
            {
                "query": "What static method is used to verify that the PyModuleLoader has been initialized?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader._assert_initialized"
            },
            {
                "query": "What abstract base class provides an interface for managing repositories?",
                "result": "automata.singletons.github_client.RepositoryClient"
            },
            {
                "query": "How is a repository cloned locally according to the RepositoryClient abstract class?",
                "result": "automata.singletons.github_client.RepositoryClient.clone_repository"
            },
            {
                "query": "How is a branch created within the RepositoryClient abstract class?",
                "result": "automata.singletons.github_client.RepositoryClient.create_branch"
            },
            {
                "query": "How is a branch checked out within the RepositoryClient abstract class?",
                "result": "automata.singletons.github_client.RepositoryClient.checkout_branch"
            },
            {
                "query": "How are all changes staged in the RepositoryClient abstract class?",
                "result": "automata.singletons.github_client.RepositoryClient.stage_all_changes"
            },
            {
                "query": "How are changes committed and pushed in the RepositoryClient abstract class?",
                "result": "automata.singletons.github_client.RepositoryClient.commit_and_push_changes"
            },
            {
                "query": "Which class provides an interface for interacting with GitHub repositories?",
                "result": "automata.singletons.github_client.GitHubClient"
            },
            {
                "query": "How is a pull request created on GitHub?",
                "result": "automata.singletons.github_client.GitHubClient.create_pull_request"
            },
            {
                "query": "How is a pull request merged on GitHub?",
                "result": "automata.singletons.github_client.GitHubClient.merge_pull_request"
            },
            {
                "query": "How can an existence of a branch on GitHub be checked?",
                "result": "automata.singletons.github_client.GitHubClient.branch_exists"
            },
            {
                "query": "How to get all the open issues for the remote repository on GitHub?",
                "result": "automata.singletons.github_client.GitHubClient.get_open_issues"
            },
            {
                "query": "How to get all the open pull requests for the remote repository on GitHub?",
                "result": "automata.singletons.github_client.GitHubClient.get_open_pull_requests"
            },
            {
                "query": "How to create a new issue on GitHub?",
                "result": "automata.singletons.github_client.GitHubClient.create_issue"
            },
            {
                "query": "How to remove a label from an issue on GitHub?",
                "result": "automata.singletons.github_client.GitHubClient.remove_label"
            },
            {
                "query": "How to add a label to an issue on GitHub?",
                "result": "automata.singletons.github_client.GitHubClient.add_label"
            },
            {
                "query": "How to create a comment on an issue on GitHub?",
                "result": "automata.singletons.github_client.GitHubClient.create_issue_comment"
            },
            {
                "query": "How to remove a comment from an issue on GitHub?",
                "result": "automata.singletons.github_client.GitHubClient.remove_issue_comment"
            },
            {
                "query": "How to fetch an issue from GitHub?",
                "result": "automata.singletons.github_client.GitHubClient.fetch_issue"
            },
            {
                "query": "What enum represents the status of a task?",
                "result": "automata.tasks.task_base.TaskStatus"
            },
            {
                "query": "What class represents a generic task object used by the `TaskExecutor`?",
                "result": "automata.tasks.task_base.Task"
            },
            {
                "query": "How is a Task object initialized?",
                "result": "automata.tasks.task_base.Task.__init__"
            },
            {
                "query": "How is a Task object represented as a string?",
                "result": "automata.tasks.task_base.Task.__str__"
            },
            {
                "query": "What method is used to notify the observer when the task status changes?",
                "result": "automata.tasks.task_base.Task.notify_observer"
            },
            {
                "query": "How do you get the status of a Task?",
                "result": "automata.tasks.task_base.Task.status"
            },
            {
                "query": "What method is used to generate a deterministic session id for a Task?",
                "result": "automata.tasks.task_base.Task._deterministic_session_id"
            },
            {
                "query": "What method is used to get the output directory for a Task?",
                "result": "automata.tasks.task_base.Task._get_task_dir"
            },
            {
                "query": "What method is used to get the output directory where a Task's logs are saved?",
                "result": "automata.tasks.task_base.Task._get_log_dir"
            },
            {
                "query": "What interface defines task execution behaviors?",
                "result": "automata.tasks.task_base.ITaskExecution"
            },
            {
                "query": "What abstract base class is used for implementing a task task_environment?",
                "result": "automata.tasks.task_base.TaskEnvironment"
            },
            {
                "query": "What method in TaskEnvironment is used to set up the task_environment?",
                "result": "automata.tasks.task_base.TaskEnvironment.setup"
            },
            {
                "query": "What method in TaskEnvironment is used to tear down the task_environment?",
                "result": "automata.tasks.task_base.TaskEnvironment.teardown"
            },
            {
                "query": "What method in TaskEnvironment is used to validate the task_environment?",
                "result": "automata.tasks.task_base.TaskEnvironment.validate"
            },
            {
                "query": "What method in TaskEnvironment is used to reset the task_environment to its initial state?",
                "result": "automata.tasks.task_base.TaskEnvironment.reset"
            },
            {
                "query": "What base class represents different types of LLM completion results?",
                "result": "automata.llm.llm_base.LLMCompletionResult"
            },
            {
                "query": "How to get the role of the completion result?",
                "result": "automata.llm.llm_base.LLMCompletionResult.get_role"
            },
            {
                "query": "How to get the content of the completion result?",
                "result": "automata.llm.llm_base.LLMCompletionResult.get_content"
            },
            {
                "query": "What base class represents different types of LLM chat messages?",
                "result": "automata.llm.llm_base.LLMChatMessage"
            },
            {
                "query": "How to convert an LLM chat message into a dictionary?",
                "result": "automata.llm.llm_base.LLMChatMessage.to_dict"
            },
            {
                "query": "What abstract base class represents different types of LLM conversations?",
                "result": "automata.llm.llm_base.LLMConversation"
            },
            {
                "query": "What exception is raised when the conversation is empty?",
                "result": "automata.llm.llm_base.LLMConversation.LLMEmptyConversationError"
            },
            {
                "query": "What abstract property gets the messages of a conversation?",
                "result": "automata.llm.llm_base.LLMConversation.messages"
            },
            {
                "query": "What method is used to notify observers when the conversation changes?",
                "result": "automata.llm.llm_base.LLMConversation.notify_observers"
            },
            {
                "query": "What observer method is used to update the database when the conversation changes?",
                "result": "automata.llm.llm_base.LLMConversationDatabaseProvider.update"
            },
            {
                "query": "What abstract base class represents different types of LLM chat completion providers?",
                "result": "automata.llm.llm_base.LLMChatCompletionProvider"
            },
            {
                "query": "What abstract method gets the next assistant completion from the LLM?",
                "result": "automata.llm.llm_base.LLMChatCompletionProvider.get_next_assistant_completion"
            },
            {
                "query": "What class represents a function call to be made by the OpenAI agent?",
                "result": "automata.llm.llm_base.FunctionCall"
            },
            {
                "query": "What method is used to convert the function call to a dictionary?",
                "result": "automata.llm.llm_base.FunctionCall.to_dict"
            },
            {
                "query": "What method is used to create a FunctionCall from a response dictionary?",
                "result": "automata.llm.llm_base.FunctionCall.from_response_dict"
            },
            {
                "query": "What method handles the termination message from the conversation?",
                "result": "automata.llm.llm_base.FunctionCall.handle_termination"
            },
            {
                "query": "What method converts the function call to a string?",
                "result": "automata.llm.llm_base.FunctionCall.__str__"
            },
            {
                "query": "What class is used to represent a line item in a bounding box?",
                "result": "automata.core.ast_handlers.LineItem"
            },
            {
                "query": "What class is used to represent the bounding box of a symbol?",
                "result": "automata.core.ast_handlers.BoundingBox"
            },
            {
                "query": "What function finds the bounding box of a node in the AST?",
                "result": "automata.core.ast_handlers.fetch_bounding_box"
            },
            {
                "query": "What function retrieves the docstring from an AST node?",
                "result": "automata.core.ast_handlers.get_docstring_from_node"
            },
            {
                "query": "What class is used to remove docstrings from an AST node?",
                "result": "automata.core.ast_handlers.DocstringRemover"
            },
            {
                "query": "What function creates a copy of an AST node, but without docstrings?",
                "result": "automata.core.ast_handlers.get_node_without_docstrings"
            },
            {
                "query": "What class is used to remove import statements from an AST node?",
                "result": "automata.core.ast_handlers.ImportRemover"
            },
            {
                "query": "What function creates a copy of an AST node, but without import statements?",
                "result": "automata.core.ast_handlers.get_node_without_imports"
            },
            {
                "query": "What function identifies the import nodes in a specified AST module?",
                "result": "automata.core.ast_handlers.find_imports"
            },
            {
                "query": "What function searches for a specific node within an AST module, function, or class?",
                "result": "automata.core.ast_handlers.find_syntax_tree_node"
            },
            {
                "query": "What function is used to set OpenAI API key?",
                "result": "automata.core.utils.set_openai_api_key"
            },
            {
                "query": "How do you get the path to the root of the Automata python code directory?",
                "result": "automata.core.utils.get_root_py_fpath"
            },
            {
                "query": "Which function returns the path to the root of the Automata directory?",
                "result": "automata.core.utils.get_root_fpath"
            },
            {
                "query": "What method gets the path to the root of the Automata config directory?",
                "result": "automata.core.utils.get_config_fpath"
            },
            {
                "query": "What function is used to load configuration files?",
                "result": "automata.core.utils.load_config"
            },
            {
                "query": "Which function is used to format strings into the config?",
                "result": "automata.core.utils.format_text"
            },
            {
                "query": "What function is used to convert kebab-case string to snake_case?",
                "result": "automata.core.utils.convert_kebab_to_snake_case"
            },
            {
                "query": "Which function provides logging configuration?",
                "result": "automata.core.utils.get_logging_config"
            },
            {
                "query": "What utility checks if a list is sorted?",
                "result": "automata.core.utils.is_sorted"
            },
            {
                "query": "What function calculates the similarity between two strings?",
                "result": "automata.core.utils.calculate_similarity"
            },
            {
                "query": "How to determine the path to the Automata embedding data directory?",
                "result": "automata.core.utils.get_embedding_data_fpath"
            },
            {
                "query": "What is the abstract base class for vector database providers?",
                "result": "automata.core.base.database.vector_database.VectorDatabaseProvider"
            },
            {
                "query": "What method is used to save data in the VectorDatabaseProvider?",
                "result": "automata.core.base.database.vector_database.VectorDatabaseProvider.save"
            },
            {
                "query": "What method is used to load data in the VectorDatabaseProvider?",
                "result": "automata.core.base.database.vector_database.VectorDatabaseProvider.load"
            },
            {
                "query": "What method is used to clear all entries in the VectorDatabaseProvider?",
                "result": "automata.core.base.database.vector_database.VectorDatabaseProvider.clear"
            },
            {
                "query": "What method gets all keys stored in the VectorDatabaseProvider?",
                "result": "automata.core.base.database.vector_database.VectorDatabaseProvider.get_ordered_keys"
            },
            {
                "query": "What method gets all entries in the VectorDatabaseProvider?",
                "result": "automata.core.base.database.vector_database.VectorDatabaseProvider.get_all_ordered_embeddings"
            },
            {
                "query": "What method converts an entry to a unique key in the VectorDatabaseProvider?",
                "result": "automata.core.base.database.vector_database.VectorDatabaseProvider.entry_to_key"
            },
            {
                "query": "What method checks for the presence of a specific entry in the VectorDatabaseProvider?",
                "result": "automata.core.base.database.vector_database.VectorDatabaseProvider.contains"
            },
            {
                "query": "What function retrieves a specific entry from the VectorDatabaseProvider?",
                "result": "automata.core.base.database.vector_database.VectorDatabaseProvider.get"
            },
            {
                "query": "What function discards a specific entry from the VectorDatabaseProvider?",
                "result": "automata.core.base.database.vector_database.VectorDatabaseProvider.discard"
            },
            {
                "query": "What concrete class provides a vector database that saves into a JSON file?",
                "result": "automata.core.base.database.vector_database.JSONVectorDatabase"
            },
            {
                "query": "What function saves the JSONVectorDatabase to a JSON file?",
                "result": "automata.core.base.database.vector_database.JSONVectorDatabase.save"
            },
            {
                "query": "What function loads the JSONVectorDatabase from a JSON file?",
                "result": "automata.core.base.database.vector_database.JSONVectorDatabase.load"
            },
            {
                "query": "What concrete class provides a vector database that uses Chroma?",
                "result": "automata.core.base.database.vector_database.ChromaVectorDatabase"
            },
            {
                "query": "What method deletes specific entries from the ChromaVectorDatabase?",
                "result": "automata.core.base.database.vector_database.ChromaVectorDatabase.discard"
            },
            {
                "query": "Which base class is used to represent paths?",
                "result": "automata.config.config_base.PathEnum"
            },
            {
                "query": "Which class represents the different categories of embedding data configuration options?",
                "result": "automata.config.config_base.EmbeddingDataCategory"
            },
            {
                "query": "Which class represents the different categories of configuration options?",
                "result": "automata.config.config_base.ConfigCategory"
            },
            {
                "query": "Which class contains the enum of instruction versions?",
                "result": "automata.config.config_base.InstructionConfigVersion"
            },
            {
                "query": "Which class contains the enum of agent config names?",
                "result": "automata.config.config_base.AgentConfigName"
            },
            {
                "query": "Which class represents the LLM Provider?",
                "result": "automata.config.config_base.LLMProvider"
            },
            {
                "query": "Which class is used tore present the model information?",
                "result": "automata.config.config_base.ModelInformation"
            },
            {
                "query": "Which abstract base class is used to represent an agent's configuration?",
                "result": "automata.config.config_base.AgentConfig"
            },
            {
                "query": "Which method sets up the agent's configuration?",
                "result": "automata.config.config_base.AgentConfig.setup"
            },
            {
                "query": "Which method loads the config for the agent?",
                "result": "automata.config.config_base.AgentConfig.load"
            },
            {
                "query": "Which method retrieves the language model provider for the agent?",
                "result": "automata.config.config_base.AgentConfig.get_llm_provider"
            },
            {
                "query": "Which method loads and parses an Automata YAML configuration?",
                "result": "automata.config.config_base.AgentConfig._load_automata_yaml_config"
            },
            {
                "query": "Which class is used to build an agent's configuration?",
                "result": "automata.config.config_base.AgentConfigBuilder"
            },
            {
                "query": "Which method returns an agent's configuration on completion of the building process?",
                "result": "automata.config.config_base.AgentConfigBuilder.build"
            },
            {
                "query": "Which method creates the specific configuration object?",
                "result": "automata.config.config_base.AgentConfigBuilder.create_config"
            },
            {
                "query": "Which method sets the model of the agent's configuration?",
                "result": "automata.config.config_base.AgentConfigBuilder.with_model"
            },
            {
                "query": "Which method sets the tools of the agent's configuration?",
                "result": "automata.config.config_base.AgentConfigBuilder.with_tools"
            },
            {
                "query": "Which method sets the stream setting for the agent's configuration?",
                "result": "automata.config.config_base.AgentConfigBuilder.with_stream"
            },
            {
                "query": "Which method sets the verbosity of the agent's configuration?",
                "result": "automata.config.config_base.AgentConfigBuilder.with_verbose"
            },
            {
                "query": "Which method sets the number of max iterations for the agent's configuration?",
                "result": "automata.config.config_base.AgentConfigBuilder.with_max_iterations"
            },
            {
                "query": "Which method sets the max tokens for the agent's configuration?",
                "result": "automata.config.config_base.AgentConfigBuilder.with_max_tokens"
            },
            {
                "query": "Which method sets the temperature setting for the agent's configuration?",
                "result": "automata.config.config_base.AgentConfigBuilder.with_temperature"
            },
            {
                "query": "Which method sets the session id for the agent's configuration?",
                "result": "automata.config.config_base.AgentConfigBuilder.with_session_id"
            },
            {
                "query": "Which method is used to create an AgentConfigBuilder instance using an existing configuration object?",
                "result": "automata.config.config_base.AgentConfigBuilder.from_config"
            },
            {
                "query": "Which method creates an AgentConfigBuilder instance using a provided configuration object name?",
                "result": "automata.config.config_base.AgentConfigBuilder.from_name"
            },
            {
                "query": "Which enum determines the type to normalize the embeddings?",
                "result": "automata.embedding.embedding_base.EmbeddingNormType"
            },
            {
                "query": "What abstract class provides embedding for symbols?",
                "result": "automata.embedding.embedding_base.EmbeddingVectorProvider"
            },
            {
                "query": "What abstract class represents different types of embeddings?",
                "result": "automata.embedding.embedding_base.Embedding"
            },
            {
                "query": "What abstract class builds embeddings?",
                "result": "automata.embedding.embedding_base.EmbeddingBuilder"
            },
            {
                "query": "What abstract class handles batch embeddings?",
                "result": "automata.embedding.embedding_base.EmbeddingHandler"
            },
            {
                "query": "What class calculates the similarity between embeddings?",
                "result": "automata.embedding.embedding_base.EmbeddingSimilarityCalculator"
            },
            {
                "query": "Which class is used for registering and tracking `ISymbolProvider` instances?",
                "result": "automata.context_providers.symbol_synchronization_context.SymbolProviderRegistry"
            },
            {
                "query": "Which method of SymbolProviderRegistry is used to register a symbol provider?",
                "result": "automata.context_providers.symbol_synchronization_context.SymbolProviderRegistry.register_provider"
            },
            {
                "query": "Which method of SymbolProviderRegistry is used for synchronizing all symbol providers?",
                "result": "automata.context_providers.symbol_synchronization_context.SymbolProviderRegistry.synchronize"
            },
            {
                "query": "Which method of SymbolProviderRegistry is used to get a list of all supported symbols?",
                "result": "automata.context_providers.symbol_synchronization_context.SymbolProviderRegistry.get_sorted_supported_symbols"
            },
            {
                "query": "Which method of SymbolProviderRegistry is used to reset the registry?",
                "result": "automata.context_providers.symbol_synchronization_context.SymbolProviderRegistry.reset"
            },
            {
                "query": "Which class is used as a context manager for synchronizing symbol providers?",
                "result": "automata.context_providers.symbol_synchronization_context.SymbolProviderSynchronizationContext"
            },
            {
                "query": "Which method of SymbolProviderSynchronizationContext is used to register a symbol provider?",
                "result": "automata.context_providers.symbol_synchronization_context.SymbolProviderSynchronizationContext.register_provider"
            },
            {
                "query": "Which method of SymbolProviderSynchronizationContext is used to synchronize all symbol providers?",
                "result": "automata.context_providers.symbol_synchronization_context.SymbolProviderSynchronizationContext.synchronize"
            },
            {
                "query": "Which private class provides logic to convert the symbol URI into a human-readable form?",
                "result": "automata.symbol.symbol_parser._SymbolParser"
            },
            {
                "query": "How is an instance of the _SymbolParser class constructed?",
                "result": "automata.symbol.symbol_parser._SymbolParser.__init__"
            },
            {
                "query": "What method in _SymbolParser produces a ValueError with the current symbol and a caret pointing to the current index?",
                "result": "automata.symbol.symbol_parser._SymbolParser.error"
            },
            {
                "query": "What method in _SymbolParser is used to return the current character in the `Symbol`?",
                "result": "automata.symbol.symbol_parser._SymbolParser.current"
            },
            {
                "query": "What method in _SymbolParser looks ahead to the next character in the `Symbol`?",
                "result": "automata.symbol.symbol_parser._SymbolParser.peek_next"
            },
            {
                "query": "What method in _SymbolParser is used to parse the list of `Descriptor`s associated with the `Symbol`?",
                "result": "automata.symbol.symbol_parser._SymbolParser.parse_descriptors"
            },
            {
                "query": "What method in _SymbolParser is used to parse a single `Descriptor` in the list associated with the `Symbol`?",
                "result": "automata.symbol.symbol_parser._SymbolParser.parse_descriptor"
            },
            {
                "query": "What method in _SymbolParser is used to accept an identifier from the `Symbol`?",
                "result": "automata.symbol.symbol_parser._SymbolParser.accept_identifier"
            },
            {
                "query": "What method in _SymbolParser is used to accept an identifier from the `Symbol`, where the identifier is escaped by spaces?",
                "result": "automata.symbol.symbol_parser._SymbolParser.accept_space_escaped_identifier"
            },
            {
                "query": "What method in _SymbolParser is used to accept an identifier from the `Symbol`, where the identifier is escaped by backticks?",
                "result": "automata.symbol.symbol_parser._SymbolParser.accept_backtick_escaped_identifier"
            },
            {
                "query": "What method in _SymbolParser is used to accept a character from the `Symbol`?",
                "result": "automata.symbol.symbol_parser._SymbolParser.accept_character"
            },
            {
                "query": "What method in _SymbolParser checks if a character is a valid identifier character?",
                "result": "automata.symbol.symbol_parser._SymbolParser.is_identifier_character"
            },
            {
                "query": "What function is used to parse a `Symbol` given a `Symbol` URI?",
                "result": "automata.symbol.symbol_parser.parse_symbol"
            },
            {
                "query": "What function is used to create a new local `Symbol`?",
                "result": "automata.symbol.symbol_parser.new_local_symbol"
            },
            {
                "query": "What function provides a method to get an escaped name?",
                "result": "automata.symbol.symbol_parser.get_escaped_name"
            },
            {
                "query": "What function is used to check if a name is a simple identifier, i.e. it doesn't need to be escaped?",
                "result": "automata.symbol.symbol_parser.is_simple_identifier"
            },
            {
                "query": "What class represents the description component of a Symbol URI?",
                "result": "automata.symbol.symbol_base.SymbolDescriptor"
            },
            {
                "query": "What method is used to convert the descriptor back into a URI string?",
                "result": "automata.symbol.symbol_base.SymbolDescriptor.unparse"
            },
            {
                "query": "What static method is used to get the escaped name of the symbol?",
                "result": "automata.symbol.symbol_base.SymbolDescriptor.get_escaped_name"
            },
            {
                "query": "What static method is used to convert a SCIP suffix to a python kind?",
                "result": "automata.symbol.symbol_base.SymbolDescriptor.convert_scip_to_python_kind"
            },
            {
                "query": "What class represents the package component of a Symbol URI?",
                "result": "automata.symbol.symbol_base.SymbolPackage"
            },
            {
                "query": "How is the SymbolPackage represented as a string for URI?",
                "result": "automata.symbol.symbol_base.SymbolPackage.unparse"
            },
            {
                "query": "What class contains associated logic for a Symbol?",
                "result": "automata.symbol.symbol_base.Symbol"
            },
            {
                "query": "What property is used to find the kind of the python symbol?",
                "result": "automata.symbol.symbol_base.Symbol.py_kind"
            },
            {
                "query": "What property is used to indicate if the symbol is local?",
                "result": "automata.symbol.symbol_base.Symbol.is_local"
            },
            {
                "query": "What class method is used to create a Symbol instance from a string?",
                "result": "automata.symbol.symbol_base.Symbol.from_string"
            },
            {
                "query": "What class represents a reference to a symbol in a file?",
                "result": "automata.symbol.symbol_base.SymbolReference"
            },
            {
                "query": "What abstract class provides a protocol for symbols?",
                "result": "automata.symbol.symbol_base.ISymbolProvider"
            },
            {
                "query": "What abstract method provides a sorted list of supported symbols?",
                "result": "automata.symbol.symbol_base.ISymbolProvider._get_sorted_supported_symbols"
            },
            {
                "query": "What abstract method filters the sorted list of supported symbols?",
                "result": "automata.symbol.symbol_base.ISymbolProvider.filter_symbols"
            },
            {
                "query": "What class represents a graph of symbols and their relationships in a codebase?",
                "result": "automata.symbol.graph.symbol_graph.SymbolGraph"
            },
            {
                "query": "What method is used to initialize SymbolGraph?",
                "result": "automata.symbol.graph.symbol_graph.SymbolGraph.__init__"
            },
            {
                "query": "How do we get dependencies of a symbol in SymbolGraph?",
                "result": "automata.symbol.graph.symbol_graph.SymbolGraph.get_symbol_dependencies"
            },
            {
                "query": "How do we get relationships of a symbol in SymbolGraph?",
                "result": "automata.symbol.graph.symbol_graph.SymbolGraph.get_symbol_relationships"
            },
            {
                "query": "How do we get callers of a symbol in SymbolGraph?",
                "result": "automata.symbol.graph.symbol_graph.SymbolGraph.get_potential_symbol_callers"
            },
            {
                "query": "How do we get callees of a symbol in SymbolGraph?",
                "result": "automata.symbol.graph.symbol_graph.SymbolGraph.get_potential_symbol_callees"
            },
            {
                "query": "How do we get references to a symbol in SymbolGraph?",
                "result": "automata.symbol.graph.symbol_graph.SymbolGraph.get_references_to_symbol"
            },
            {
                "query": "How do we get the default rankable subgraph of a SymbolGraph?",
                "result": "automata.symbol.graph.symbol_graph.SymbolGraph.default_rankable_subgraph"
            },
            {
                "query": "How do we build a subgraph of the original SymbolGraph which contains only rankable symbols?",
                "result": "automata.symbol.graph.symbol_graph.SymbolGraph._build_rankable_subgraph"
            },
            {
                "query": "How do we filter symbols in SymbolGraph?",
                "result": "automata.symbol.graph.symbol_graph.SymbolGraph.filter_symbols"
            },
            {
                "query": "How is the index protobuf loaded from a provided path in SymbolGraph?",
                "result": "automata.symbol.graph.symbol_graph.SymbolGraph._load_index_protobuf"
            },
            {
                "query": "How can a SymbolGraph instance be created from a graph?",
                "result": "automata.symbol.graph.symbol_graph.SymbolGraph.from_graph"
            },
            {
                "query": "What class builds a `SymbolGraph` from a corresponding Index?",
                "result": "automata.symbol.graph.graph_builder.GraphBuilder"
            },
            {
                "query": "What function constructs the GraphBuilder?",
                "result": "automata.symbol.graph.graph_builder.GraphBuilder.__init__"
            },
            {
                "query": "How is the graph built in the GraphBuilder class?",
                "result": "automata.symbol.graph.graph_builder.GraphBuilder.build_graph"
            },
            {
                "query": "What private method is used to add `Symbol` nodes to the `SymbolGraph`?",
                "result": "automata.symbol.graph.graph_builder.GraphBuilder._add_symbol_vertices"
            },
            {
                "query": "What private method is used to process relationships between `Symbol` nodes?",
                "result": "automata.symbol.graph.graph_builder.GraphBuilder._process_relationships"
            },
            {
                "query": "What private method is used to process references between `Symbol` nodes?",
                "result": "automata.symbol.graph.graph_builder.GraphBuilder._process_references"
            },
            {
                "query": "What private method is used to process the caller-callee relationships between `Symbol` nodes?",
                "result": "automata.symbol.graph.graph_builder.GraphBuilder._process_caller_callee_relationships"
            },
            {
                "query": "What GraphProcessor subclass is provided for working with caller-callee relationships?",
                "result": "automata.symbol.graph.symbol_caller_callees.CallerCalleeProcessor"
            },
            {
                "query": "How is the CallerCalleeProcessor object constructed?",
                "result": "automata.symbol.graph.symbol_caller_callees.CallerCalleeProcessor.__init__"
            },
            {
                "query": "What method is used in CallerCalleeProcessor to populate the graph with caller-callee relationships?",
                "result": "automata.symbol.graph.symbol_caller_callees.CallerCalleeProcessor.process"
            },
            {
                "query": "Which class is used for navigating the graph in CallerCalleeProcessor?",
                "result": "automata.symbol.graph.symbol_navigator.SymbolGraphNavigator"
            },
            {
                "query": "Which function is used for parsing symbols in CallerCalleeProcessor?",
                "result": "automata.symbol.symbol_parser.parse_symbol"
            },
            {
                "query": "Which class is used for defining symbols in CallerCalleeProcessor?",
                "result": "automata.symbol.symbol_base.SymbolDescriptor"
            },
            {
                "query": "What enumeration does the module define?",
                "result": "automata.symbol.graph.symbol_graph_types.SymbolGraphType"
            },
            {
                "query": "What class is raised when the agent exceeds the maximum iteration limit?",
                "result": "automata.agent.error.AgentMaxIterError"
            },
            {
                "query": "What class is raised when the agent iteration process terminates?",
                "result": "automata.agent.error.AgentStopIteration"
            },
            {
                "query": "What class is raised when the agent fails to produce a result?",
                "result": "automata.agent.error.AgentResultError"
            },
            {
                "query": "What class is raised when there is a general error with the agent?",
                "result": "automata.agent.error.AgentGeneralError"
            },
            {
                "query": "What class is raised when the agent fails to set the database provider?",
                "result": "automata.agent.error.AgentDatabaseError"
            },
            {
                "query": "Which class is a concrete implementation of Agent designed to execute instructions and report the results back to the main system, interacting with the OpenAI API?",
                "result": "automata.agent.openai_agent.OpenAIAutomataAgent"
            },
            {
                "query": "What method is used to construct the OpenAIAutomataAgent?",
                "result": "automata.agent.openai_agent.OpenAIAutomataAgent.__init__"
            },
            {
                "query": "How is the OpenAIAutomataAgent represented as a string for debugging?",
                "result": "automata.agent.openai_agent.OpenAIAutomataAgent.__repr__"
            },
            {
                "query": "Which method of OpenAIAutomataAgent is used to execute a single iteration of the task and return the lastest assistant and user messages?",
                "result": "automata.agent.openai_agent.OpenAIAutomataAgent.__next__"
            },
            {
                "query": "Which property of OpenAIAutomataAgent returns the conversation associated with the agent?",
                "result": "automata.agent.openai_agent.OpenAIAutomataAgent.conversation"
            },
            {
                "query": "Which property of OpenAIAutomataAgent returns the agent responses associated with the agent?",
                "result": "automata.agent.openai_agent.OpenAIAutomataAgent.agent_responses"
            },
            {
                "query": "Which property of OpenAIAutomataAgent returns the tools associated with the agent?",
                "result": "automata.agent.openai_agent.OpenAIAutomataAgent.tools"
            },
            {
                "query": "Which property of OpenAIAutomataAgent returns the functions associated with the agent?",
                "result": "automata.agent.openai_agent.OpenAIAutomataAgent.functions"
            },
            {
                "query": "Which method of OpenAIAutomataAgent is used to run the agent and iterate through the tasks until a result is produced or the max iterations are exceeded?",
                "result": "automata.agent.openai_agent.OpenAIAutomataAgent.run"
            },
            {
                "query": "Which method of OpenAIAutomataAgent is used to get the result of the agent?",
                "result": "automata.agent.openai_agent.OpenAIAutomataAgent.get_result"
            },
            {
                "query": "Which method of OpenAIAutomataAgent is used to set the database provider for the agent?",
                "result": "automata.agent.openai_agent.OpenAIAutomataAgent.set_database_provider"
            },
            {
                "query": "Which private method of OpenAIAutomataAgent is used to setup the agent by initializing the conversation and chat provider?",
                "result": "automata.agent.openai_agent.OpenAIAutomataAgent._setup"
            },
            {
                "query": "Which class is an abstract base class for building OpenAI agent tools?",
                "result": "automata.agent.openai_agent.OpenAIAgentToolkitBuilder"
            },
            {
                "query": "Which method of OpenAIAgentToolkitBuilder is used to build an OpenAITool to be used by the associated agent?",
                "result": "automata.agent.openai_agent.OpenAIAgentToolkitBuilder.build_for_open_ai"
            },
            {
                "query": "Which class method of OpenAIAgentToolkitBuilder is used to check if the ToolkitBuilder matches the expected tool_manager type?",
                "result": "automata.agent.openai_agent.OpenAIAgentToolkitBuilder.can_handle"
            },
            {
                "query": "Which class is an abstract base class for creating agents?",
                "result": "automata.agent.agent.Agent"
            },
            {
                "query": "What does the constructor of the Agent class do?",
                "result": "automata.agent.agent.Agent.__init__"
            },
            {
                "query": "Which abstract method is used to iterate over an Agent?",
                "result": "automata.agent.agent.Agent.__iter__"
            },
            {
                "query": "Which abstract method is used to perform a single step of the Agent's task?",
                "result": "automata.agent.agent.Agent.__next__"
            },
            {
                "query": "What abstract property is used to get the conversation associated with the Agent?",
                "result": "automata.agent.agent.Agent.conversation"
            },
            {
                "query": "What abstract property is used to get the agent responses associated with the Agent?",
                "result": "automata.agent.agent.Agent.agent_responses"
            },
            {
                "query": "What abstract property is used to get the tools associated with the Agent?",
                "result": "automata.agent.agent.Agent.tools"
            },
            {
                "query": "Which method is used to run an Agent's task?",
                "result": "automata.agent.agent.Agent.run"
            },
            {
                "query": "Which abstract method sets the database provider for the Agent?",
                "result": "automata.agent.agent.Agent.set_database_provider"
            },
            {
                "query": "Which abstract method is used to setup the Agent before running?",
                "result": "automata.agent.agent.Agent._setup"
            },
            {
                "query": "Which class enumerates the available agent tools?",
                "result": "automata.agent.agent.AgentToolkitNames"
            },
            {
                "query": "Which class is an abstract base class for building agent tools?",
                "result": "automata.agent.agent.AgentToolkitBuilder"
            },
            {
                "query": "Which method of AgentToolkitBuilder is responsible for building the associated tool?",
                "result": "automata.agent.agent.AgentToolkitBuilder.build"
            },
            {
                "query": "What function executes git [args] in the local environment?",
                "result": "automata.cli.build.git"
            },
            {
                "query": "What function attempts to execute the install indexing script?",
                "result": "automata.cli.build.install_indexing"
            },
            {
                "query": "What function generates the local project indices?",
                "result": "automata.cli.build.generate_local_indices"
            },
            {
                "query": "What is the utility that adds common options for the command-line interface?",
                "result": "automata.cli.options.common_options"
            },
            {
                "query": "What is the utility that adds options related to the configuration of an agent in the command-line interface?",
                "result": "automata.cli.options.agent_options"
            },
            {
                "query": "What is the utility that adds options related to the configuration of an evaluation in the command-line interface?",
                "result": "automata.cli.options.eval_options"
            },
            {
                "query": "What function initializes the py_module_loader with a specific project name and root file path?",
                "result": "automata.cli.cli_utils.initialize_py_module_loader"
            },
            {
                "query": "Which function takes care of setting up necessary files for the local task environment?",
                "result": "automata.cli.cli_utils.setup_files"
            },
            {
                "query": "What function is used to get the custom style for logging?",
                "result": "automata.cli.cli_utils.get_custom_style"
            },
            {
                "query": "What function asks the user for a specific choice?",
                "result": "automata.cli.cli_utils.ask_choice"
            },
            {
                "query": "What function is responsible for logging CLI output messages in the service?",
                "result": "automata.cli.env_operations.log_cli_output"
            },
            {
                "query": "What function retrieves the value of an existing key from a .env file?",
                "result": "automata.cli.env_operations.get_key"
            },
            {
                "query": "How can I replace an existing key in a .env file?",
                "result": "automata.cli.env_operations.replace_key"
            },
            {
                "query": "What operation is performed by the `load_env_vars` function in the system?",
                "result": "automata.cli.env_operations.load_env_vars"
            },
            {
                "query": "How does the service prompt the user to select a choice from a given list?",
                "result": "automata.cli.env_operations.ask_choice"
            },
            {
                "query": "How can a user input select the type of graph in the service?",
                "result": "automata.cli.env_operations.select_graph_type"
            },
            {
                "query": "What procedure is followed to reveal the value of a key to the user?",
                "result": "automata.cli.env_operations.show_key_value"
            },
            {
                "query": "How can the value of a key in the local task_environment be updated?",
                "result": "automata.cli.env_operations.update_key_value"
            },
            {
                "query": "Which function is used to change the graph type in the local environment?",
                "result": "automata.cli.env_operations.update_graph_type"
            },
            {
                "query": "What function is used to delete the value of a key from the local task_environment?",
                "result": "automata.cli.env_operations.delete_key_value"
            },
            {
                "query": "What class represents a custom logger for CLI output?",
                "result": "automata.cli.cli_output_logger.CustomLogger"
            },
            {
                "query": "How is the CustomLogger object constructed?",
                "result": "automata.cli.cli_output_logger.CustomLogger.__init__"
            },
            {
                "query": "What method does the CustomLogger class use to log CLI output messages?",
                "result": "automata.cli.cli_output_logger.CustomLogger.cli_output"
            },
            {
                "query": "What function is used to reconfigure the logging settings in the local project?",
                "result": "automata.cli.commands.reconfigure_logging"
            },
            {
                "query": "What command group is used to categorize CLI commands?",
                "result": "automata.cli.commands.cli"
            },
            {
                "query": "What command is used for configuring environment variables for Automata?",
                "result": "automata.cli.commands.configure"
            },
            {
                "query": "What command is used to run the install_index script?",
                "result": "automata.cli.commands.build"
            },
            {
                "query": "What command is used to run the code embedding pipeline?",
                "result": "automata.cli.commands.run_code_embedding"
            },
            {
                "query": "What command is used to run the document embedding pipeline?",
                "result": "automata.cli.commands.run_doc_embedding"
            },
            {
                "query": "What command is used to run the document post-processor?",
                "result": "automata.cli.commands.run_doc_post_process"
            },
            {
                "query": "What command is used to run the agent?",
                "result": "automata.cli.commands.run_agent"
            },
            {
                "query": "What command is used to run the evaluation for the agent?",
                "result": "automata.cli.commands.run_agent_eval"
            },
            {
                "query": "What command is used to run the evaluation for the tool?",
                "result": "automata.cli.commands.run_tool_eval"
            },
            {
                "query": "Which function is used to process GitHub issues for the Automata agent?",
                "result": "automata.cli.scripts.run_agent.process_issues"
            },
            {
                "query": "What is the main entry point to run the Automata agent?",
                "result": "automata.cli.scripts.run_agent.main"
            },
            {
                "query": "What is the GitHub Client used for in the agent script?",
                "result": "automata.singletons.github_client.GitHubClient"
            },
            {
                "query": "How are the agent tools built in the agent script?",
                "result": "automata.tools.agent_tool_factory.AgentToolFactory.build_tools"
            },
            {
                "query": "Which method is invoked to run evaluation for a list of tasks specified in a JSON file?",
                "result": "automata.cli.scripts.run_agent_eval.run_eval_harness"
            },
            {
                "query": "What method is used to start the agent evaluation script?",
                "result": "automata.cli.scripts.run_agent_eval.main"
            },
            {
                "query": "What function validates a YAML file based on a predefined schema?",
                "result": "automata.cli.scripts.run_agent_config_validation.test_yaml_validation"
            },
            {
                "query": "What function tests the compatibility of a YAML file?",
                "result": "automata.cli.scripts.run_agent_config_validation.test_yaml_compatibility"
            },
            {
                "query": "What function is used as an entry point for doc post processing?",
                "result": "automata.cli.scripts.run_doc_post_process.main"
            },
            {
                "query": "Which class is used to write python docs?",
                "result": "automata.code_writers.py.py_doc_writer.PyDocWriter"
            },
            {
                "query": "Which Singleton class is used to manage dependencies in Automata?",
                "result": "automata.singletons.dependency_factory.DependencyFactory"
            },
            {
                "query": "What function initializes providers and prepares for symbol embedding?",
                "result": "automata.cli.scripts.run_doc_embedding.initialize_providers"
            },
            {
                "query": "What function parses a string of comma-separated dotpaths into a list?",
                "result": "automata.cli.scripts.run_doc_embedding.parse_dotpaths"
            },
            {
                "query": "What function maps a list of dotpaths to their corresponding Symbol objects?",
                "result": "automata.cli.scripts.run_doc_embedding.map_dotpaths_to_symbols"
            },
            {
                "query": "What is the main function performing in the script?",
                "result": "automata.cli.scripts.run_doc_embedding.main"
            },
            {
                "query": "What function initializes resources for a project?",
                "result": "automata.cli.scripts.run_code_embedding.initialize_resources"
            },
            {
                "query": "What function collects symbols from a symbol graph?",
                "result": "automata.cli.scripts.run_code_embedding.collect_symbols"
            },
            {
                "query": "What function processes symbol_embeddings?",
                "result": "automata.cli.scripts.run_code_embedding.process_embeddings"
            },
            {
                "query": "What is the main function responsible for in the process?",
                "result": "automata.cli.scripts.run_code_embedding.main"
            },
            {
                "query": "What function in the script is responsible for running the evaluation harness?",
                "result": "automata.cli.scripts.run_tool_eval.run_eval_harness"
            },
            {
                "query": "What is the main entrypoint of the script?",
                "result": "automata.cli.scripts.run_tool_eval.main"
            },
            {
                "query": "What function is used to initialize the Python module loader?",
                "result": "automata.cli.cli_utils.initialize_py_module_loader"
            },
            {
                "query": "How are tools created in this script?",
                "result": "automata.tools.agent_tool_factory.AgentToolFactory.build_tools"
            },
            {
                "query": "Which class is responsible for handling the embedding of symbols?",
                "result": "automata.memory_store.symbol_doc_embedding_handler.SymbolDocEmbeddingHandler"
            },
            {
                "query": "What method manages the processing of embedding for a given Symbol?",
                "result": "automata.memory_store.symbol_doc_embedding_handler.SymbolDocEmbeddingHandler.process_embedding"
            },
            {
                "query": "Which method is used to create a new embedding for a symbol?",
                "result": "automata.memory_store.symbol_doc_embedding_handler.SymbolDocEmbeddingHandler._create_new_embedding"
            },
            {
                "query": "Which method is used to update an existing embedding for a symbol?",
                "result": "automata.memory_store.symbol_doc_embedding_handler.SymbolDocEmbeddingHandler._update_existing_embedding"
            },
            {
                "query": "How is the SymbolDocEmbeddingHandler object instantiated?",
                "result": "automata.memory_store.symbol_doc_embedding_handler.SymbolDocEmbeddingHandler.__init__"
            },
            {
                "query": "What class represents a conversation database for an Automata agent?",
                "result": "automata.memory_store.conversation_database_providers.OpenAIAutomataConversationDatabase"
            },
            {
                "query": "What method is used to construct the OpenAIAutomataConversationDatabase?",
                "result": "automata.memory_store.conversation_database_providers.OpenAIAutomataConversationDatabase.__init__"
            },
            {
                "query": "What method is used to check if a chat session ID is valid?",
                "result": "automata.memory_store.conversation_database_providers.OpenAIAutomataConversationDatabase._check_session_id"
            },
            {
                "query": "What method is used to save a message to the database?",
                "result": "automata.memory_store.conversation_database_providers.OpenAIAutomataConversationDatabase.save_message"
            },
            {
                "query": "What method is used to get the last interaction ID for a chat session?",
                "result": "automata.memory_store.conversation_database_providers.OpenAIAutomataConversationDatabase._get_last_interaction_id"
            },
            {
                "query": "What method is used to retrieve all messages from a chat session?",
                "result": "automata.memory_store.conversation_database_providers.OpenAIAutomataConversationDatabase.get_messages"
            },
            {
                "query": "What class Handles a database for `Symbol` source code embeddings?",
                "result": "automata.memory_store.symbol_code_embedding_handler.SymbolCodeEmbeddingHandler"
            },
            {
                "query": "How is the SymbolCodeEmbeddingHandler object constructed?",
                "result": "automata.memory_store.symbol_code_embedding_handler.SymbolCodeEmbeddingHandler.__init__"
            },
            {
                "query": "Which method in the SymbolCodeEmbeddingHandler class processes the embedding for a Symbol by updating if source code has changed?",
                "result": "automata.memory_store.symbol_code_embedding_handler.SymbolCodeEmbeddingHandler.process_embedding"
            },
            {
                "query": "What method in the SymbolCodeEmbeddingHandler class flushes the current batch of embeddings to the database?",
                "result": "automata.memory_store.symbol_code_embedding_handler.SymbolCodeEmbeddingHandler.flush"
            },
            {
                "query": "Which method in the SymbolCodeEmbeddingHandler class updates existing source code embedding of a Symbol?",
                "result": "automata.memory_store.symbol_code_embedding_handler.SymbolCodeEmbeddingHandler._update_existing_embedding"
            },
            {
                "query": "Which method in the SymbolCodeEmbeddingHandler class queues a Symbol for batch embedding building?",
                "result": "automata.memory_store.symbol_code_embedding_handler.SymbolCodeEmbeddingHandler._queue_for_building"
            },
            {
                "query": "Which method in the SymbolCodeEmbeddingHandler class builds and adds embeddings for queued symbols?",
                "result": "automata.memory_store.symbol_code_embedding_handler.SymbolCodeEmbeddingHandler._build_and_add_embeddings"
            },
            {
                "query": "What abstract base class represents a node in the file tree?",
                "result": "automata.code_parsers.directory.Node"
            },
            {
                "query": "What method is used to construct the Node object?",
                "result": "automata.code_parsers.directory.Node.__init__"
            },
            {
                "query": "Which class represents a file in the file-structure tree?",
                "result": "automata.code_parsers.directory.File"
            },
            {
                "query": "Which class represents a directory in the file-structure tree?",
                "result": "automata.code_parsers.directory.Directory"
            },
            {
                "query": "How do you add a child node to a directory?",
                "result": "automata.code_parsers.directory.Directory.add_child"
            },
            {
                "query": "How do you get a list of file names in a directory?",
                "result": "automata.code_parsers.directory.Directory.get_file_names"
            },
            {
                "query": "How do you get a list of subdirectory names in a directory?",
                "result": "automata.code_parsers.directory.Directory.get_subdirectories"
            },
            {
                "query": "How do you check if a directory is the root directory?",
                "result": "automata.code_parsers.directory.Directory.is_root_dir"
            },
            {
                "query": "How do you check if a directory is a leaf directory?",
                "result": "automata.code_parsers.directory.Directory.is_leaf_dir"
            },
            {
                "query": "Which class handles operations related to directory structure?",
                "result": "automata.code_parsers.directory.DirectoryManager"
            },
            {
                "query": "How is the DirectoryManager object created?",
                "result": "automata.code_parsers.directory.DirectoryManager.__init__"
            },
            {
                "query": "How do you load directory structure into Directory and File objects?",
                "result": "automata.code_parsers.directory.DirectoryManager._load_directory_structure"
            },
            {
                "query": "How do you get a list of files in a given directory?",
                "result": "automata.code_parsers.directory.DirectoryManager.get_files_in_dir"
            },
            {
                "query": "How do you get a list of subdirectories in a given directory?",
                "result": "automata.code_parsers.directory.DirectoryManager.get_subdirectories"
            },
            {
                "query": "How do you ensure the existence of a directory, creating it if it doesn't already exist?",
                "result": "automata.code_parsers.directory.DirectoryManager.ensure_directory_exists"
            },
            {
                "query": "How do you locate the node for a given path in the directory?",
                "result": "automata.code_parsers.directory.DirectoryManager._get_node_for_path"
            },
            {
                "query": "What function converts a file path to a module dot path?",
                "result": "automata.code_parsers.py.dotpath_map.convert_fpath_to_module_dotpath"
            },
            {
                "query": "What class represents a map from module dot paths to module file paths?",
                "result": "automata.code_parsers.py.dotpath_map.DotPathMap"
            },
            {
                "query": "How is the DotPathMap object created?",
                "result": "automata.code_parsers.py.dotpath_map.DotPathMap.__init__"
            },
            {
                "query": "What private method builds a map from module dot paths to module file paths inside DotPathMap?",
                "result": "automata.code_parsers.py.dotpath_map.DotPathMap._build_module_dotpath_to_fpath_map"
            },
            {
                "query": "How do we get the file path of a module given its dotpath in DotPathMap?",
                "result": "automata.code_parsers.py.dotpath_map.DotPathMap.get_module_fpath_by_dotpath"
            },
            {
                "query": "How do we get the dotpath of a module given its file path in DotPathMap?",
                "result": "automata.code_parsers.py.dotpath_map.DotPathMap.get_module_dotpath_by_fpath"
            },
            {
                "query": "How do we check if the map contains a module with a given dotpath in DotPathMap?",
                "result": "automata.code_parsers.py.dotpath_map.DotPathMap.contains_dotpath"
            },
            {
                "query": "How do we check if the map contains a module with a given file path in DotPathMap?",
                "result": "automata.code_parsers.py.dotpath_map.DotPathMap.contains_fpath"
            },
            {
                "query": "How can we add a new module to DotPathMap?",
                "result": "automata.code_parsers.py.dotpath_map.DotPathMap.put_module"
            },
            {
                "query": "How can we delete a module from DotPathMap?",
                "result": "automata.code_parsers.py.dotpath_map.DotPathMap.delete_module"
            },
            {
                "query": "How can we get all items in the map?",
                "result": "automata.code_parsers.py.dotpath_map.DotPathMap.items"
            },
            {
                "query": "What class is intended for fetching Python code?",
                "result": "automata.code_parsers.py.py_reader.PyReader"
            },
            {
                "query": "What method of PyReader gets the source code for a specified module, class, or function/method?",
                "result": "automata.code_parsers.py.py_reader.PyReader.get_source_code"
            },
            {
                "query": "What method of PyReader gets the docstring for a specified module, class, or function/method?",
                "result": "automata.code_parsers.py.py_reader.PyReader.get_docstring"
            },
            {
                "query": "What method of PyReader gets the source code without docstrings for a specified module, class or function/method?",
                "result": "automata.code_parsers.py.py_reader.PyReader.get_source_code_without_docstrings"
            },
            {
                "query": "What method of PyReader gets the docstring from the specified node?",
                "result": "automata.code_parsers.py.py_reader.PyReader.get_docstring_from_node"
            },
            {
                "query": "What is the purpose of the ContextComponent Enum?",
                "result": "automata.code_parsers.py.context_processing.context_retriever.ContextComponent"
            },
            {
                "query": "Which base class is used for context components?",
                "result": "automata.code_parsers.py.context_processing.context_retriever.BaseContextComponent"
            },
            {
                "query": "Which class converts a symbol into a headline?",
                "result": "automata.code_parsers.py.context_processing.context_retriever.HeadlineContextComponent"
            },
            {
                "query": "Which class converts a symbol into underlying source code?",
                "result": "automata.code_parsers.py.context_processing.context_retriever.SourceCodeContextComponent"
            },
            {
                "query": "Which class converts a symbol into an interface, skipping 'private' methods/classes if indicated?",
                "result": "automata.code_parsers.py.context_processing.context_retriever.InterfaceContextComponent"
            },
            {
                "query": "Which class is used to retrieve the context of a symbol in a Python project?",
                "result": "automata.code_parsers.py.context_processing.context_retriever.PyContextRetriever"
            },
            {
                "query": "Which method is used to process the context of a specified `Symbol` in PyContextRetriever?",
                "result": "automata.code_parsers.py.context_processing.context_retriever.PyContextRetriever.process_symbol"
            },
            {
                "query": "What function checks if a method is private in the provided module?",
                "result": "automata.code_parsers.py.context_processing.context_utils.is_private_method"
            },
            {
                "query": "What function processes a specified method in the provided module?",
                "result": "automata.code_parsers.py.context_processing.context_utils.process_method"
            },
            {
                "query": "How can I retrieve all methods in a given AST from the provided module?",
                "result": "automata.code_parsers.py.context_processing.context_utils.get_all_methods"
            },
            {
                "query": "How can I retrieve all classes in a given AST from the provided module?",
                "result": "automata.code_parsers.py.context_processing.context_utils.get_all_classes"
            },
            {
                "query": "How can I retrieve all attributes in a given class from the provided module?",
                "result": "automata.code_parsers.py.context_processing.context_utils.get_all_attributes"
            },
            {
                "query": "How can I retrieve the arguments for a specified method from the provided module?",
                "result": "automata.code_parsers.py.context_processing.context_utils._get_method_arguments"
            },
            {
                "query": "How can I retrieve the return annotation for a specified method from the provided module?",
                "result": "automata.code_parsers.py.context_processing.context_utils._get_method_return_annotation"
            },
            {
                "query": "What class represents the configuration for PyContextHandler?",
                "result": "automata.code_parsers.py.context_processing.context_handler.PyContextHandlerConfig"
            },
            {
                "query": "How is the PyContextHandlerConfig object constructed?",
                "result": "automata.code_parsers.py.context_processing.context_handler.PyContextHandlerConfig.__init__"
            },
            {
                "query": "What is the class that handles the context of python code?",
                "result": "automata.code_parsers.py.context_processing.context_handler.PyContextHandler"
            },
            {
                "query": "How do you construct the PyContextHandler object?",
                "result": "automata.code_parsers.py.context_processing.context_handler.PyContextHandler.__init__"
            },
            {
                "query": "What method is used to construct the context for a symbol?",
                "result": "automata.code_parsers.py.context_processing.context_handler.PyContextHandler.construct_symbol_context"
            },
            {
                "query": "How can I get the top N symbols according to their ranks?",
                "result": "automata.code_parsers.py.context_processing.context_handler.PyContextHandler.get_top_n_symbol_rank_matches"
            },
            {
                "query": "How can I get the top N symbols that a given symbol depends on?",
                "result": "automata.code_parsers.py.context_processing.context_handler.PyContextHandler.get_top_n_symbol_dependencies"
            },
            {
                "query": "What class writes documentation for Python modules?",
                "result": "automata.code_writers.py.py_doc_writer.PyDocWriter"
            },
            {
                "query": "How is the PyDocWriter object constructed?",
                "result": "automata.code_writers.py.py_doc_writer.PyDocWriter.__init__"
            },
            {
                "query": "How does the PyDocWriter generate a module-level summary?",
                "result": "automata.code_writers.py.py_doc_writer.PyDocWriter.generate_module_summary"
            },
            {
                "query": "How does the PyDocWriter generate individual .rst files?",
                "result": "automata.code_writers.py.py_doc_writer.PyDocWriter.generate_rst_files"
            },
            {
                "query": "How does the PyDocWriter generate index files?",
                "result": "automata.code_writers.py.py_doc_writer.PyDocWriter.generate_index_files"
            },
            {
                "query": "How does the PyDocWriter write a full documentation?",
                "result": "automata.code_writers.py.py_doc_writer.PyDocWriter.write_documentation"
            },
            {
                "query": "How does the PyDocWriter obtain a formatted string for the main body of index.rst file?",
                "result": "automata.code_writers.py.py_doc_writer.PyDocWriter.get_payload"
            },
            {
                "query": "How does the PyDocWriter generate a summary from the content?",
                "result": "automata.code_writers.py.py_doc_writer.PyDocWriter.generate_summary"
            },
            {
                "query": "How does the PyDocWriter convert a camel case string to snake case?",
                "result": "automata.code_writers.py.py_doc_writer.PyDocWriter.camel_to_snake"
            },
            {
                "query": "How does the PyDocWriter check if a string is in camel case?",
                "result": "automata.code_writers.py.py_doc_writer.PyDocWriter.check_camel_case"
            },
            {
                "query": "What class provides various search methods for symbols?",
                "result": "automata.experimental.search.symbol_search.SymbolSearch"
            },
            {
                "query": "How is a SymbolSearch instance constructed?",
                "result": "automata.experimental.search.symbol_search.SymbolSearch.__init__"
            },
            {
                "query": "What property in SymbolSearch class is utilized to get the symbol rank?",
                "result": "automata.experimental.search.symbol_search.SymbolSearch.symbol_rank"
            },
            {
                "query": "What method in SymbolSearch provides symbol rank results?",
                "result": "automata.experimental.search.symbol_search.SymbolSearch.get_symbol_rank_results"
            },
            {
                "query": "What method in SymbolSearch fetches the list of similar symbols sorted by embedding similarity?",
                "result": "automata.experimental.search.symbol_search.SymbolSearch.get_symbol_code_similarity_results"
            },
            {
                "query": "Which method finds all references to a provided module, class, method, or standalone function?",
                "result": "automata.experimental.search.symbol_search.SymbolSearch.symbol_references"
            },
            {
                "query": "How to retrieve the raw text or source code by specifying a symbol?",
                "result": "automata.experimental.search.symbol_search.SymbolSearch.retrieve_source_code_by_symbol"
            },
            {
                "query": "What method in SymbolSearch performs a exact search across the indexed codebase?",
                "result": "automata.experimental.search.symbol_search.SymbolSearch.exact_search"
            },
            {
                "query": "Which method processes an NLP-formatted query and returns the search results?",
                "result": "automata.experimental.search.symbol_search.SymbolSearch.process_query"
            },
            {
                "query": "How does SymbolSearch class perform an exact pattern match search in all modules?",
                "result": "automata.experimental.search.symbol_search.SymbolSearch._find_pattern_in_modules"
            },
            {
                "query": "How does SymbolSearch class calculate the z-score, shift it to be positive, and then raise the scores to a specified power?",
                "result": "automata.experimental.search.symbol_search.SymbolSearch.shifted_z_score_powered"
            },
            {
                "query": "How does SymbolSearch transform the values in a dictionary by applying a function?",
                "result": "automata.experimental.search.symbol_search.SymbolSearch.transform_dict_values"
            },
            {
                "query": "Which class is a Singleton for loading and caching Python modules in memory?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader"
            },
            {
                "query": "What method is used to initialize the PyModuleLoader singleton?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader.initialize"
            },
            {
                "query": "How does the PyModuleLoader check if a dotpath is contained within it?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader.__contains__"
            },
            {
                "query": "What method is used to assert if the PyModuleLoader is initialized?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader._assert_initialized"
            },
            {
                "query": "How does the PyModuleLoader fetch all items within it?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader.items"
            },
            {
                "query": "Which method is responsible for returning an abstract syntax tree module given a module dotpath?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader.fetch_ast_module"
            },
            {
                "query": "How can you get a module dotpath given the module object?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader.fetch_existing_module_dotpath"
            },
            {
                "query": "What method gets a module filepath given a module dotpath?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader.fetch_existing_module_fpath_by_dotpath"
            },
            {
                "query": "What method gets a module dotpath given a module filepath?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader.get_module_dotpath_by_fpath"
            },
            {
                "query": "How can you put a module and its dotpath in the PyModuleLoader?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader.put_module"
            },
            {
                "query": "Which method removes a module and its dotpath from the PyModuleLoader?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader.delete_module"
            },
            {
                "query": "What method is used to reset the PyModuleLoader to its initial state?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader.reset"
            },
            {
                "query": "Which method is used to load all modules in the PyModuleLoader map?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader._load_all_modules"
            },
            {
                "query": "How can you load a module from a file path and return its abstract syntax tree object?",
                "result": "automata.singletons.py_module_loader.PyModuleLoader._load_module_from_fpath"
            },
            {
                "query": "What is the global instance of PyModuleLoader available for use?",
                "result": "automata.singletons.py_module_loader.py_module_loader"
            },
            {
                "query": "What abstract class is provided for managing repositories?",
                "result": "automata.singletons.github_client.RepositoryClient"
            },
            {
                "query": "What method in RepositoryClient is used to clone a repository to the local path?",
                "result": "automata.singletons.github_client.RepositoryClient.clone_repository"
            },
            {
                "query": "Which method in RepositoryClient is used to create a new branch in the repository?",
                "result": "automata.singletons.github_client.RepositoryClient.create_branch"
            },
            {
                "query": "What function in RepositoryClient is responsible for checking out a branch in the repository?",
                "result": "automata.singletons.github_client.RepositoryClient.checkout_branch"
            },
            {
                "query": "Which method in RepositoryClient is used to stage all changes in the repository?",
                "result": "automata.singletons.github_client.RepositoryClient.stage_all_changes"
            },
            {
                "query": "What function in RepositoryClient is used to commit and push all changes in the repository?",
                "result": "automata.singletons.github_client.RepositoryClient.commit_and_push_changes"
            },
            {
                "query": "Which function in RepositoryClient is used to create a new pull request on the remote?",
                "result": "automata.singletons.github_client.RepositoryClient.create_pull_request"
            },
            {
                "query": "How can a pull request be merged on the remote using RepositoryClient?",
                "result": "automata.singletons.github_client.RepositoryClient.merge_pull_request"
            },
            {
                "query": "How can the existence of a branch on the remote be checked using RepositoryClient?",
                "result": "automata.singletons.github_client.RepositoryClient.branch_exists"
            },
            {
                "query": "What class provides an interface for interacting with GitHub repositories?",
                "result": "automata.singletons.github_client.GitHubClient"
            },
            {
                "query": "How to clone a repository to the local path using GitHubClient?",
                "result": "automata.singletons.github_client.GitHubClient.clone_repository"
            },
            {
                "query": "How can a new branch be created in the repository using GitHubClient?",
                "result": "automata.singletons.github_client.GitHubClient.create_branch"
            },
            {
                "query": "How can a branch in the repository be checked out using GitHubClient?",
                "result": "automata.singletons.github_client.GitHubClient.checkout_branch"
            },
            {
                "query": "How to stage all changes in the repository using GitHubClient?",
                "result": "automata.singletons.github_client.GitHubClient.stage_all_changes"
            },
            {
                "query": "How to commit and push all changes in the repository using GitHubClient?",
                "result": "automata.singletons.github_client.GitHubClient.commit_and_push_changes"
            },
            {
                "query": "How to create a new pull request on GitHub using GitHubClient?",
                "result": "automata.singletons.github_client.GitHubClient.create_pull_request"
            },
            {
                "query": "How to merge a pull request on GitHub using GitHubClient?",
                "result": "automata.singletons.github_client.GitHubClient.merge_pull_request"
            },
            {
                "query": "How to check if a branch exists on GitHub using GitHubClient?",
                "result": "automata.singletons.github_client.GitHubClient.branch_exists"
            },
            {
                "query": "How can open issues for the remote repository be fetched using GitHubClient?",
                "result": "automata.singletons.github_client.GitHubClient.get_open_issues"
            },
            {
                "query": "How to get the open pull requests for the remote repository via GitHubClient?",
                "result": "automata.singletons.github_client.GitHubClient.get_open_pull_requests"
            },
            {
                "query": "How to create a new issue on GitHub using GitHubClient?",
                "result": "automata.singletons.github_client.GitHubClient.create_issue"
            },
            {
                "query": "How to add a label to an issue on the remote repository using GitHubClient?",
                "result": "automata.singletons.github_client.GitHubClient.add_label"
            },
            {
                "query": "How to remove a label from an issue on the remote repository with GitHubClient?",
                "result": "automata.singletons.github_client.GitHubClient.remove_label"
            },
            {
                "query": "How to add a comment to an issue on the remote repository using GitHubClient?",
                "result": "automata.singletons.github_client.GitHubClient.create_issue_comment"
            },
            {
                "query": "How to remove a comment from an issue on the remote repository using GitHubClient?",
                "result": "automata.singletons.github_client.GitHubClient.remove_issue_comment"
            },
            {
                "query": "How to fetch an issue from the remote repository using GitHubClient?",
                "result": "automata.singletons.github_client.GitHubClient.fetch_issue"
            },
            {
                "query": "What class represents the base class for different types of LLM completion results?",
                "result": "automata.llm.llm_base.LLMCompletionResult"
            },
            {
                "query": "What method fetches the role of the LLM completion result?",
                "result": "automata.llm.llm_base.LLMCompletionResult.get_role"
            },
            {
                "query": "What method fetches the content of the LLM completion result?",
                "result": "automata.llm.llm_base.LLMCompletionResult.get_content"
            },
            {
                "query": "What class represents the base class for different types of LLM chat messages?",
                "result": "automata.llm.llm_base.LLMChatMessage"
            },
            {
                "query": "What method converts a LLM chat message to a dictionary?",
                "result": "automata.llm.llm_base.LLMChatMessage.to_dict"
            },
            {
                "query": "What is understood by `LLMIterationResult`?",
                "result": "It is an optional tuple consisting of two LLMChatMessage instances."
            },
            {
                "query": "What abstract base class represents the different types of LLM conversations?",
                "result": "automata.llm.llm_base.LLMConversation"
            },
            {
                "query": "What type of exception is `LLMEmptyConversationError`?",
                "result": "It's a custom Exception class within the LLMConversation hierarchy that is raised when the conversation is empty."
            },
            {
                "query": "What does the `register_observer` method do in the LLMConversation class?",
                "result": "automata.llm.llm_base.LLMConversation.register_observer"
            },
            {
                "query": "What abstract base class represents different types of database providers for LLM conversations?",
                "result": "automata.llm.llm_base.LLMConversationDatabaseProvider"
            },
            {
                "query": "Which abstract method in the LLMConversationDatabaseProvider class is used to save a message to the database?",
                "result": "automata.llm.llm_base.LLMConversationDatabaseProvider.save_message"
            },
            {
                "query": "Which abstract base class represents different types of LLM chat completion providers?",
                "result": "automata.llm.llm_base.LLMChatCompletionProvider"
            },
            {
                "query": "What NamedTuple structure represents a function call to be made by the OpenAI agent?",
                "result": "automata.llm.llm_base.FunctionCall"
            },
            {
                "query": "Which method within the FunctionCall class is used to create a FunctionCall from a response dictionary?",
                "result": "automata.llm.llm_base.FunctionCall.from_response_dict"
            },
            {
                "query": "Which method within the FunctionCall class handles the termination message from the conversation?",
                "result": "automata.llm.llm_base.FunctionCall.handle_termination"
            },
            {
                "query": "Which method within the FunctionCall class converts the function call into a string?",
                "result": "automata.llm.llm_base.FunctionCall.__str__"
            },
            {
                "query": "What class represents a completion result from the OpenAI API?",
                "result": "automata.llm.providers.openai_llm.OpenAIChatCompletionResult"
            },
            {
                "query": "How is the `OpenAIChatCompletionResult` represented as a string?",
                "result": "automata.llm.providers.openai_llm.OpenAIChatCompletionResult.__str__"
            },
            {
                "query": "What method retrieves the function call from the completion result?",
                "result": "automata.llm.providers.openai_llm.OpenAIChatCompletionResult.get_function_call"
            },
            {
                "query": "What class represents a processed chat message TO or FROM the OpenAI LLM Chat API?",
                "result": "automata.llm.providers.openai_llm.OpenAIChatMessage"
            },
            {
                "query": "How is the `OpenAIChatMessage` represented as a string?",
                "result": "automata.llm.providers.openai_llm.OpenAIChatMessage.__str__"
            },
            {
                "query": "What method converts the chat message to a dictionary?",
                "result": "automata.llm.providers.openai_llm.OpenAIChatMessage.to_dict"
            },
            {
                "query": "What class represents a conversation with the OpenAI API?",
                "result": "automata.llm.providers.openai_llm.OpenAIConversation"
            },
            {
                "query": "What method is used to add a message to the OpenAI conversation?",
                "result": "automata.llm.providers.openai_llm.OpenAIConversation.add_message"
            },
            {
                "query": "What class represents a function callable by the OpenAI agent?",
                "result": "automata.llm.providers.openai_llm.OpenAIFunction"
            },
            {
                "query": "What class provides chat messages from the OpenAI API?",
                "result": "automata.llm.providers.openai_llm.OpenAIChatCompletionProvider"
            },
            {
                "query": "What method is used to get the next assistant completion from the OpenAI API?",
                "result": "automata.llm.providers.openai_llm.OpenAIChatCompletionProvider.get_next_assistant_completion"
            },
            {
                "query": "What class provides embeddings from the OpenAI API?",
                "result": "automata.llm.providers.openai_llm.OpenAIEmbeddingProvider"
            },
            {
                "query": "What method builds an embedding for a given source text?",
                "result": "automata.llm.providers.openai_llm.OpenAIEmbeddingProvider.build_embedding_vector"
            },
            {
                "query": "What class represents a tool that can be used by the OpenAI agent?",
                "result": "automata.llm.providers.openai_llm.OpenAITool"
            },
            {
                "query": "Which dataclass is used to represent a line item in a bounding box?",
                "result": "automata.core.ast_handlers.LineItem"
            },
            {
                "query": "Which dataclass is used to represent a bounding box?",
                "result": "automata.core.ast_handlers.BoundingBox"
            },
            {
                "query": "What function is used to find the bounding box of a node in the AST?",
                "result": "automata.core.ast_handlers.fetch_bounding_box"
            },
            {
                "query": "What function is used to get the docstring from a specific node?",
                "result": "automata.core.ast_handlers.get_docstring_from_node"
            },
            {
                "query": "Which class removes docstrings from a class or function?",
                "result": "automata.core.ast_handlers.DocstringRemover"
            },
            {
                "query": "What procedure is used to create a copy of a specific node without docstrings?",
                "result": "automata.core.ast_handlers.get_node_without_docstrings"
            },
            {
                "query": "Which class removes import statements from a module, class or function?",
                "result": "automata.core.ast_handlers.ImportRemover"
            },
            {
                "query": "What function is used to create a copy of a specific node without import statements?",
                "result": "automata.core.ast_handlers.get_node_without_imports"
            },
            {
                "query": "What function is used to find the imports for a specified module?",
                "result": "automata.core.ast_handlers.find_imports"
            },
            {
                "query": "What function is used to find a module, function, method, or class inside another module?",
                "result": "automata.core.ast_handlers.find_syntax_tree_node"
            },
            {
                "query": "Which function sets the OpenAI API key?",
                "result": "automata.core.utils.set_openai_api_key"
            },
            {
                "query": "Which function obtains the path to the root of the Automata python code directory?",
                "result": "automata.core.utils.get_root_py_fpath"
            },
            {
                "query": "Which function obtains the path to the root of the Automata directory?",
                "result": "automata.core.utils.get_root_fpath"
            },
            {
                "query": "Which function obtains the path to the root of the Automata embedding data directory?",
                "result": "automata.core.utils.get_embedding_data_fpath"
            },
            {
                "query": "Which function obtains the path to the root of the Automata config directory?",
                "result": "automata.core.utils.get_config_fpath"
            },
            {
                "query": "Which function loads a config file from the config directory?",
                "result": "automata.core.utils.load_config"
            },
            {
                "query": "Which function is used for string formatting in config?",
                "result": "automata.core.utils.format_text"
            },
            {
                "query": "Which function converts a kebab-case string to snake_case?",
                "result": "automata.core.utils.convert_kebab_to_snake_case"
            },
            {
                "query": "What is the HandlerDict class?",
                "result": "automata.core.utils.HandlerDict"
            },
            {
                "query": "What is the RootDict class?",
                "result": "automata.core.utils.RootDict"
            },
            {
                "query": "What is the LoggingConfig class?",
                "result": "automata.core.utils.LoggingConfig"
            },
            {
                "query": "Which function returns logging configuration?",
                "result": "automata.core.utils.get_logging_config"
            },
            {
                "query": "Which function checks if a list is sorted?",
                "result": "automata.core.utils.is_sorted"
            },
            {
                "query": "Which function calculates the similarity between two strings?",
                "result": "automata.core.utils.calculate_similarity"
            },
            {
                "query": "Which abstract class defines the base for different types of vector database providers?",
                "result": "automata.core.base.database.vector_database.VectorDatabaseProvider"
            },
            {
                "query": "How is the vector database provider sized?",
                "result": "automata.core.base.database.vector_database.VectorDatabaseProvider.__len__"
            },
            {
                "query": "How does the vector database provider save data?",
                "result": "automata.core.base.database.vector_database.VectorDatabaseProvider.save"
            },
            {
                "query": "How does the vector database provider load data?",
                "result": "automata.core.base.database.vector_database.VectorDatabaseProvider.load"
            },
            {
                "query": "How does the vector database provider clear data?",
                "result": "automata.core.base.database.vector_database.VectorDatabaseProvider.clear"
            },
            {
                "query": "How does the vector database provider get ordered keys?",
                "result": "automata.core.base.database.vector_database.VectorDatabaseProvider.get_ordered_keys"
            },
            {
                "query": "How does the vector database provider get all ordered embeddings?",
                "result": "automata.core.base.database.vector_database.VectorDatabaseProvider.get_all_ordered_embeddings"
            },
            {
                "query": "How does the vector database provider add an entry?",
                "result": "automata.core.base.database.vector_database.VectorDatabaseProvider.add"
            },
            {
                "query": "How does the vector database provider batch add entries?",
                "result": "automata.core.base.database.vector_database.VectorDatabaseProvider.batch_add"
            },
            {
                "query": "How does the vector database provider update an entry?",
                "result": "automata.core.base.database.vector_database.VectorDatabaseProvider.update_entry"
            },
            {
                "query": "How does the vector database provider batch update entries?",
                "result": "automata.core.base.database.vector_database.VectorDatabaseProvider.batch_update"
            },
            {
                "query": "How does the vector database provider generate a unique hashable key from an entry?",
                "result": "automata.core.base.database.vector_database.VectorDatabaseProvider.entry_to_key"
            },
            {
                "query": "How does the vector database provider check if a specific entry is present in the database?",
                "result": "automata.core.base.database.vector_database.VectorDatabaseProvider.contains"
            },
            {
                "query": "How does the vector database provider get a specific entry?",
                "result": "automata.core.base.database.vector_database.VectorDatabaseProvider.get"
            },
            {
                "query": "How does the vector database provider get a batch of specific entries?",
                "result": "automata.core.base.database.vector_database.VectorDatabaseProvider.batch_get"
            },
            {
                "query": "How does the vector database provider discard a specific entry?",
                "result": "automata.core.base.database.vector_database.VectorDatabaseProvider.discard"
            },
            {
                "query": "How does the vector database provider discard a batch of specific entries?",
                "result": "automata.core.base.database.vector_database.VectorDatabaseProvider.batch_discard"
            },
            {
                "query": "What class represents a vector database that saves into a JSON file?",
                "result": "automata.core.base.database.vector_database.JSONVectorDatabase"
            },
            {
                "query": "How does the JSONVectorDatabase save the data to a JSON file?",
                "result": "automata.core.base.database.vector_database.JSONVectorDatabase.save"
            },
            {
                "query": "How does the JSONVectorDatabase load the data from a JSON file?",
                "result": "automata.core.base.database.vector_database.JSONVectorDatabase.load"
            },
            {
                "query": "What class provides a vector database that uses Chroma?",
                "result": "automata.core.base.database.vector_database.ChromaVectorDatabase"
            },
            {
                "query": "How does the ChromaVectorDatabase save data?",
                "result": "automata.core.base.database.vector_database.ChromaVectorDatabase.save"
            },
            {
                "query": "How does the ChromaVectorDatabase load data?",
                "result": "automata.core.base.database.vector_database.ChromaVectorDatabase.load"
            },
            {
                "query": "Which base class represents paths?",
                "result": "automata.config.config_base.PathEnum"
            },
            {
                "query": "Which class represents categories for embedding data configuration?",
                "result": "automata.config.config_base.EmbeddingDataCategory"
            },
            {
                "query": "Which class represents different configuration categories?",
                "result": "automata.config.config_base.ConfigCategory"
            },
            {
                "query": "Which class enumerates versions of instruction configurations?",
                "result": "automata.config.config_base.InstructionConfigVersion"
            },
            {
                "query": "Which class enumerates names for agent configurations?",
                "result": "automata.config.config_base.AgentConfigName"
            },
            {
                "query": "What class represents the LLM provider?",
                "result": "automata.config.config_base.LLMProvider"
            },
            {
                "query": "What data class represents model information?",
                "result": "automata.config.config_base.ModelInformation"
            },
            {
                "query": "Which class represents an abstract base for agent configuration?",
                "result": "automata.config.config_base.AgentConfig"
            },
            {
                "query": "Which class is utilized to build an agent configuration?",
                "result": "automata.config.config_base.AgentConfigBuilder"
            },
            {
                "query": "What method is used to build an agent instance with the current configuration?",
                "result": "automata.config.config_base.AgentConfigBuilder.build"
            },
            {
                "query": "What method allows you to create a specific configuration object?",
                "result": "automata.config.config_base.AgentConfigBuilder.create_config"
            },
            {
                "query": "Which method sets the model for an agent in the builder?",
                "result": "automata.config.config_base.AgentConfigBuilder.with_model"
            },
            {
                "query": "Which method is used to set the tools for an agent in the builder?",
                "result": "automata.config.config_base.AgentConfigBuilder.with_tools"
            },
            {
                "query": "Which method is used to set the stream for an agent in the builder?",
                "result": "automata.config.config_base.AgentConfigBuilder.with_stream"
            },
            {
                "query": "Which method is used to set verbosity for an agent in the builder?",
                "result": "automata.config.config_base.AgentConfigBuilder.with_verbose"
            },
            {
                "query": "Which method is used to set the max iterations for an agent in the builder?",
                "result": "automata.config.config_base.AgentConfigBuilder.with_max_iterations"
            },
            {
                "query": "How is the maximum token count set for an agent in the builder?",
                "result": "automata.config.config_base.AgentConfigBuilder.with_max_tokens"
            },
            {
                "query": "How is the temperature set for an agent in the builder?",
                "result": "automata.config.config_base.AgentConfigBuilder.with_temperature"
            },
            {
                "query": "How is the session ID set for an agent in the builder?",
                "result": "automata.config.config_base.AgentConfigBuilder.with_session_id"
            },
            {
                "query": "How can an AgentConfigBuilder instance be created using an existing configuration object?",
                "result": "automata.config.config_base.AgentConfigBuilder.from_config"
            },
            {
                "query": "How can an AgentConfigBuilder instance be created using a configuration object's name?",
                "result": "automata.config.config_base.AgentConfigBuilder.from_name"
            },
            {
                "query": "Which enumeration is used for the normalization type of an embedding?",
                "result": "automata.embedding.embedding_base.EmbeddingNormType"
            },
            {
                "query": "What is the abstract base class used for providing embeddings for symbols?",
                "result": "automata.embedding.embedding_base.EmbeddingVectorProvider"
            },
            {
                "query": "Which method in EmbeddingVectorProvider builds an embedding vector for a single document?",
                "result": "automata.embedding.embedding_base.EmbeddingVectorProvider.build_embedding_vector"
            },
            {
                "query": "Which method in EmbeddingVectorProvider builds embedding vectors for a batch of documents?",
                "result": "automata.embedding.embedding_base.EmbeddingVectorProvider.batch_build_embedding_vector"
            },
            {
                "query": "What is the abstract base class representing a type of embedding?",
                "result": "automata.embedding.embedding_base.Embedding"
            },
            {
                "query": "How is an instance of the Embedding class constructed?",
                "result": "automata.embedding.embedding_base.Embedding.__init__"
            },
            {
                "query": "Which class is abstract and is used to construct embeddings?",
                "result": "automata.embedding.embedding_base.EmbeddingBuilder"
            },
            {
                "query": "How is an instance of EmbeddingBuilder constructed?",
                "result": "automata.embedding.embedding_base.EmbeddingBuilder.__init__"
            },
            {
                "query": "Which method in EmbeddingBuilder builds the embedding for a single symbol?",
                "result": "automata.embedding.embedding_base.EmbeddingBuilder.build"
            },
            {
                "query": "Which method in EmbeddingBuilder builds the embedding for a batch of symbols?",
                "result": "automata.embedding.embedding_base.EmbeddingBuilder.batch_build"
            },
            {
                "query": "Which is the abstract base class that handles batch embeddings?",
                "result": "automata.embedding.embedding_base.EmbeddingHandler"
            },
            {
                "query": "Which method in EmbeddingHandler retrieves the embeddings for a list of symbols?",
                "result": "automata.embedding.embedding_base.EmbeddingHandler.get_embeddings"
            },
            {
                "query": "Which method in EmbeddingHandler retrieves all embeddings in a sorted order?",
                "result": "automata.embedding.embedding_base.EmbeddingHandler.get_all_ordered_embeddings"
            },
            {
                "query": "Which method processes the embeddings for a symbol in EmbeddingHandler?",
                "result": "automata.embedding.embedding_base.EmbeddingHandler.process_embedding"
            },
            {
                "query": "Which method in EmbeddingHandler performs any remaining updates that does not form a complete batch?",
                "result": "automata.embedding.embedding_base.EmbeddingHandler.flush"
            },
            {
                "query": "What is the concrete class responsible for calculating similarity of embeddings?",
                "result": "automata.embedding.embedding_base.EmbeddingSimilarityCalculator"
            },
            {
                "query": "How is an instance of EmbeddingSimilarityCalculator constructed?",
                "result": "automata.embedding.embedding_base.EmbeddingSimilarityCalculator.__init__"
            },
            {
                "query": "Which method of EmbeddingSimilarityCalculator calculates similarity scores for a query text?",
                "result": "automata.embedding.embedding_base.EmbeddingSimilarityCalculator.calculate_query_similarity_dict"
            },
            {
                "query": "Which method of EmbeddingSimilarityCalculator calculates similarity scores for an embedding with all symbols?",
                "result": "automata.embedding.embedding_base.EmbeddingSimilarityCalculator._calculate_embedding_similarity"
            },
            {
                "query": "Which method of EmbeddingSimilarityCalculator normalizes an array of embeddings?",
                "result": "automata.embedding.embedding_base.EmbeddingSimilarityCalculator._normalize_embeddings"
            },
            {
                "query": "What class is used to register and track `ISymbolProvider` instances?",
                "result": "automata.context_providers.symbol_synchronization_context.SymbolProviderRegistry"
            },
            {
                "query": "What method of the `SymbolProviderRegistry` registers a symbol provider?",
                "result": "automata.context_providers.symbol_synchronization_context.SymbolProviderRegistry.register_provider"
            },
            {
                "query": "What method of the `SymbolProviderRegistry` synchronizes all symbol providers?",
                "result": "automata.context_providers.symbol_synchronization_context.SymbolProviderRegistry.synchronize"
            },
            {
                "query": "Which method of the `SymbolProviderRegistry` returns a list of all supported symbols?",
                "result": "automata.context_providers.symbol_synchronization_context.SymbolProviderRegistry.get_sorted_supported_symbols"
            },
            {
                "query": "How is the `SymbolProviderRegistry` reset?",
                "result": "automata.context_providers.symbol_synchronization_context.SymbolProviderRegistry.reset"
            },
            {
                "query": "What class is used as a context manager for synchronizing symbol providers?",
                "result": "automata.context_providers.symbol_synchronization_context.SymbolProviderSynchronizationContext"
            },
            {
                "query": "How is a `SymbolProviderSynchronizationContext` object constructed?",
                "result": "automata.context_providers.symbol_synchronization_context.SymbolProviderSynchronizationContext.__init__"
            },
            {
                "query": "What does the `__enter__` method of `SymbolProviderSynchronizationContext` return?",
                "result": "automata.context_providers.symbol_synchronization_context.SymbolProviderSynchronizationContext.__enter__"
            },
            {
                "query": "Under what circumstances does the `__exit__` method of `SymbolProviderSynchronizationContext` raise an exception?",
                "result": "automata.context_providers.symbol_synchronization_context.SymbolProviderSynchronizationContext.__exit__"
            },
            {
                "query": "What method of the `SymbolProviderSynchronizationContext` registers a symbol provider?",
                "result": "automata.context_providers.symbol_synchronization_context.SymbolProviderSynchronizationContext.register_provider"
            },
            {
                "query": "What method of the `SymbolProviderSynchronizationContext` synchronizes all symbol providers?",
                "result": "automata.context_providers.symbol_synchronization_context.SymbolProviderSynchronizationContext.synchronize"
            },
            {
                "query": "Which private class parses Symbol URIs into a human-readable format?",
                "result": "automata.symbol.symbol_parser._SymbolParser"
            },
            {
                "query": "What method within _SymbolParser produces a ValueError with the current symbol and index?",
                "result": "automata.symbol.symbol_parser._SymbolParser.error"
            },
            {
                "query": "What method within _SymbolParser returns the current character in the Symbol?",
                "result": "automata.symbol.symbol_parser._SymbolParser.current"
            },
            {
                "query": "Which method within _SymbolParser looks ahead to the next character in the Symbol?",
                "result": "automata.symbol.symbol_parser._SymbolParser.peek_next"
            },
            {
                "query": "Which method within _SymbolParser parses the list of Descriptors associated with the Symbol?",
                "result": "automata.symbol.symbol_parser._SymbolParser.parse_descriptors"
            },
            {
                "query": "Which method within _SymbolParser parses a single Descriptor in the list associated with the Symbol?",
                "result": "automata.symbol.symbol_parser._SymbolParser.parse_descriptor"
            },
            {
                "query": "Which method within _SymbolParser accepts an identifier from the Symbol?",
                "result": "automata.symbol.symbol_parser._SymbolParser.accept_identifier"
            },
            {
                "query": "What method within _SymbolParser accepts an identifier from the Symbol, where the identifier is escaped by spaces?",
                "result": "automata.symbol.symbol_parser._SymbolParser.accept_space_escaped_identifier"
            },
            {
                "query": "Which method within _SymbolParser accepts an identifier from the Symbol, where the identifier is escaped by backticks?",
                "result": "automata.symbol.symbol_parser._SymbolParser.accept_backtick_escaped_identifier"
            },
            {
                "query": "Which method within _SymbolParser checks if a character is a valid identifier character?",
                "result": "automata.symbol.symbol_parser._SymbolParser.is_identifier_character"
            },
            {
                "query": "What standalone function parses a Symbol given a Symbol URI?",
                "result": "automata.symbol.symbol_parser.parse_symbol"
            },
            {
                "query": "What standalone function creates a new local Symbol?",
                "result": "automata.symbol.symbol_parser.new_local_symbol"
            },
            {
                "query": "Which standalone function retrieves an escaped name?",
                "result": "automata.symbol.symbol_parser.get_escaped_name"
            },
            {
                "query": "What standalone method checks if a name is a simple identifier, i.e. it doesn't need to be escaped?",
                "result": "automata.symbol.symbol_parser.is_simple_identifier"
            },
            {
                "query": "What class represents the description component of a Symbol URI?",
                "result": "automata.symbol.symbol_base.SymbolDescriptor"
            },
            {
                "query": "How is a SymbolDescriptor object constructed?",
                "result": "automata.symbol.symbol_base.SymbolDescriptor.__init__"
            },
            {
                "query": "How is a SymbolDescriptor represented as a string?",
                "result": "automata.symbol.symbol_base.SymbolDescriptor.__repr__"
            },
            {
                "query": "What method is used to convert a SymbolDescriptor back into URI string?",
                "result": "automata.symbol.symbol_base.SymbolDescriptor.unparse"
            },
            {
                "query": "How is the escaped name of a SymbolDescriptor obtained?",
                "result": "automata.symbol.symbol_base.SymbolDescriptor.get_escaped_name"
            },
            {
                "query": "How is a scip suffix converted to a python kind?",
                "result": "automata.symbol.symbol_base.SymbolDescriptor.convert_scip_to_python_kind"
            },
            {
                "query": "What class represents the package component of a Symbol URI?",
                "result": "automata.symbol.symbol_base.SymbolPackage"
            },
            {
                "query": "How is a SymbolPackage object represented as a string?",
                "result": "automata.symbol.symbol_base.SymbolPackage.__repr__"
            },
            {
                "query": "What method is used to convert a SymbolPackage back into URI string?",
                "result": "automata.symbol.symbol_base.SymbolPackage.unparse"
            },
            {
                "query": "What class represents and contains associated logic for a Symbol?",
                "result": "automata.symbol.symbol_base.Symbol"
            },
            {
                "query": "How is a Symbol represented as a string?",
                "result": "automata.symbol.symbol_base.Symbol.__repr__"
            },
            {
                "query": "How can one get the parent of a Symbol?",
                "result": "automata.symbol.symbol_base.Symbol.parent"
            },
            {
                "query": "How can one get the corresponding python kind of a Symbol?",
                "result": "automata.symbol.symbol_base.Symbol.py_kind"
            },
            {
                "query": "How can one get the full dot path of a Symbol?",
                "result": "automata.symbol.symbol_base.Symbol.full_dotpath"
            },
            {
                "query": "How can one get the module path of a Symbol?",
                "result": "automata.symbol.symbol_base.Symbol.module_path"
            },
            {
                "query": "How can one check if a Symbol is local?",
                "result": "automata.symbol.symbol_base.Symbol.is_local"
            },
            {
                "query": "How can one check if a Symbol is a protobuf?",
                "result": "automata.symbol.symbol_base.Symbol.is_protobuf"
            },
            {
                "query": "What class represents a reference to a symbol in a file?",
                "result": "automata.symbol.symbol_base.SymbolReference"
            },
            {
                "query": "What abstract class provides a method for getting a sorted list of supported symbols?",
                "result": "automata.symbol.symbol_base.ISymbolProvider"
            },
            {
                "query": "Which method allows to filter the sorted list of supported symbols?",
                "result": "automata.symbol.symbol_base.ISymbolProvider.filter_symbols"
            },
            {
                "query": "Which method allows to get the sorted list of supported symbols?",
                "result": "automata.symbol.symbol_base.ISymbolProvider.get_sorted_supported_symbols"
            },
            {
                "query": "Which method allows to set the synchronized flag?",
                "result": "automata.symbol.symbol_base.ISymbolProvider.set_synchronized"
            },
            {
                "query": "What class represents a graph of symbols and their relationships?",
                "result": "automata.symbol.graph.symbol_graph.SymbolGraph"
            },
            {
                "query": "How is the SymbolGraph object initialized?",
                "result": "automata.symbol.graph.symbol_graph.SymbolGraph.__init__"
            },
            {
                "query": "What method in SymbolGraph is used to get dependencies of a symbol?",
                "result": "automata.symbol.graph.symbol_graph.SymbolGraph.get_symbol_dependencies"
            },
            {
                "query": "What method in SymbolGraph is used to get relationships of a symbol?",
                "result": "automata.symbol.graph.symbol_graph.SymbolGraph.get_symbol_relationships"
            },
            {
                "query": "What method in SymbolGraph is used to get potential callers of a symbol?",
                "result": "automata.symbol.graph.symbol_graph.SymbolGraph.get_potential_symbol_callers"
            },
            {
                "query": "What method in SymbolGraph is used to get potential callees of a symbol?",
                "result": "automata.symbol.graph.symbol_graph.SymbolGraph.get_potential_symbol_callees"
            },
            {
                "query": "What method in SymbolGraph is used to get references to a given symbol?",
                "result": "automata.symbol.graph.symbol_graph.SymbolGraph.get_references_to_symbol"
            },
            {
                "query": "What method is used to create a symbol subgraph that only contains rankable symbols?",
                "result": "automata.symbol.graph.symbol_graph.SymbolGraph._build_rankable_subgraph"
            },
            {
                "query": "What method is used in SymbolGraph to create instance of itself from a MultiDiGraph instance?",
                "result": "automata.symbol.graph.symbol_graph.SymbolGraph.from_graph"
            },
            {
                "query": "Which class is a concrete class for building OpenAI agents?",
                "result": "automata.agent.openai_agent.OpenAIAutomataAgent"
            },
            {
                "query": "Which method of an OpenAI agent is responsible for running the agent?",
                "result": "automata.agent.openai_agent.OpenAIAutomataAgent.run"
            },
            {
                "query": "Which method is used to construct the OpenAIAutomataAgent?",
                "result": "automata.agent.openai_agent.OpenAIAutomataAgent.__init__"
            },
            {
                "query": "Which private method does the OpenAI agent call to perform setup?",
                "result": "automata.agent.openai_agent.OpenAIAutomataAgent._setup"
            },
            {
                "query": "What method gets the result of the OpenAI agent operation?",
                "result": "automata.agent.openai_agent.OpenAIAutomataAgent.get_result"
            },
            {
                "query": "What method sets the database provider for the OpenAI agent?",
                "result": "automata.agent.openai_agent.OpenAIAutomataAgent.set_database_provider"
            },
            {
                "query": "Which class is an abstract base class for building OpenAI agent tools?",
                "result": "automata.agent.openai_agent.OpenAIAgentToolkitBuilder"
            },
            {
                "query": "Which abstract method in OpenAIAgentToolkitBuilder builds OpenAI tools?",
                "result": "automata.agent.openai_agent.OpenAIAgentToolkitBuilder.build_for_open_ai"
            },
            {
                "query": "What method checks if the provided Tool Manager can be handled by the OpenAIAgentToolkitBuilder?",
                "result": "automata.agent.openai_agent.OpenAIAgentToolkitBuilder.can_handle"
            },
            {
                "query": "What abstract base class represents a node in the file tree?",
                "result": "automata.code_parsers.directory.Node"
            },
            {
                "query": "What class represents a file in the file tree?",
                "result": "automata.code_parsers.directory.File"
            },
            {
                "query": "What class represents a directory in the file tree?",
                "result": "automata.code_parsers.directory.Directory"
            },
            {
                "query": "What method is used to add a child node to a directory?",
                "result": "automata.code_parsers.directory.Directory.add_child"
            },
            {
                "query": "What method retrieves a list of file names in a directory?",
                "result": "automata.code_parsers.directory.Directory.get_file_names"
            },
            {
                "query": "What method retrieves a list of subdirectory names in a directory?",
                "result": "automata.code_parsers.directory.Directory.get_subdirectories"
            },
            {
                "query": "What method determines if a directory is the root directory?",
                "result": "automata.code_parsers.directory.Directory.is_root_dir"
            },
            {
                "query": "What method determines if a directory is a leaf directory?",
                "result": "automata.code_parsers.directory.Directory.is_leaf_dir"
            },
            {
                "query": "What class handles operations related to the directory structure?",
                "result": "automata.code_parsers.directory.DirectoryManager"
            },
            {
                "query": "What method loads the structure of a directory into Directory and File objects",
                "result": "automata.code_parsers.directory.DirectoryManager._load_directory_structure"
            },
            {
                "query": "How does a DirectoryManager get a list of files in a specific directory?",
                "result": "automata.code_parsers.directory.DirectoryManager.get_files_in_dir"
            },
            {
                "query": "How does a DirectoryManager get a list of subdirectories in a specific directory?",
                "result": "automata.code_parsers.directory.DirectoryManager.get_subdirectories"
            },
            {
                "query": "How does a DirectoryManager ensure a specific directory exists?",
                "result": "automata.code_parsers.directory.DirectoryManager.ensure_directory_exists"
            },
            {
                "query": "How does a DirectoryManager find the node for a given path?",
                "result": "automata.code_parsers.directory.DirectoryManager._get_node_for_path"
            },
            {
                "query": "What class is responsible for fetching Python code?",
                "result": "automata.code_parsers.py.py_reader.PyReader"
            },
            {
                "query": "How is the PyReader object constructed?",
                "result": "automata.code_parsers.py.py_reader.PyReader.__init__"
            },
            {
                "query": "What method is used to get source code for a specified module, class, or function/method?",
                "result": "automata.code_parsers.py.py_reader.PyReader.get_source_code"
            },
            {
                "query": "What method is used to get the docstring for a specified module, class, or function/method?",
                "result": "automata.code_parsers.py.py_reader.PyReader.get_docstring"
            },
            {
                "query": "What method is used to get source code without docstrings for a specified module, class, or function/method?",
                "result": "automata.code_parsers.py.py_reader.PyReader.get_source_code_without_docstrings"
            },
            {
                "query": "How can the docstring be extracted from a given node?",
                "result": "automata.code_parsers.py.py_reader.PyReader.get_docstring_from_node"
            },
            {
                "query": "What Enum defines the components of the code context processing?",
                "result": "automata.code_parsers.py.context_processing.context_retriever.ContextComponent"
            },
            {
                "query": "What abstract base class represents a context component?",
                "result": "automata.code_parsers.py.context_processing.context_retriever.BaseContextComponent"
            },
            {
                "query": "What method of BaseContextComponent is used to increase the indentation?",
                "result": "automata.code_parsers.py.context_processing.context_retriever.BaseContextComponent.increased_indentation"
            },
            {
                "query": "Which abstract method must a subclass of BaseContextComponent implement?",
                "result": "automata.code_parsers.py.context_processing.context_retriever.BaseContextComponent.generate"
            },
            {
                "query": "What concrete context component is used to generate a headline from a symbol?",
                "result": "automata.code_parsers.py.context_processing.context_retriever.HeadlineContextComponent"
            },
            {
                "query": "What method is used to generate a headline from a symbol?",
                "result": "automata.code_parsers.py.context_processing.context_retriever.HeadlineContextComponent.generate"
            },
            {
                "query": "What concrete context component is used to convert a symbol into underlying source code?",
                "result": "automata.code_parsers.py.context_processing.context_retriever.SourceCodeContextComponent"
            },
            {
                "query": "What method is used to convert a symbol into underlying source code?",
                "result": "automata.code_parsers.py.context_processing.context_retriever.SourceCodeContextComponent.generate"
            },
            {
                "query": "What class is used to convert a symbol into an interface, skipping 'private' methods/classes if indicated?",
                "result": "automata.code_parsers.py.context_processing.context_retriever.InterfaceContextComponent"
            },
            {
                "query": "What method is used to convert a symbol into an interface?",
                "result": "automata.code_parsers.py.context_processing.context_retriever.InterfaceContextComponent.generate"
            },
            {
                "query": "What method is used to process all classes and methods in the ast_object?",
                "result": "automata.code_parsers.py.context_processing.context_retriever.InterfaceContextComponent._process_classes_and_methods"
            },
            {
                "query": "What class is used to retrieve the context of a symbol in a python project?",
                "result": "automata.code_parsers.py.context_processing.context_retriever.PyContextRetriever"
            },
            {
                "query": "What method is used to process the context of a specified symbol?",
                "result": "automata.code_parsers.py.context_processing.context_retriever.PyContextRetriever.process_symbol"
            },
            {
                "query": "What is the utility class for writing Python code along Abstract Syntax Tree nodes?",
                "result": "automata.code_writers.py.py_code_writer.PyCodeWriter"
            },
            {
                "query": "Which exception is raised when a module is not found in the module dictionary?",
                "result": "automata.code_writers.py.py_code_writer.PyCodeWriter.ModuleNotFound"
            },
            {
                "query": "Which exception is raised when an Abstract Syntax Tree Statement is not found in the module?",
                "result": "automata.code_writers.py.py_code_writer.PyCodeWriter.StatementNotFound"
            },
            {
                "query": "Which exception is raised when invalid arguments are passed to a method?",
                "result": "automata.code_writers.py.py_code_writer.PyCodeWriter.InvalidArguments"
            },
            {
                "query": "How is the PyCodeWriter object initialized?",
                "result": "automata.code_writers.py.py_code_writer.PyCodeWriter.__init__"
            },
            {
                "query": "What method is used to create a new module object from source code?",
                "result": "automata.code_writers.py.py_code_writer.PyCodeWriter.create_new_module"
            },
            {
                "query": "What method is used to write the modified module to a file at the specified output path?",
                "result": "automata.code_writers.py.py_code_writer.PyCodeWriter.write_module_to_disk"
            },
            {
                "query": "Which private method is used to write the source code to disk and format it using 'black' and 'isort'?",
                "result": "automata.code_writers.py.py_code_writer.PyCodeWriter._write_to_disk_and_format"
            },
            {
                "query": "What method is used to upsert the nodes from a new module into an existing module?",
                "result": "automata.code_writers.py.py_code_writer.PyCodeWriter.upsert_to_module"
            },
            {
                "query": "What method is used to remove nodes from a module?",
                "result": "automata.code_writers.py.py_code_writer.PyCodeWriter.delete_from_module"
            },
            {
                "query": "What method is used to delete a module from a module dictionary?",
                "result": "automata.code_writers.py.py_code_writer.PyCodeWriter.delete_module"
            },
            {
                "query": "What does the Payload represent in the code?",
                "result": "automata.eval.eval_base.Payload"
            },
            {
                "query": "What function registers an Action subclass in the ACTION_REGISTRY?",
                "result": "automata.eval.eval_base.register_action"
            },
            {
                "query": "What function parses out the corresponding action from a raw dictionary?",
                "result": "automata.eval.eval_base.parse_action_from_payload"
            },
            {
                "query": "What abstract base class represents an arbitrary action to be taken by an LLM?",
                "result": "automata.eval.eval_base.Action"
            },
            {
                "query": "How is the Action object constructed?",
                "result": "automata.eval.eval_base.Action.__init__"
            },
            {
                "query": "What method in the Action class is used to convert the action to a dictionary?",
                "result": "automata.eval.eval_base.Action.to_payload"
            },
            {
                "query": "How can an Action instance be created from a dictionary?",
                "result": "automata.eval.eval_base.Action.from_payload"
            },
            {
                "query": "What abstract base class represents the result of an evaluation?",
                "result": "automata.eval.eval_base.EvalResult"
            },
            {
                "query": "How is the EvalResult object constructed?",
                "result": "automata.eval.eval_base.EvalResult.__init__"
            },
            {
                "query": "What abstract method is used to determine if an evaluation was a full match?",
                "result": "automata.eval.eval_base.EvalResult.is_full_match"
            },
            {
                "query": "What abstract method is used to determine if an evaluation was a partial match?",
                "result": "automata.eval.eval_base.EvalResult.is_partial_match"
            },
            {
                "query": "What abstract method is used to convert an evaluation into a `Payload`?",
                "result": "automata.eval.eval_base.EvalResult.to_payload"
            },
            {
                "query": "How can an EvalResult instance be created from a `Payload`?",
                "result": "automata.eval.eval_base.EvalResult.from_payload"
            },
            {
                "query": "What abstract class is used for evaluating an LLM's performance?",
                "result": "automata.eval.eval_base.Eval"
            },
            {
                "query": "How is an Eval object constructed?",
                "result": "automata.eval.eval_base.Eval.__init__"
            },
            {
                "query": "Which method is used to generate an eval result for a given set of instructions and expected actions?",
                "result": "automata.eval.eval_base.Eval.generate_eval_result"
            },
            {
                "query": "Which method is used to extract a list of action from the given message?",
                "result": "automata.eval.eval_base.Eval.extract_action"
            },
            {
                "query": "Which method is used to filter a list of actions that are relevant to the eval?",
                "result": "automata.eval.eval_base.Eval._filter_actions"
            },
            {
                "query": "What class represents an OpenAI function call action?",
                "result": "automata.eval.agent.openai_function_eval.OpenAIFunctionCallAction"
            },
            {
                "query": "Which method in OpenAIFunctionCallAction is tasked with comparing different instances of the class?",
                "result": "automata.eval.agent.openai_function_eval.OpenAIFunctionCallAction.__eq__"
            },
            {
                "query": "Which method in OpenAIFunctionCallAction generates a unique hash value for each instance?",
                "result": "automata.eval.agent.openai_function_eval.OpenAIFunctionCallAction.__hash__"
            },
            {
                "query": "Which method in OpenAIFunctionCallAction is used to provide a string representation of instances?",
                "result": "automata.eval.agent.openai_function_eval.OpenAIFunctionCallAction.__str__"
            },
            {
                "query": "How can OpenAIFunctionCallAction instances be represented for debugging purposes?",
                "result": "automata.eval.agent.openai_function_eval.OpenAIFunctionCallAction.__repr__"
            },
            {
                "query": "How can an OpenAIFunctionCallAction instance be converted into a storable format or payload?",
                "result": "automata.eval.agent.openai_function_eval.OpenAIFunctionCallAction.to_payload"
            },
            {
                "query": "How can an OpenAIFunctionCallAction instance be recovered from a storable format or payload?",
                "result": "automata.eval.agent.openai_function_eval.OpenAIFunctionCallAction.from_payload"
            },
            {
                "query": "What class evaluates OpenAI messages for function call actions?",
                "result": "automata.eval.agent.openai_function_eval.OpenAIFunctionEval"
            },
            {
                "query": "How is the OpenAIFunctionEval object constructed?",
                "result": "automata.eval.agent.openai_function_eval.OpenAIFunctionEval.__init__"
            },
            {
                "query": "How are OpenAIFunctionEval instances represented for debugging?",
                "result": "automata.eval.agent.openai_function_eval.OpenAIFunctionEval.__repr__"
            },
            {
                "query": "How are actions extracted from messages in the OpenAIFunctionEval class?",
                "result": "automata.eval.agent.openai_function_eval.OpenAIFunctionEval.extract_action"
            },
            {
                "query": "How are non-OpenAIFunctionCallActions filtered out in the OpenAIFunctionEval() class?",
                "result": "automata.eval.agent.openai_function_eval.OpenAIFunctionEval._filter_actions"
            },
            {
                "query": "What class evaluates detailed metrics from a sequence of EvalResults?",
                "result": "automata.eval.agent.agent_eval_metrics.AgentEvaluationMetrics"
            },
            {
                "query": "How is the AgentEvaluationMetrics object constructed?",
                "result": "automata.eval.agent.agent_eval_metrics.AgentEvaluationMetrics.__init__"
            },
            {
                "query": "How does the AgentEvaluationMetrics object represent itself as a string?",
                "result": "automata.eval.agent.agent_eval_metrics.AgentEvaluationMetrics.__str__"
            },
            {
                "query": "How are the total number of full matches calculated?",
                "result": "automata.eval.agent.agent_eval_metrics.AgentEvaluationMetrics.total_full_matches"
            },
            {
                "query": "How are the total number of partial matches calculated?",
                "result": "automata.eval.agent.agent_eval_metrics.AgentEvaluationMetrics.total_partial_matches"
            },
            {
                "query": "How are the total number of actions calculated?",
                "result": "automata.eval.agent.agent_eval_metrics.AgentEvaluationMetrics.total_actions"
            },
            {
                "query": "How are the total number of successful actions calculated?",
                "result": "automata.eval.agent.agent_eval_metrics.AgentEvaluationMetrics.total_successful_actions"
            },
            {
                "query": "What property determines the full match success rate?",
                "result": "automata.eval.agent.agent_eval_metrics.AgentEvaluationMetrics.full_match_rate"
            },
            {
                "query": "What property determines the partial match success rate?",
                "result": "automata.eval.agent.agent_eval_metrics.AgentEvaluationMetrics.partial_match_rate"
            },
            {
                "query": "What property determines the action success rate?",
                "result": "automata.eval.agent.agent_eval_metrics.AgentEvaluationMetrics.action_success_rate"
            },
            {
                "query": "How is the total extra actions calculated?",
                "result": "automata.eval.agent.agent_eval_metrics.AgentEvaluationMetrics.total_extra_actions"
            },
            {
                "query": "What property determines the frequency of extra actions?",
                "result": "automata.eval.agent.agent_eval_metrics.AgentEvaluationMetrics.extra_action_frequency"
            },
            {
                "query": "What property determines the frequency of successful actions?",
                "result": "automata.eval.agent.agent_eval_metrics.AgentEvaluationMetrics.successful_actions_frequency"
            },
            {
                "query": "What property determines the frequency of failed actions?",
                "result": "automata.eval.agent.agent_eval_metrics.AgentEvaluationMetrics.failed_actions_frequency"
            },
            {
                "query": "What class loads a list of tasks from a JSON file?",
                "result": "automata.eval.agent.agent_eval_harness.AgentEvalSetLoader"
            },
            {
                "query": "What method in the AgentEvalSetLoader class loads the JSON file?",
                "result": "automata.eval.agent.agent_eval_harness.AgentEvalSetLoader.load_json"
            },
            {
                "query": "What function is used to recursively convert dictionary values to strings?",
                "result": "automata.eval.agent.agent_eval_harness.create_payload"
            },
            {
                "query": "What function is used to recursively convert strings to dictionaries?",
                "result": "automata.eval.agent.agent_eval_harness.load_payload"
            },
            {
                "query": "What function processes a single task and returns the evaluation results?",
                "result": "automata.eval.agent.agent_eval_harness.process_task"
            },
            {
                "query": "What class evaluates a list of instructions against a list of expected actions?",
                "result": "automata.eval.agent.agent_eval_harness.AgentEvaluationHarness"
            },
            {
                "query": "What method in the AgentEvaluationHarness class checks the evaluation metrics for the given instructions and expected actions?",
                "result": "automata.eval.agent.agent_eval_harness.AgentEvaluationHarness.evaluate"
            },
            {
                "query": "What function aggregates a list of `AgentEvalResult` objects into a single result?",
                "result": "automata.eval.agent.agent_eval_composite.aggregate_agent_result"
            },
            {
                "query": "What function checks that all evaluators are of different types?",
                "result": "automata.eval.agent.agent_eval_composite.check_eval_uniqueness"
            },
            {
                "query": "Which class creates a composite evaluator from a list of evaluator classes?",
                "result": "automata.eval.agent.agent_eval_composite.AgentEvalComposite"
            },
            {
                "query": "What method in `AgentEvalComposite` generates an eval result for a given set of instructions and expected actions?",
                "result": "automata.eval.agent.agent_eval_composite.AgentEvalComposite.generate_eval_result"
            },
            {
                "query": "What method extracts a list of action from the given message in `AgentEvalComposite` class?",
                "result": "automata.eval.agent.agent_eval_composite.AgentEvalComposite.extract_action"
            },
            {
                "query": "Which method filters a list of actions to only contain actions that are relevant to the eval?",
                "result": "automata.eval.agent.agent_eval_composite.AgentEvalComposite._filter_actions"
            },
            {
                "query": "How is the `AgentEvalComposite` object constructed?",
                "result": "automata.eval.agent.agent_eval_composite.AgentEvalComposite.__init__"
            },
            {
                "query": "What exception is raised if there's an error executing the code?",
                "result": "automata.eval.agent.code_writing_eval.CodeExecutionError"
            },
            {
                "query": "What error is thrown when the target variable is not found?",
                "result": "automata.eval.agent.code_writing_eval.VariableNotFoundError"
            },
            {
                "query": "What class represents a concrete action representing written code?",
                "result": "automata.eval.agent.code_writing_eval.CodeWritingAction"
            },
            {
                "query": "What method is used to construct the CodeWritingAction object?",
                "result": "automata.eval.agent.code_writing_eval.CodeWritingAction.__init__"
            },
            {
                "query": "How is the CodeWritingAction hash value determined?",
                "result": "automata.eval.agent.code_writing_eval.CodeWritingAction.__hash__"
            },
            {
                "query": "How is the CodeWritingAction output represented as a string?",
                "result": "automata.eval.agent.code_writing_eval.CodeWritingAction.__repr__"
            },
            {
                "query": "What method is used to convert a CodeWritingAction into a payload?",
                "result": "automata.eval.agent.code_writing_eval.CodeWritingAction.to_payload"
            },
            {
                "query": "How can a CodeWritingAction be created from a payload?",
                "result": "automata.eval.agent.code_writing_eval.CodeWritingAction.from_payload"
            },
            {
                "query": "What utility does the `_extract_snippet` method provide in CodeWritingAction?",
                "result": "automata.eval.agent.code_writing_eval.CodeWritingAction._extract_snippet"
            },
            {
                "query": "What class evaluates an LLM's code writing ability?",
                "result": "automata.eval.agent.code_writing_eval.CodeWritingEval"
            },
            {
                "query": "How is the CodeWritingEval object constructed?",
                "result": "automata.eval.agent.code_writing_eval.CodeWritingEval.__init__"
            },
            {
                "query": "What method extracts the coding action in CodeWritingEval?",
                "result": "automata.eval.agent.code_writing_eval.CodeWritingEval.extract_action"
            },
            {
                "query": "How is a code snippet parsed in CodeWritingEval?",
                "result": "automata.eval.agent.code_writing_eval.CodeWritingEval._parse_code_snippet"
            },
            {
                "query": "What method filters out non-CodeWritingActions in CodeWritingEval?",
                "result": "automata.eval.agent.code_writing_eval.CodeWritingEval._filter_actions"
            },
            {
                "query": "What class is used to write evaluation results to a SQLite database?",
                "result": "automata.eval.agent.agent_eval_database.AgentEvalResultDatabase"
            },
            {
                "query": "What method is used to initialize the AgentEvalResultDatabase?",
                "result": "automata.eval.agent.agent_eval_database.AgentEvalResultDatabase.__init__"
            },
            {
                "query": "What method is used to write an AgentEvalResult instance to the database?",
                "result": "automata.eval.agent.agent_eval_database.AgentEvalResultDatabase.write_result"
            },
            {
                "query": "What method is used to retrieve AgentEvalResult instances from the database?",
                "result": "automata.eval.agent.agent_eval_database.AgentEvalResultDatabase.get_results"
            },
            {
                "query": "What action represents a concrete symbol search?",
                "result": "automata.eval.tool.search_eval.SymbolSearchAction"
            },
            {
                "query": "What is the method used to construct a SymbolSearchAction?",
                "result": "automata.eval.tool.search_eval.SymbolSearchAction.__init__"
            },
            {
                "query": "How is the SymbolSearchAction represented as a string for debugging?",
                "result": "automata.eval.tool.search_eval.SymbolSearchAction.__repr__"
            },
            {
                "query": "What method is used to convert a SymbolSearchAction into a `Payload`?",
                "result": "automata.eval.tool.search_eval.SymbolSearchAction.to_payload"
            },
            {
                "query": "How can a SymbolSearchAction instance be created from a `Payload`?",
                "result": "automata.eval.tool.search_eval.SymbolSearchAction.from_payload"
            },
            {
                "query": "What class represents the result of a symbol search evaluation?",
                "result": "automata.eval.tool.search_eval.SymbolSearchEvalResult"
            },
            {
                "query": "What method is used to construct a SymbolSearchEvalResult?",
                "result": "automata.eval.tool.search_eval.SymbolSearchEvalResult.__init__"
            },
            {
                "query": "How is the SymbolSearchEvalResult represented as a string for debugging?",
                "result": "automata.eval.tool.search_eval.SymbolSearchEvalResult.__repr__"
            },
            {
                "query": "What property is used to determine if a symbol search evaluation was a full match?",
                "result": "automata.eval.tool.search_eval.SymbolSearchEvalResult.is_full_match"
            },
            {
                "query": "What property is used to determine if a symbol search evaluation was a partial match?",
                "result": "automata.eval.tool.search_eval.SymbolSearchEvalResult.is_partial_match"
            },
            {
                "query": "What method is used to convert a SymbolSearchEvalResult into a `Payload`?",
                "result": "automata.eval.tool.search_eval.SymbolSearchEvalResult.to_payload"
            },
            {
                "query": "How can a SymbolSearchEvalResult instance be created from a `Payload`?",
                "result": "automata.eval.tool.search_eval.SymbolSearchEvalResult.from_payload"
            },
            {
                "query": "What class is used to evaluate an LLM's symbol searching ability?",
                "result": "automata.eval.tool.search_eval.SymbolSearchEval"
            },
            {
                "query": "What method is used to extract the search action in a SymbolSearchEval?",
                "result": "automata.eval.tool.search_eval.SymbolSearchEval.extract_action"
            },
            {
                "query": "How is a ToolEvalResult generated in a SymbolSearchEval?",
                "result": "automata.eval.tool.search_eval.SymbolSearchEval.to_tool_result"
            },
            {
                "query": "Which class is used to evaluate detailed metrics from a sequence of ToolEvalResults?",
                "result": "automata.eval.tool.tool_eval_metrics.ToolEvaluationMetrics"
            },
            {
                "query": "How is the ToolEvaluationMetrics object constructed?",
                "result": "automata.eval.tool.tool_eval_metrics.ToolEvaluationMetrics.__init__"
            },
            {
                "query": "What property is used to retrieve the total number of evaluations?",
                "result": "automata.eval.tool.tool_eval_metrics.ToolEvaluationMetrics.total_evaluations"
            },
            {
                "query": "What property is used to retrieve the total number of full matches?",
                "result": "automata.eval.tool.tool_eval_metrics.ToolEvaluationMetrics.total_full_matches"
            },
            {
                "query": "What property is used to retrieve the total number of partial matches?",
                "result": "automata.eval.tool.tool_eval_metrics.ToolEvaluationMetrics.total_partial_matches"
            },
            {
                "query": "What property is used to determine the full match rate?",
                "result": "automata.eval.tool.tool_eval_metrics.ToolEvaluationMetrics.full_match_rate"
            },
            {
                "query": "What property is used to determine the partial match rate?",
                "result": "automata.eval.tool.tool_eval_metrics.ToolEvaluationMetrics.partial_match_rate"
            },
            {
                "query": "How is the ToolEvaluationMetrics object represented as a string?",
                "result": "automata.eval.tool.tool_eval_metrics.ToolEvaluationMetrics.__str__"
            },
            {
                "query": "Which class is used for loading a list of function calls and their expected actions from a JSON file?",
                "result": "automata.eval.tool.tool_eval_harness.ToolEvalSetLoader"
            },
            {
                "query": "What method loads JSON data from the given file in ToolEvalSetLoader?",
                "result": "automata.eval.tool.tool_eval_harness.ToolEvalSetLoader.load_json"
            },
            {
                "query": "What method in ToolEvalSetLoader formats values throughout a dictionary?",
                "result": "automata.eval.tool.tool_eval_harness.ToolEvalSetLoader.format_values"
            },
            {
                "query": "What method constructs a ToolEvalSetLoader instance?",
                "result": "automata.eval.tool.tool_eval_harness.ToolEvalSetLoader.__init__"
            },
            {
                "query": "What is the exception raised for errors during JSON loading?",
                "result": "automata.eval.tool.tool_eval_harness.EvalLoadingError"
            },
            {
                "query": "Which class evaluates a list of function calls against a list of expected actions?",
                "result": "automata.eval.tool.tool_eval_harness.ToolEvaluationHarness"
            },
            {
                "query": "Which method conducts the evaluation process in the ToolEvaluationHarness?",
                "result": "automata.eval.tool.tool_eval_harness.ToolEvaluationHarness.evaluate"
            },
            {
                "query": "Which method initializes the ToolEvaluationHarness?",
                "result": "automata.eval.tool.tool_eval_harness.ToolEvaluationHarness.__init__"
            },
            {
                "query": "What is the exception raised for errors during evaluation execution?",
                "result": "automata.eval.tool.tool_eval_harness.EvalExecutionError"
            },
            {
                "query": "Which abstract class represents the result of a tool evaluation?",
                "result": "automata.eval.tool.tool_eval.ToolEvalResult"
            },
            {
                "query": "How is a ToolEvalResult object constructed?",
                "result": "automata.eval.tool.tool_eval.ToolEvalResult.__init__"
            },
            {
                "query": "What abstract class is used for evaluating tools' performance?",
                "result": "automata.eval.tool.tool_eval.ToolEval"
            },
            {
                "query": "Which method generates a tool evaluation result?",
                "result": "automata.eval.tool.tool_eval.ToolEval.generate_eval_result"
            },
            {
                "query": "What abstract method is used to extract action from an input action tuple?",
                "result": "automata.eval.tool.tool_eval.ToolEval.extract_action"
            },
            {
                "query": "What function is used to filter actions in the context of ToolEval?",
                "result": "automata.eval.tool.tool_eval.ToolEval._filter_actions"
            },
            {
                "query": "Which abstract method is used to convert the evaluation result to a `ToolEvalResult`?",
                "result": "automata.eval.tool.tool_eval.ToolEval.to_tool_result"
            },
            {
                "query": "What interface provides an embedding lookup?",
                "result": "automata.symbol_embedding.vector_databases.IEmbeddingLookupProvider"
            },
            {
                "query": "Which method creates a hashable key from a Symbol?",
                "result": "automata.symbol_embedding.vector_databases.IEmbeddingLookupProvider.embedding_to_key"
            },
            {
                "query": "What class is used to create a vector database that saves into a Chroma db?",
                "result": "automata.symbol_embedding.vector_databases.ChromaSymbolEmbeddingVectorDatabase"
            },
            {
                "query": "How to get all database keys in a sorted order?",
                "result": "automata.symbol_embedding.vector_databases.ChromaSymbolEmbeddingVectorDatabase.get_ordered_keys"
            },
            {
                "query": "How to get all entries in the database in a sorted order?",
                "result": "automata.symbol_embedding.vector_databases.ChromaSymbolEmbeddingVectorDatabase.get_all_ordered_embeddings"
            },
            {
                "query": "What method is used to add a new entry to the collection?",
                "result": "automata.symbol_embedding.vector_databases.ChromaSymbolEmbeddingVectorDatabase.add"
            },
            {
                "query": "Which method is used to add multiple entries to the collection?",
                "result": "automata.symbol_embedding.vector_databases.ChromaSymbolEmbeddingVectorDatabase.batch_add"
            },
            {
                "query": "Which method is used to update an entry in the database?",
                "result": "automata.symbol_embedding.vector_databases.ChromaSymbolEmbeddingVectorDatabase.update_entry"
            },
            {
                "query": "What method is used to update multiple entries in the database?",
                "result": "automata.symbol_embedding.vector_databases.ChromaSymbolEmbeddingVectorDatabase.batch_update"
            },
            {
                "query": "Which method is used to get an entry from the database using a key?",
                "result": "automata.symbol_embedding.vector_databases.ChromaSymbolEmbeddingVectorDatabase.get"
            },
            {
                "query": "Which method is used to get multiple entries from the database using keys?",
                "result": "automata.symbol_embedding.vector_databases.ChromaSymbolEmbeddingVectorDatabase.batch_get"
            },
            {
                "query": "Which class provides a vector database that saves into a JSON file?",
                "result": "automata.symbol_embedding.vector_databases.JSONSymbolEmbeddingVectorDatabase"
            },
            {
                "query": "Which method is used to get all keys in the database sorted?",
                "result": "automata.symbol_embedding.vector_databases.JSONSymbolEmbeddingVectorDatabase.get_ordered_keys"
            },
            {
                "query": "Which method is used to get all entries in the database sorted?",
                "result": "automata.symbol_embedding.vector_databases.JSONSymbolEmbeddingVectorDatabase.get_all_ordered_embeddings"
            },
            {
                "query": "Which class is responsible for building `Symbol` source code embeddings?",
                "result": "automata.symbol_embedding.symbol_embedding_builders.SymbolCodeEmbeddingBuilder"
            },
            {
                "query": "Which method from `SymbolCodeEmbeddingBuilder` builds the embedding for a symbol's source code?",
                "result": "automata.symbol_embedding.symbol_embedding_builders.SymbolCodeEmbeddingBuilder.build"
            },
            {
                "query": "Which method from `SymbolCodeEmbeddingBuilder` builds embeddings for a list of symbols' source code?",
                "result": "automata.symbol_embedding.symbol_embedding_builders.SymbolCodeEmbeddingBuilder.batch_build"
            },
            {
                "query": "Which class is responsible for building `Symbol` documentation embeddings?",
                "result": "automata.symbol_embedding.symbol_embedding_builders.SymbolDocEmbeddingBuilder"
            },
            {
                "query": "In `SymbolDocEmbeddingBuilder`, how is the embedding for a symbol's documentation built?",
                "result": "automata.symbol_embedding.symbol_embedding_builders.SymbolDocEmbeddingBuilder.build"
            },
            {
                "query": "In `SymbolDocEmbeddingBuilder`, how is the embedding for a non-class type symbol's documentation built?",
                "result": "automata.symbol_embedding.symbol_embedding_builders.SymbolDocEmbeddingBuilder.build_non_class"
            },
            {
                "query": "In `SymbolDocEmbeddingBuilder`, how is the summary for a class document built?",
                "result": "automata.symbol_embedding.symbol_embedding_builders.SymbolDocEmbeddingBuilder._build_class_document_summary"
            },
            {
                "query": "In `SymbolDocEmbeddingBuilder`, how is the document for a class symbol built?",
                "result": "automata.symbol_embedding.symbol_embedding_builders.SymbolDocEmbeddingBuilder._build_class_document"
            },
            {
                "query": "In `SymbolDocEmbeddingBuilder`, how is the prompt for a symbol documentation generation built?",
                "result": "automata.symbol_embedding.symbol_embedding_builders.SymbolDocEmbeddingBuilder._build_prompt"
            },
            {
                "query": "In `SymbolDocEmbeddingBuilder`, how is a search list generated?",
                "result": "automata.symbol_embedding.symbol_embedding_builders.SymbolDocEmbeddingBuilder._generate_search_list"
            },
            {
                "query": "Which method from `SymbolDocEmbeddingBuilder` is not yet implemented?",
                "result": "automata.symbol_embedding.symbol_embedding_builders.SymbolDocEmbeddingBuilder.batch_build"
            },
            {
                "query": "What abstract class is designed for symbol code embeddings?",
                "result": "automata.symbol_embedding.symbol_embedding_base.SymbolEmbedding"
            },
            {
                "query": "Which method is used to initialize a SymbolEmbedding?",
                "result": "automata.symbol_embedding.symbol_embedding_base.SymbolEmbedding.__init__"
            },
            {
                "query": "How is a SymbolEmbedding 'stringified'?",
                "result": "automata.symbol_embedding.symbol_embedding_base.SymbolEmbedding.__str__"
            },
            {
                "query": "What property is used to access the symbol of SymbolEmbedding?",
                "result": "automata.symbol_embedding.symbol_embedding_base.SymbolEmbedding.symbol"
            },
            {
                "query": "How can metadata be accessed in a SymbolEmbedding?",
                "result": "automata.symbol_embedding.symbol_embedding_base.SymbolEmbedding.metadata"
            },
            {
                "query": "How can a SymbolEmbedding instance be created from known arguments?",
                "result": "automata.symbol_embedding.symbol_embedding_base.SymbolEmbedding.from_args"
            },
            {
                "query": "What concrete class is designed for symbol code embeddings?",
                "result": "automata.symbol_embedding.symbol_embedding_base.SymbolCodeEmbedding"
            },
            {
                "query": "How is a SymbolCodeEmbedding 'stringified'?",
                "result": "automata.symbol_embedding.symbol_embedding_base.SymbolCodeEmbedding.__str__"
            },
            {
                "query": "How can metadata be accessed in a SymbolCodeEmbedding?",
                "result": "automata.symbol_embedding.symbol_embedding_base.SymbolCodeEmbedding.metadata"
            },
            {
                "query": "What concrete class is designed for symbol document embeddings?",
                "result": "automata.symbol_embedding.symbol_embedding_base.SymbolDocEmbedding"
            },
            {
                "query": "How is a SymbolDocEmbedding 'stringified'?",
                "result": "automata.symbol_embedding.symbol_embedding_base.SymbolDocEmbedding.__str__"
            },
            {
                "query": "How can metadata be accessed in a SymbolDocEmbedding?",
                "result": "automata.symbol_embedding.symbol_embedding_base.SymbolDocEmbedding.metadata"
            },
            {
                "query": "Which class in the module is responsible for handling the embedding of symbols?",
                "result": "automata.symbol_embedding.symbol_embedding_handler.SymbolEmbeddingHandler"
            },
            {
                "query": "How is the SymbolEmbeddingHandler object constructed?",
                "result": "automata.symbol_embedding.symbol_embedding_handler.SymbolEmbeddingHandler.__init__"
            },
            {
                "query": "Which method in SymbolEmbeddingHandler is used to process the embedding for a symbol?",
                "result": "automata.symbol_embedding.symbol_embedding_handler.SymbolEmbeddingHandler.process_embedding"
            },
            {
                "query": "How does the SymbolEmbeddingHandler get the embeddings for a list of symbols?",
                "result": "automata.symbol_embedding.symbol_embedding_handler.SymbolEmbeddingHandler.get_embeddings"
            },
            {
                "query": "How does the SymbolEmbeddingHandler get the embeddings for all symbols in the database?",
                "result": "automata.symbol_embedding.symbol_embedding_handler.SymbolEmbeddingHandler.get_all_ordered_embeddings"
            },
            {
                "query": "What method in the SymbolEmbeddingHandler is used to perform any remaining updates that do not form a complete batch?",
                "result": "automata.symbol_embedding.symbol_embedding_handler.SymbolEmbeddingHandler.flush"
            },
            {
                "query": "What method is used in SymbolEmbeddingHandler to get the sorted supported symbols?",
                "result": "automata.symbol_embedding.symbol_embedding_handler.SymbolEmbeddingHandler._get_sorted_supported_symbols"
            },
            {
                "query": "How does the SymbolEmbeddingHandler filter the symbols?",
                "result": "automata.symbol_embedding.symbol_embedding_handler.SymbolEmbeddingHandler.filter_symbols"
            }
        ]
    }
]