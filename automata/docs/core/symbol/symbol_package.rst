SymbolPackage
=============

``SymbolPackage`` is a class that wraps the package component of the URI
in the Symbol context, which aids in the identification of classes,
methods, or local variables. The primary methods available for the class
are ``__repr__`` and ``unparse``. This class is used by the ``Symbol``
class to represent a portion of the standardized string representation
for symbols.

Overview
--------

``SymbolPackage`` provides a convenient way to hold the package and its
management information when working with ``Symbol`` representations. It
also allows for converting back and forth between ``SymbolPackage``
object instances and pip package expressions.

Related Symbols
---------------

-  ``automata.core.symbol.symbol_types.Symbol``
-  ``automata.core.symbol.parser.parse_symbol``
-  ``automata.tests.unit.test_symbol_parser.test_parse_symbol``

Example
-------

To understand how ``SymbolPackage`` interacts with ``Symbol`` and how
it’s used, observe the test_parse_symbol method from the
test_symbol_parser:

.. code:: python

   from automata.core.symbol.parser import parse_symbol

   def test_parse_symbol(symbols):
       for symbol in symbols:
           assert symbol.scheme == "scip-python"
           assert symbol.package.manager == "python"
           assert symbol.package.name == "automata"
           assert symbol.package.version == "75482692a6fe30c72db516201a6f47d9fb4af065"
           assert len(symbol.descriptors) > 0

By using ``parse_symbol``, we can see how ``SymbolPackage`` is accessed
from ``Symbol`` instances in the test case for verifying the package
manager, package name, and package version.

Limitations
-----------

The primary limitation of ``SymbolPackage`` is that it’s specific to URI
strings generated by the Symbol system. It may not be useful outside of
the Symbol context or for URI strings not following the Symbol
standardized string representation.

Follow-up Questions:
--------------------

-  Are there any edge cases not covered by the current implementation of
   ``SymbolPackage`` and its provided methods?
