SymbolDocEmbeddingBuilder
=========================

``SymbolDocEmbeddingBuilder`` is designed to build an embedding for a
symbolâ€™s documentation. It accepts the ``EmbeddingProvider``,
``LLMChatCompletionProvider``, ``SymbolSearch``, and
``PyContextRetriever`` in order to generate the documentation.

Import Statements
-----------------

.. code:: python

   import logging
   from typing import List
   from jinja2 import Template
   from automata.config.prompt.doc_generation import DEFAULT_DOC_GENERATION_PROMPT
   from automata.core.base.database.vector import VectorDatabaseProvider
   from automata.core.context.py.retriever import PyContextRetriever
   from automata.core.llm.completion import LLMChatCompletionProvider
   from automata.core.llm.core import (
       EmbeddingProvider,
       SymbolEmbeddingBuilder,
       SymbolEmbeddingHandler,
   )
   from automata.core.base.symbol import Symbol
   from automata.core.base.symbol_embedding import SymbolDocEmbedding
   from automata.core.symbol.search.symbol_search import SymbolSearch

Example
-------

Here we will walk through an example of how to use the
``SymbolDocEmbeddingBuilder`` class.

.. code:: python

   from automata.core.memory_store.symbol_doc_embedding import SymbolDocEmbeddingBuilder
   from automata.core.llm.core import EmbeddingProvider
   from automata.core.llm.completion import LLMChatCompletionProvider
   from automata.core.context.py.retriever import PyContextRetriever
   from automata.core.symbol.search.symbol_search import SymbolSearch
   from automata.core.base.symbol import Symbol

   # create instances of the dependent classes
   embedding_provider = EmbeddingProvider()
   completion_provider = LLMChatCompletionProvider()
   symbol_search = SymbolSearch()
   retriever = PyContextRetriever()

   # create an instance of SymbolDocEmbeddingBuilder
   embedding_builder = SymbolDocEmbeddingBuilder(
       embedding_provider=embedding_provider,
       completion_provider=completion_provider,
       symbol_search=symbol_search,
       retriever=retriever,
   )

   # to build an embedding for a symbol's documentation
   symbol = Symbol.from_string('sample_symbol')
   source_code = 'def sample_symbol(): pass'

   symbol_doc_embedding = embedding_builder.build(source_code, symbol)

Signature
---------

The documentation embedding is generated by the ``build`` function with
the following signature:

.. code:: python

   def build(self, source_code: str, symbol: Symbol) -> SymbolDocEmbedding

Where, the ``source_code`` argument holds the pythonic source code of
the symbol and ``symbol`` is the instance of the ``Symbol`` for which
the documentation embedding is needed.

Return
------

It returns the created document object which is an instance of the class
``SymbolDocEmbedding``.

Limitations
-----------

The current implementation of ``SymbolDocEmbeddingBuilder`` relies
heavily on the passed instances of ``EmbeddingProvider``,
``LLMChatCompletionProvider``, ``SymbolSearch``, and
``PyContextRetriever``. Any misconfigurations on these instances could
result in improper documentation embedding generation.

Follow-up Questions:
--------------------

1. How to configure and use different Embedding providers effectively?
2. What are the best practices for generating efficient symbol
   documentation embeddings?
3. How to handle erros gracefully during documentation embedding
   generation?
