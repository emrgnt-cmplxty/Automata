{"task_id": "HumanEval/0", "completion": "\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers)-1):\n        if abs(numbers[i+1] - numbers[i]) < threshold:\n            return True\n    return False\n", "raw_completion": "```python\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers)-1):\n        if abs(numbers[i+1] - numbers[i]) < threshold:\n            return True\n    return False\n```"}
{"task_id": "HumanEval/1", "completion": "\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    temp = \"\"\n    count = 0\n    for char in paren_string.replace(\" \", \"\"):\n        if char == \"(\":\n            temp += char\n            count += 1\n        else:  # char == \")\"\n            count -= 1\n            temp += char\n            if count == 0:\n                result.append(temp)\n                temp = \"\"\n    return result\n", "raw_completion": "```python\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    temp = \"\"\n    count = 0\n    for char in paren_string.replace(\" \", \"\"):\n        if char == \"(\":\n            temp += char\n            count += 1\n        else:  # char == \")\"\n            count -= 1\n            temp += char\n            if count == 0:\n                result.append(temp)\n                temp = \"\"\n    return result\n```"}
{"task_id": "HumanEval/10", "completion": "\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]\n", "raw_completion": "```python\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]\n```"}
{"task_id": "HumanEval/100", "completion": "\ndef make_a_pile(n):\n    pile = [n]\n    for i in range(2, n+1):\n        if n % 2 == 0:\n            pile.append((n//2+i-1)*2)\n        else:\n            pile.append(n//2+i)\n    return pile\n", "raw_completion": "```python\ndef make_a_pile(n):\n    pile = [n]\n    for i in range(2, n+1):\n        if n % 2 == 0:\n            pile.append((n//2+i-1)*2)\n        else:\n            pile.append(n//2+i)\n    return pile\n```\n"}
{"task_id": "HumanEval/101", "completion": "\ndef words_string(s):\n    return s.replace(\",\", \" \").split()\n", "raw_completion": "```python\ndef words_string(s):\n    return s.replace(\",\", \" \").split()\n```"}
{"task_id": "HumanEval/102", "completion": "\ndef choose_num(x, y):\n    nums = [i for i in range(x, y + 1) if i % 2 == 0]\n    return max(nums) if nums else -1\n", "raw_completion": "```python\ndef choose_num(x, y):\n    nums = [i for i in range(x, y + 1) if i % 2 == 0]\n    return max(nums) if nums else -1\n```\n"}
{"task_id": "HumanEval/103", "completion": "\ndef rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1))/float(m-n+1))\n    return bin(avg)\n", "raw_completion": "```python\ndef rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1))/float(m-n+1))\n    return bin(avg)\n```"}
{"task_id": "HumanEval/104", "completion": "\ndef unique_digits(x):\n    return sorted(list(filter(lambda num: all(int(dig) % 2 for dig in str(num)), x))))\n", "raw_completion": "```python\ndef unique_digits(x):\n    return sorted(list(filter(lambda num: all(int(dig) % 2 for dig in str(num)), x))))\n```"}
{"task_id": "HumanEval/105", "completion": "\ndef by_length(arr):\n    names = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [x for x in arr if 0 < x < 10]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    return [names[x] for x in reversed_arr]\n", "raw_completion": "```python\ndef by_length(arr):\n    names = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [x for x in arr if 0 < x < 10]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    return [names[x] for x in reversed_arr]\n```"}
{"task_id": "HumanEval/106", "completion": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i + 1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result\n", "raw_completion": "```python\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i + 1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result\n```"}
{"task_id": "HumanEval/107", "completion": "\ndef even_odd_palindrome(n):\n    evenCount = 0\n    oddCount = 0\n    for i in range(1, n+1):\n        temp = str(i)\n        if temp == temp[::-1]:\n            if i % 2 == 0:\n                evenCount += 1\n            else:\n                oddCount += 1\n    return (evenCount, oddCount)\n", "raw_completion": "```python\ndef even_odd_palindrome(n):\n    evenCount = 0\n    oddCount = 0\n    for i in range(1, n+1):\n        temp = str(i)\n        if temp == temp[::-1]:\n            if i % 2 == 0:\n                evenCount += 1\n            else:\n                oddCount += 1\n    return (evenCount, oddCount)\n```"}
{"task_id": "HumanEval/108", "completion": "\ndef count_nums(arr):\n    return sum([1 for num in arr if sum(int(digit) for digit in str(num) if not digit == \"-\") > 0])\n", "raw_completion": "```python\ndef count_nums(arr):\n    return sum([1 for num in arr if sum(int(digit) for digit in str(num) if not digit == \"-\") > 0])\n```"}
{"task_id": "HumanEval/109", "completion": "\ndef move_one_ball(arr):\n    if len(arr) <= 1:\n        return True\n    \n    min_index = arr.index(min(arr))\n    sorted_arr = sorted(arr)\n    shifts = min_index\n    \n    for i in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        \n        arr = [arr[-1]] + arr[:-1]\n        shifts += 1\n        \n    return False\n", "raw_completion": "```python\ndef move_one_ball(arr):\n    if len(arr) <= 1:\n        return True\n    \n    min_index = arr.index(min(arr))\n    sorted_arr = sorted(arr)\n    shifts = min_index\n    \n    for i in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        \n        arr = [arr[-1]] + arr[:-1]\n        shifts += 1\n        \n    return False\n```"}
{"task_id": "HumanEval/11", "completion": "\ndef string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n", "raw_completion": "```python\ndef string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n```"}
{"task_id": "HumanEval/110", "completion": "\ndef exchange(lst1, lst2):\n    even_lst1 = [x for x in lst1 if x % 2 == 0]\n    odd_lst2 = [x for x in lst2 if x % 2 != 0]\n    if len(even_lst1) == len(lst1):\n        return \"YES\"\n    elif len(even_lst1) == len(lst1) - len(odd_lst2):\n        return \"YES\"\n    else:\n        return \"NO\"\n", "raw_completion": "```python\ndef exchange(lst1, lst2):\n    even_lst1 = [x for x in lst1 if x % 2 == 0]\n    odd_lst2 = [x for x in lst2 if x % 2 != 0]\n    if len(even_lst1) == len(lst1):\n        return \"YES\"\n    elif len(even_lst1) == len(lst1) - len(odd_lst2):\n        return \"YES\"\n    else:\n        return \"NO\"\n```"}
{"task_id": "HumanEval/111", "completion": "\ndef histogram(test):\n    count = {}\n    for char in test.split():\n        if char not in count:\n            count[char] = 1\n        else:\n            count[char] += 1\n            \n    max_count = max(count.values())\n    result = {}\n    for char, freq in count.items():\n        if freq == max_count:\n            result[char] = freq\n            \n    return result\n", "raw_completion": "```python\ndef histogram(test):\n    count = {}\n    for char in test.split():\n        if char not in count:\n            count[char] = 1\n        else:\n            count[char] += 1\n            \n    max_count = max(count.values())\n    result = {}\n    for char, freq in count.items():\n        if freq == max_count:\n            result[char] = freq\n            \n    return result\n```"}
{"task_id": "HumanEval/112", "completion": "\ndef reverse_delete(s, c):\n    res = \"\"\n    for char in s:\n        if char not in c:\n            res += char\n    return (res, res == res[::-1])\n", "raw_completion": "```python\ndef reverse_delete(s, c):\n    res = \"\"\n    for char in s:\n        if char not in c:\n            res += char\n    return (res, res == res[::-1])\n```"}
{"task_id": "HumanEval/113", "completion": "\ndef odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(1 for digit in string if int(digit)%2!=0),i+1,string,i+1) for i,string in enumerate(lst)]\n", "raw_completion": "```python\ndef odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(1 for digit in string if int(digit)%2!=0),i+1,string,i+1) for i,string in enumerate(lst)]\n```"}
{"task_id": "HumanEval/114", "completion": "\nimport math\n\ndef minSubArraySum(nums):\n    curr_sum = 0\n    min_sum = math.inf\n    for num in nums:\n        curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n        curr_sum = max(0, curr_sum)\n    return min_sum\n", "raw_completion": "```python\nimport math\n\ndef minSubArraySum(nums):\n    curr_sum = 0\n    min_sum = math.inf\n    for num in nums:\n        curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n        curr_sum = max(0, curr_sum)\n    return min_sum\n```"}
{"task_id": "HumanEval/115", "completion": "\ndef max_fill(grid, bucket_capacity):\n    wells = [sum(row) for row in grid]  # count the water units in each well\n    total_water = sum(wells)  # total water in all wells\n    if bucket_capacity >= total_water:  # if bucket can hold all water, no lowering needed\n        return 0\n    num_buckets = math.ceil(total_water / bucket_capacity)  # number of buckets needed\n    water_per_bucket = math.ceil(total_water / num_buckets)  # amount of water each bucket needs to hold\n    num_lowering = 0  # initialize lowering count\n    while wells:  # while there are still wells with water\n        remaining = bucket_capacity  # remaining capacity in current bucket\n        while remaining > 0:  # while current bucket has remaining capacity\n            if not wells:  # if no more wells with water\n                break\n            current_well = wells.pop(0)  # take the next well with water\n            if current_well <= remaining:  # if remaining capacity can hold all water in well\n                remaining -= current_well  # fill bucket to capacity, no lowering needed\n            else:\n                num_lowering += 1  # if not enough capacity, lower bucket\n                remaining = bucket_capacity - current_well  # new bucket capacity with remaining water from well\n        num_lowering += 1  # increment lowering count for each full bucket\n    return num_lowering - 1  # remove extra lowering for the last empty bucket\n", "raw_completion": "```python\ndef max_fill(grid, bucket_capacity):\n    wells = [sum(row) for row in grid]  # count the water units in each well\n    total_water = sum(wells)  # total water in all wells\n    if bucket_capacity >= total_water:  # if bucket can hold all water, no lowering needed\n        return 0\n    num_buckets = math.ceil(total_water / bucket_capacity)  # number of buckets needed\n    water_per_bucket = math.ceil(total_water / num_buckets)  # amount of water each bucket needs to hold\n    num_lowering = 0  # initialize lowering count\n    while wells:  # while there are still wells with water\n        remaining = bucket_capacity  # remaining capacity in current bucket\n        while remaining > 0:  # while current bucket has remaining capacity\n            if not wells:  # if no more wells with water\n                break\n            current_well = wells.pop(0)  # take the next well with water\n            if current_well <= remaining:  # if remaining capacity can hold all water in well\n                remaining -= current_well  # fill bucket to capacity, no lowering needed\n            else:\n                num_lowering += 1  # if not enough capacity, lower bucket\n                remaining = bucket_capacity - current_well  # new bucket capacity with remaining water from well\n        num_lowering += 1  # increment lowering count for each full bucket\n    return num_lowering - 1  # remove extra lowering for the last empty bucket\n```"}
{"task_id": "HumanEval/116", "completion": "\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n", "raw_completion": "```python\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n```"}
{"task_id": "HumanEval/117", "completion": "\ndef select_words(s, n):\n    if not s:\n        return []\n    words = s.split()\n    consonants = set(['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'])\n    result = []\n    for word in words:\n        count = 0\n        for letter in word:\n            if letter.lower() in consonants:\n                count += 1\n        if count == n:\n            result.append(word)\n    return result\n", "raw_completion": "```python\ndef select_words(s, n):\n    if not s:\n        return []\n    words = s.split()\n    consonants = set(['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'])\n    result = []\n    for word in words:\n        count = 0\n        for letter in word:\n            if letter.lower() in consonants:\n                count += 1\n        if count == n:\n            result.append(word)\n    return result\n```"}
{"task_id": "HumanEval/118", "completion": "\ndef get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    word = word.strip(consonants)[1:-1]\n    if not word:\n        return \"\"\n    closest_vowel = min([abs(vowels.index(letter) - len(word)) for letter in word])\n    return word[len(word) - closest_vowel - 1]\n", "raw_completion": "```python\ndef get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    word = word.strip(consonants)[1:-1]\n    if not word:\n        return \"\"\n    closest_vowel = min([abs(vowels.index(letter) - len(word)) for letter in word])\n    return word[len(word) - closest_vowel - 1]\n```"}
{"task_id": "HumanEval/119", "completion": "\ndef match_parens(lst):\n    if lst[0].count('(') == lst[0].count(')') and lst[1].count('(') == lst[1].count(')'):\n        return 'Yes'\n    elif lst[0].count('(') + lst[1].count('(') == lst[0].count(')') + lst[1].count(')'):\n        return 'Yes'\n    else:\n        return 'No'\n", "raw_completion": "```python\ndef match_parens(lst):\n    if lst[0].count('(') == lst[0].count(')') and lst[1].count('(') == lst[1].count(')'):\n        return 'Yes'\n    elif lst[0].count('(') + lst[1].count('(') == lst[0].count(')') + lst[1].count(')'):\n        return 'Yes'\n    else:\n        return 'No'\n```"}
{"task_id": "HumanEval/12", "completion": "\ndef longest(strings: List[str]) -> Optional[str]:\n    return max(strings, key=len) if strings else None\n", "raw_completion": "```python\ndef longest(strings: List[str]) -> Optional[str]:\n    return max(strings, key=len) if strings else None\n```"}
{"task_id": "HumanEval/120", "completion": "\ndef maximum(arr, k):\n    return sorted(arr)[-k:]\n", "raw_completion": "```python\ndef maximum(arr, k):\n    return sorted(arr)[-k:]\n```"}
{"task_id": "HumanEval/121", "completion": "\ndef solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)\n", "raw_completion": "```python\ndef solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)\n```"}
{"task_id": "HumanEval/122", "completion": "\ndef add_elements(arr, k):\n    return sum([x for x in arr[:k] if abs(x) < 100])\n", "raw_completion": "```python\ndef add_elements(arr, k):\n    return sum([x for x in arr[:k] if abs(x) < 100])\n```"}
{"task_id": "HumanEval/123", "completion": "\n\ndef get_odd_collatz(n):\n    c = n\n    collatz = []\n    while True:\n        collatz.append(c)\n        if c == 1:\n            break\n        if c % 2 == 0:\n            c = c // 2\n        else:\n            c = 3 * c + 1\n    return sorted(list(set(collatz) & set(filter(lambda x: x % 2 == 1, collatz)))))\n", "raw_completion": "```python\n\ndef get_odd_collatz(n):\n    c = n\n    collatz = []\n    while True:\n        collatz.append(c)\n        if c == 1:\n            break\n        if c % 2 == 0:\n            c = c // 2\n        else:\n            c = 3 * c + 1\n    return sorted(list(set(collatz) & set(filter(lambda x: x % 2 == 1, collatz)))))\n```"}
{"task_id": "HumanEval/124", "completion": "\ndef valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n                if day < 1 or day > 29:\n                    return False\n            else:\n                if day < 1 or day > 28:\n                    return False\n        else:\n            return False\n        return True\n    except:\n        return False\n", "raw_completion": "```python\ndef valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n                if day < 1 or day > 29:\n                    return False\n            else:\n                if day < 1 or day > 28:\n                    return False\n        else:\n            return False\n        return True\n    except:\n        return False\n```"}
{"task_id": "HumanEval/125", "completion": "\ndef split_words(txt):\n    return txt.split() if ' ' in txt else txt.split(',') if ',' in txt else sum(1 for c in txt if c.islower() and ord(c) % 2 == 1)\n", "raw_completion": "```python\ndef split_words(txt):\n    return txt.split() if ' ' in txt else txt.split(',') if ',' in txt else sum(1 for c in txt if c.islower() and ord(c) % 2 == 1)\n```"}
{"task_id": "HumanEval/126", "completion": "\ndef is_sorted(lst):\n    return lst == sorted(set(lst)) and lst == sorted(lst)\n", "raw_completion": "```python\ndef is_sorted(lst):\n    return lst == sorted(set(lst)) and lst == sorted(lst)\n```"}
{"task_id": "HumanEval/127", "completion": "\nimport math\n\ndef intersection(interval1, interval2):\n    intersection = [max(interval1[0], interval2[0]), min(interval1[1], interval2[1])]\n    if intersection[0] > intersection[1]:\n        return \"NO\"\n\n    length = intersection[1] - intersection[0] + 1\n    if length == 1:\n        return \"NO\"\n    for i in range(2, int(math.sqrt(length))+1):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\"\n", "raw_completion": "```python\nimport math\n\ndef intersection(interval1, interval2):\n    intersection = [max(interval1[0], interval2[0]), min(interval1[1], interval2[1])]\n    if intersection[0] > intersection[1]:\n        return \"NO\"\n\n    length = intersection[1] - intersection[0] + 1\n    if length == 1:\n        return \"NO\"\n    for i in range(2, int(math.sqrt(length))+1):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\"\n```"}
{"task_id": "HumanEval/128", "completion": "\nfrom functools import reduce \n\ndef prod_signs(arr):\n    if len(arr) == 0:\n        return None\n    sign_product = reduce(lambda x, y: x * y, [1 if x > 0 else (-1 if x < 0 else 0) for x in arr])\n    return sum([abs(x) for x in arr]) * sign_product\n", "raw_completion": "```python\nfrom functools import reduce \n\ndef prod_signs(arr):\n    if len(arr) == 0:\n        return None\n    sign_product = reduce(lambda x, y: x * y, [1 if x > 0 else (-1 if x < 0 else 0) for x in arr])\n    return sum([abs(x) for x in arr]) * sign_product\n```"}
{"task_id": "HumanEval/129", "completion": "\ndef minPath(grid, k):\n    n = len(grid)\n    heap = [(grid[i][0], [(i, 0)], set([grid[i][0]])) for i in range(n)]\n    directions = [(0,1), (0,-1), (1,0), (-1,0)]\n    while heap:\n        _, path, visited = heappop(heap)\n        if len(path) == k:\n            return [grid[i][j] for i,j in path]\n        for di,dj in directions:\n            i,j = path[-1][0]+di, path[-1][1]+dj\n            if i < 0 or i >= n or j < 0 or j >= n or grid[i][j] in visited:\n                continue\n            new_path = path+[(i,j)]\n            heappush(heap, (grid[i][j], new_path, visited|{grid[i][j]})))\n", "raw_completion": "```python\ndef minPath(grid, k):\n    n = len(grid)\n    heap = [(grid[i][0], [(i, 0)], set([grid[i][0]])) for i in range(n)]\n    directions = [(0,1), (0,-1), (1,0), (-1,0)]\n    while heap:\n        _, path, visited = heappop(heap)\n        if len(path) == k:\n            return [grid[i][j] for i,j in path]\n        for di,dj in directions:\n            i,j = path[-1][0]+di, path[-1][1]+dj\n            if i < 0 or i >= n or j < 0 or j >= n or grid[i][j] in visited:\n                continue\n            new_path = path+[(i,j)]\n            heappush(heap, (grid[i][j], new_path, visited|{grid[i][j]})))\n```"}
{"task_id": "HumanEval/13", "completion": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n", "raw_completion": "```python\ndef greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n```"}
{"task_id": "HumanEval/130", "completion": "\ndef tri(n):\n    sequence = [3]\n    prev_3, prev_2, prev_1 = 0, 0 , 3\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            curr = 1 + i // 2\n        else:\n            curr = prev_1 + prev_2 + prev_3\n        sequence.append(curr)\n        prev_3, prev_2, prev_1 = prev_2, prev_1, curr\n    return sequence\n", "raw_completion": "```python\ndef tri(n):\n    sequence = [3]\n    prev_3, prev_2, prev_1 = 0, 0 , 3\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            curr = 1 + i // 2\n        else:\n            curr = prev_1 + prev_2 + prev_3\n        sequence.append(curr)\n        prev_3, prev_2, prev_1 = prev_2, prev_1, curr\n    return sequence\n```"}
{"task_id": "HumanEval/131", "completion": "\ndef digits(n):\n    odd_digits = [int(digit) for digit in str(n) if int(digit)%2 == 1]\n    if len(odd_digits) == 0:\n        return 0\n    else:\n        return reduce((lambda x, y: x*y), odd_digits)\n", "raw_completion": "```python\ndef digits(n):\n    odd_digits = [int(digit) for digit in str(n) if int(digit)%2 == 1]\n    if len(odd_digits) == 0:\n        return 0\n    else:\n        return reduce((lambda x, y: x*y), odd_digits)\n```"}
{"task_id": "HumanEval/132", "completion": "\ndef is_nested(string):\n    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append('[')\n        elif bracket == ']' and stack and stack[-1] == '[':\n            stack.pop()\n    return bool(stack)\n", "raw_completion": "```python\ndef is_nested(string):\n    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append('[')\n        elif bracket == ']' and stack and stack[-1] == '[':\n            stack.pop()\n    return bool(stack)\n```"}
{"task_id": "HumanEval/133", "completion": "\nimport math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])\n", "raw_completion": "```python\nimport math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])\n```"}
{"task_id": "HumanEval/134", "completion": "\ndef check_if_last_char_is_a_letter(txt):\n    return txt.rstrip().endswith((' ', '\\t', '\n')) == False and txt[-1].isalpha()\n", "raw_completion": "```python\ndef check_if_last_char_is_a_letter(txt):\n    return txt.rstrip().endswith((' ', '\\t', '\\n')) == False and txt[-1].isalpha()\n```\n"}
{"task_id": "HumanEval/135", "completion": "\ndef can_arrange(arr):\n    index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            index = i-1\n    return index\n", "raw_completion": "```python\ndef can_arrange(arr):\n    index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            index = i-1\n    return index\n```"}
{"task_id": "HumanEval/136", "completion": "\ndef largest_smallest_integers(lst):\n    neg_ints = [n for n in lst if n<0]\n    pos_ints = [n for n in lst if n>0]\n    a = max(neg_ints) if neg_ints else None\n    b = min(pos_ints) if pos_ints else None\n    return (a, b)\n", "raw_completion": "```python\ndef largest_smallest_integers(lst):\n    neg_ints = [n for n in lst if n<0]\n    pos_ints = [n for n in lst if n>0]\n    a = max(neg_ints) if neg_ints else None\n    b = min(pos_ints) if pos_ints else None\n    return (a, b)\n```"}
{"task_id": "HumanEval/137", "completion": "\ndef compare_one(a, b):\n    a_type, b_type = type(a), type(b)\n    if a_type == str: a = a.replace(',', '.')\n    if b_type == str: b = b.replace(',', '.')\n    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        if a > b: return a\n        elif b > a: return b\n        else: return None\n    elif isinstance(a, str) and isinstance(b, str):\n        a, b = float(a.replace(',', '.')), float(b.replace(',', '.'))\n        if a > b: return str(a).replace('.', ',')\n        elif b > a: return str(b).replace('.', ',')\n        else: return None\n    else: return None\n", "raw_completion": "```python\ndef compare_one(a, b):\n    a_type, b_type = type(a), type(b)\n    if a_type == str: a = a.replace(',', '.')\n    if b_type == str: b = b.replace(',', '.')\n    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        if a > b: return a\n        elif b > a: return b\n        else: return None\n    elif isinstance(a, str) and isinstance(b, str):\n        a, b = float(a.replace(',', '.')), float(b.replace(',', '.'))\n        if a > b: return str(a).replace('.', ',')\n        elif b > a: return str(b).replace('.', ',')\n        else: return None\n    else: return None\n```"}
{"task_id": "HumanEval/138", "completion": "\ndef is_equal_to_sum_even(n):\n    return any(n == i+j+k+l for i in range(2, n, 2)\n                             for j in range(2, n, 2)\n                             for k in range(2, n, 2)\n                             for l in range(2, n, 2))\n", "raw_completion": "```python\ndef is_equal_to_sum_even(n):\n    return any(n == i+j+k+l for i in range(2, n, 2)\n                             for j in range(2, n, 2)\n                             for k in range(2, n, 2)\n                             for l in range(2, n, 2))\n```"}
{"task_id": "HumanEval/139", "completion": "\nimport math\n\ndef special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        result *= math.factorial(i)\n    return result\n", "raw_completion": "```python\nimport math\n\ndef special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        result *= math.factorial(i)\n    return result\n```"}
{"task_id": "HumanEval/14", "completion": "\nfrom typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]\n", "raw_completion": "```python\nfrom typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]\n```"}
{"task_id": "HumanEval/140", "completion": "\ndef fix_spaces(text):\n    text = text.replace(' ', '_')\n    if '   ' in text:\n        text = text.replace('   ', '-')\n    if '  ' in text:\n        text = text.replace('  ', '-')\n    return text\n", "raw_completion": "```python\ndef fix_spaces(text):\n    text = text.replace(' ', '_')\n    if '   ' in text:\n        text = text.replace('   ', '-')\n    if '  ' in text:\n        text = text.replace('  ', '-')\n    return text\n```"}
{"task_id": "HumanEval/141", "completion": "\ndef file_name_check(file_name):\n    if not isinstance(file_name, str):\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not name or not ext:\n        return 'No'\n    if not all(c.isdigit() or c.isalpha() or c == '_' for c in name):\n        return 'No'\n    if len([c for c in name if c.isdigit()]) > 3:\n        return 'No'\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if not name[0].isalpha():\n        return 'No'\n    return 'Yes'\n", "raw_completion": "```python\ndef file_name_check(file_name):\n    if not isinstance(file_name, str):\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not name or not ext:\n        return 'No'\n    if not all(c.isdigit() or c.isalpha() or c == '_' for c in name):\n        return 'No'\n    if len([c for c in name if c.isdigit()]) > 3:\n        return 'No'\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if not name[0].isalpha():\n        return 'No'\n    return 'Yes'\n```"}
{"task_id": "HumanEval/142", "completion": "\ndef sum_squares(lst):\n    return sum([num**2 if idx % 3 == 0 else (num**3 if idx % 4 == 0 else num) for idx, num in enumerate(lst)])\n", "raw_completion": "```python\ndef sum_squares(lst):\n    return sum([num**2 if idx % 3 == 0 else (num**3 if idx % 4 == 0 else num) for idx, num in enumerate(lst)])\n```"}
{"task_id": "HumanEval/143", "completion": "\ndef isprime(n):\n    return all(n % i != 0 for i in range(2, int(n ** 0.5) + 1))\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    primes = [word for word in words if isprime(len(word))]\n    return \" \".join(primes)\n", "raw_completion": "```python\ndef isprime(n):\n    return all(n % i != 0 for i in range(2, int(n ** 0.5) + 1))\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    primes = [word for word in words if isprime(len(word))]\n    return \" \".join(primes)\n```"}
{"task_id": "HumanEval/144", "completion": "\ndef simplify(x, n):\n    product = float(eval(x)) * float(eval(n))\n    return product.is_integer()\n", "raw_completion": "```python\ndef simplify(x, n):\n    product = float(eval(x)) * float(eval(n))\n    return product.is_integer()\n```"}
{"task_id": "HumanEval/145", "completion": "\ndef order_by_points(nums):\n    nums.sort(key=lambda x: sum(int(digit) for digit in str(abs(x))) + len(nums) - nums.index(x))\n    return nums\n", "raw_completion": "```python\ndef order_by_points(nums):\n    nums.sort(key=lambda x: sum(int(digit) for digit in str(abs(x))) + len(nums) - nums.index(x))\n    return nums\n```"}
{"task_id": "HumanEval/146", "completion": "\ndef specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in \"13579\" and str(num)[-1] in \"13579\":\n            count += 1\n    return count\n", "raw_completion": "```python\ndef specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in \"13579\" and str(num)[-1] in \"13579\":\n            count += 1\n    return count\n```"}
{"task_id": "HumanEval/147", "completion": "\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1,n+1)]\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1,n-1):\n            for k in range(j+1,n):\n                if (a[i]+a[j]+a[k]) % 3 == 0:\n                    count += 1\n    return count\n", "raw_completion": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1,n+1)]\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1,n-1):\n            for k in range(j+1,n):\n                if (a[i]+a[j]+a[k]) % 3 == 0:\n                    count += 1\n    return count\n```"}
{"task_id": "HumanEval/148", "completion": "\ndef bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    if start > end:\n        start, end = end, start\n    return tuple(filter(lambda x: start < planets.index(x) < end, planets))\n", "raw_completion": "```python\ndef bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    if start > end:\n        start, end = end, start\n    return tuple(filter(lambda x: start < planets.index(x) < end, planets))\n```"}
{"task_id": "HumanEval/149", "completion": "\ndef sorted_list_sum(lst):\n    lst = [word for word in lst if len(word)%2==0]\n    lst.sort()\n    lst.sort(key=len)\n    return lst\n", "raw_completion": "```python\ndef sorted_list_sum(lst):\n    lst = [word for word in lst if len(word)%2==0]\n    lst.sort()\n    lst.sort(key=len)\n    return lst\n```"}
{"task_id": "HumanEval/15", "completion": "\ndef string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n + 1))\n", "raw_completion": "```python\ndef string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n + 1))\n```"}
{"task_id": "HumanEval/150", "completion": "\n\nimport math\n\ndef x_or_y(n, x, y):\n    if n < 2:\n        return y\n    elif n == 2:\n        return x\n    else:\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return y\n        return x\n    \n", "raw_completion": "```python\n\nimport math\n\ndef x_or_y(n, x, y):\n    if n < 2:\n        return y\n    elif n == 2:\n        return x\n    else:\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return y\n        return x\n    \n```"}
{"task_id": "HumanEval/151", "completion": "\ndef double_the_difference(lst):\n    return sum(x ** 2 for x in lst if isinstance(x, int) and x % 2 != 0 and x >= 0)\n", "raw_completion": "```python\ndef double_the_difference(lst):\n    return sum(x ** 2 for x in lst if isinstance(x, int) and x % 2 != 0 and x >= 0)\n```"}
{"task_id": "HumanEval/152", "completion": "\ndef compare(game,guess):\n    return [abs(game[i]-guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]\n", "raw_completion": "```python\ndef compare(game,guess):\n    return [abs(game[i]-guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]\n```"}
{"task_id": "HumanEval/153", "completion": "\ndef Strongest_Extension(class_name, extensions):\n    strengths = []\n    for extension in extensions:\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        strength = CAP - SM\n        strengths.append(strength)\n    max_strength = max(strengths)\n    idx = strengths.index(max_strength)\n    return class_name + '.' + extensions[idx]\n", "raw_completion": "```python\ndef Strongest_Extension(class_name, extensions):\n    strengths = []\n    for extension in extensions:\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        strength = CAP - SM\n        strengths.append(strength)\n    max_strength = max(strengths)\n    idx = strengths.index(max_strength)\n    return class_name + '.' + extensions[idx]\n```"}
{"task_id": "HumanEval/154", "completion": "\ndef cycpattern_check(a, b):\n    return any(b[i:]+b[:i] in a for i in range(len(b)))\n", "raw_completion": "```python\ndef cycpattern_check(a, b):\n    return any(b[i:]+b[:i] in a for i in range(len(b)))\n```"}
{"task_id": "HumanEval/155", "completion": "\ndef even_odd_count(num):\n    even_count, odd_count = 0, 0\n    for char in str(abs(num)):\n        if int(char) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if num < 0:\n        return (odd_count, even_count)\n    return (even_count, odd_count)\n", "raw_completion": "```python\ndef even_odd_count(num):\n    even_count, odd_count = 0, 0\n    for char in str(abs(num)):\n        if int(char) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if num < 0:\n        return (odd_count, even_count)\n    return (even_count, odd_count)\n```"}
{"task_id": "HumanEval/156", "completion": "\ndef int_to_mini_roman(number):\n    dictionary = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n        }\n    result = ''\n    for key in dictionary.keys():\n        while number >= key:\n            result += dictionary[key]\n            number -= key\n    return result.lower()\n", "raw_completion": "```python\ndef int_to_mini_roman(number):\n    dictionary = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n        }\n    result = ''\n    for key in dictionary.keys():\n        while number >= key:\n            result += dictionary[key]\n            number -= key\n    return result.lower()\n```"}
{"task_id": "HumanEval/157", "completion": "\n\ndef right_angle_triangle(a, b, c):\n    sides = [a,b,c]\n    sides.sort()\n    return (sides[0]**2 + sides[1]**2 == sides[2]**2)\n\n", "raw_completion": "```python\n\ndef right_angle_triangle(a, b, c):\n    sides = [a,b,c]\n    sides.sort()\n    return (sides[0]**2 + sides[1]**2 == sides[2]**2)\n\n```"}
{"task_id": "HumanEval/158", "completion": "\ndef find_max(words):\n    word_dict = {}\n\n    for word in words:\n        unique_chars = set(word)\n        word_dict[word] = (len(unique_chars), word)\n\n    return max(word_dict.items(), key=lambda x: x[1])[0] if word_dict else \"\"\n", "raw_completion": "```python\ndef find_max(words):\n    word_dict = {}\n\n    for word in words:\n        unique_chars = set(word)\n        word_dict[word] = (len(unique_chars), word)\n\n    return max(word_dict.items(), key=lambda x: x[1])[0] if word_dict else \"\"\n```"}
{"task_id": "HumanEval/159", "completion": "\ndef eat(number, need, remaining):\n    eaten = min(need - number, remaining)\n    return [number + eaten, max(0, remaining - eaten)]\n", "raw_completion": "```python\ndef eat(number, need, remaining):\n    eaten = min(need - number, remaining)\n    return [number + eaten, max(0, remaining - eaten)]\n```"}
{"task_id": "HumanEval/16", "completion": "\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n", "raw_completion": "```python\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n```"}
{"task_id": "HumanEval/160", "completion": "\ndef do_algebra(operator, operand):\n    return eval(\"\".join(str(o)+operator[i] for i,o in enumerate(operand[:-1]))+str(operand[-1]))\n", "raw_completion": "```python\ndef do_algebra(operator, operand):\n    return eval(\"\".join(str(o)+operator[i] for i,o in enumerate(operand[:-1]))+str(operand[-1]))\n```"}
{"task_id": "HumanEval/161", "completion": "\ndef solve(s):\n    return ''.join([c.lower() if c.isupper() else c.upper() if c.islower() else c for c in s][::-1]) if any(c.isalpha() for c in s) else s[::-1]\n", "raw_completion": "```python\ndef solve(s):\n    return ''.join([c.lower() if c.isupper() else c.upper() if c.islower() else c for c in s][::-1]) if any(c.isalpha() for c in s) else s[::-1]\n```"}
{"task_id": "HumanEval/162", "completion": "\nimport hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()\n", "raw_completion": "```python\nimport hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()\n```"}
{"task_id": "HumanEval/163", "completion": "\ndef generate_integers(a, b):\n    return [num for num in range(a if a % 2 == 0 else a+1, b+1, 2) if set(str(num)).issubset(set('02468'))]\n", "raw_completion": "```python\ndef generate_integers(a, b):\n    return [num for num in range(a if a % 2 == 0 else a+1, b+1, 2) if set(str(num)).issubset(set('02468'))]\n```"}
{"task_id": "HumanEval/17", "completion": "\ndef parse_music(music_string: str) -> List[int]:\n    music_dict = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    music_list = music_string.split()\n    return [music_dict[note] for note in music_list]\n", "raw_completion": "```python\ndef parse_music(music_string: str) -> List[int]:\n    music_dict = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    music_list = music_string.split()\n    return [music_dict[note] for note in music_list]\n```"}
{"task_id": "HumanEval/18", "completion": "\ndef how_many_times(string: str, substring: str) -> int:\n    count = 0\n    if not substring:\n        return count\n    i = string.find(substring, 0)\n    while i != -1:\n        count += 1\n        i = string.find(substring, i+1)\n    return count\n", "raw_completion": "```python\ndef how_many_times(string: str, substring: str) -> int:\n    count = 0\n    if not substring:\n        return count\n    i = string.find(substring, 0)\n    while i != -1:\n        count += 1\n        i = string.find(substring, i+1)\n    return count\n```"}
{"task_id": "HumanEval/19", "completion": "\nfrom typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    number_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers_list = numbers.split(' ')\n    numbers_list.sort(key=lambda x: number_dict[x])\n    return ' '.join(numbers_list)\n", "raw_completion": "```python\nfrom typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    number_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers_list = numbers.split(' ')\n    numbers_list.sort(key=lambda x: number_dict[x])\n    return ' '.join(numbers_list)\n```"}
{"task_id": "HumanEval/2", "completion": "\ndef truncate_number(number: float) -> float:\n    return number % 1\n", "raw_completion": "```python\ndef truncate_number(number: float) -> float:\n    return number % 1\n```"}
{"task_id": "HumanEval/20", "completion": "\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_dist = float('inf')\n    closest_pair = (numbers[0], numbers[1])\n    \n    for i in range(len(numbers)-1):\n        curr_dist = abs(numbers[i] - numbers[i+1])\n        if curr_dist < min_dist:\n            min_dist = curr_dist\n            closest_pair = (numbers[i], numbers[i+1])\n            \n    return closest_pair\n", "raw_completion": "```python\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_dist = float('inf')\n    closest_pair = (numbers[0], numbers[1])\n    \n    for i in range(len(numbers)-1):\n        curr_dist = abs(numbers[i] - numbers[i+1])\n        if curr_dist < min_dist:\n            min_dist = curr_dist\n            closest_pair = (numbers[i], numbers[i+1])\n            \n    return closest_pair\n```"}
{"task_id": "HumanEval/21", "completion": "\nfrom typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]\n", "raw_completion": "```python\nfrom typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]\n```"}
{"task_id": "HumanEval/22", "completion": "\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]\n", "raw_completion": "```python\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]\n```"}
{"task_id": "HumanEval/23", "completion": "\ndef strlen(string: str) -> int:\n    return len(string)\n", "raw_completion": "```python\ndef strlen(string: str) -> int:\n    return len(string)\n```"}
{"task_id": "HumanEval/24", "completion": "\ndef largest_divisor(n: int) -> int:\n    return max(i for i in range(1, n) if n % i == 0)\n", "raw_completion": "```python\ndef largest_divisor(n: int) -> int:\n    return max(i for i in range(1, n) if n % i == 0)\n```"}
{"task_id": "HumanEval/25", "completion": "\nfrom typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    d = 2\n    while d * d <= n:\n        while (n % d) == 0:\n            factors.append(d)\n            n //= d\n        d += 1\n    if n > 1:\n        factors.append(n)\n    return factors\n", "raw_completion": "```python\nfrom typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    d = 2\n    while d * d <= n:\n        while (n % d) == 0:\n            factors.append(d)\n            n //= d\n        d += 1\n    if n > 1:\n        factors.append(n)\n    return factors\n```"}
{"task_id": "HumanEval/26", "completion": "\nfrom typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    return list(dict.fromkeys(numbers))\n", "raw_completion": "```python\nfrom typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    return list(dict.fromkeys(numbers))\n```"}
{"task_id": "HumanEval/27", "completion": "\ndef flip_case(string: str) -> str:\n    return string.swapcase()\n", "raw_completion": "```python\ndef flip_case(string: str) -> str:\n    return string.swapcase()\n```"}
{"task_id": "HumanEval/28", "completion": "\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\n", "raw_completion": "```python\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\n```"}
{"task_id": "HumanEval/29", "completion": "\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]\n", "raw_completion": "```python\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]\n```"}
{"task_id": "HumanEval/3", "completion": "\nfrom typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for o in operations:\n        balance += o\n        if balance < 0:\n            return True\n    return False\n", "raw_completion": "```python\nfrom typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for o in operations:\n        balance += o\n        if balance < 0:\n            return True\n    return False\n```"}
{"task_id": "HumanEval/30", "completion": "\ndef get_positive(l: list):\n    return [num for num in l if num > 0]\n", "raw_completion": "```python\ndef get_positive(l: list):\n    return [num for num in l if num > 0]\n```"}
{"task_id": "HumanEval/31", "completion": "\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n", "raw_completion": "```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n```\n"}
{"task_id": "HumanEval/32", "completion": "\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    n = len(xs)\n    assert n % 2 == 0, \"List xs must have an even number of coefficients\"\n    assert xs[n-1] != 0, \"Largest non-zero coefficient must be present\"\n    a = xs[n-1] # largest non-zero coefficient\n    b = xs[n-2] # second largest non-zero coefficient\n    if n == 2:\n        return -a/b # handle constant and linear functions separately\n    radicand = b**2 - 4*a*xs[n-3] # calculate discriminant\n    if radicand < 0: # no real roots\n        return None\n    sign_b = math.copysign(1, b)\n    x1 = (-b + sign_b*math.sqrt(radicand)) / (2*a) # quadratic formula\n    x2 = xs[n-4] / x1 # use x1 to calculate x2\n    return x1 if round(poly(xs, x1), 4) == 0 else x2\n", "raw_completion": "```python\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    n = len(xs)\n    assert n % 2 == 0, \"List xs must have an even number of coefficients\"\n    assert xs[n-1] != 0, \"Largest non-zero coefficient must be present\"\n    a = xs[n-1] # largest non-zero coefficient\n    b = xs[n-2] # second largest non-zero coefficient\n    if n == 2:\n        return -a/b # handle constant and linear functions separately\n    radicand = b**2 - 4*a*xs[n-3] # calculate discriminant\n    if radicand < 0: # no real roots\n        return None\n    sign_b = math.copysign(1, b)\n    x1 = (-b + sign_b*math.sqrt(radicand)) / (2*a) # quadratic formula\n    x2 = xs[n-4] / x1 # use x1 to calculate x2\n    return x1 if round(poly(xs, x1), 4) == 0 else x2\n```"}
{"task_id": "HumanEval/33", "completion": "\ndef sort_third(l: list):\n    return [sorted(l[i:i+3]) if (i+1)%3==0 else l[i] for i in range(len(l))]\n", "raw_completion": "```python\ndef sort_third(l: list):\n    return [sorted(l[i:i+3]) if (i+1)%3==0 else l[i] for i in range(len(l))]\n```"}
{"task_id": "HumanEval/34", "completion": "\ndef unique(l: list):\n    return sorted(list(set(l)))\n", "raw_completion": "```python\ndef unique(l: list):\n    return sorted(list(set(l)))\n```"}
{"task_id": "HumanEval/35", "completion": "\ndef max_element(l: list):\n    return max(l)\n", "raw_completion": "```python\ndef max_element(l: list):\n    return max(l)\n```"}
{"task_id": "HumanEval/36", "completion": "\ndef fizz_buzz(n: int) -> int:\n    return sum(str(i).count('7') for i in range(n) if i % 11 == 0 or i % 13 == 0)\n", "raw_completion": "```python\ndef fizz_buzz(n: int) -> int:\n    return sum(str(i).count('7') for i in range(n) if i % 11 == 0 or i % 13 == 0)\n```"}
{"task_id": "HumanEval/37", "completion": "\ndef sort_even(l: list):\n    evens = sorted([num for index, num in enumerate(l) if index % 2 == 0])\n    return [num if index % 2 != 0 else evens[index//2] for index, num in enumerate(l)]\n", "raw_completion": "```python\ndef sort_even(l: list):\n    evens = sorted([num for index, num in enumerate(l) if index % 2 == 0])\n    return [num if index % 2 != 0 else evens[index//2] for index, num in enumerate(l)]\n```"}
{"task_id": "HumanEval/38", "completion": "\ndef decode_cyclic(s: str):\n    \"\"\"\n    Takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # Split string into groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # Cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:2]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n", "raw_completion": "```python\ndef decode_cyclic(s: str):\n    \"\"\"\n    Takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # Split string into groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # Cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:2]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n```"}
{"task_id": "HumanEval/39", "completion": "\ndef prime_fib(n: int):\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x ** 0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    def fib(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fib(n - 1) + fib(n - 2)\n\n    count = 0\n    i = 2\n    while count < n:\n        if is_prime(fib(i)):\n            count += 1\n            if count == n:\n                return fib(i)\n        i += 1\n", "raw_completion": "```python\ndef prime_fib(n: int):\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x ** 0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    def fib(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fib(n - 1) + fib(n - 2)\n\n    count = 0\n    i = 2\n    while count < n:\n        if is_prime(fib(i)):\n            count += 1\n            if count == n:\n                return fib(i)\n        i += 1\n```"}
{"task_id": "HumanEval/4", "completion": "\nfrom typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    abs_differences = [abs(number - mean) for number in numbers]\n    return sum(abs_differences) / len(numbers)\n", "raw_completion": "```python\nfrom typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    abs_differences = [abs(number - mean) for number in numbers]\n    return sum(abs_differences) / len(numbers)\n```"}
{"task_id": "HumanEval/40", "completion": "\ndef triples_sum_to_zero(l: list):\n    return any(sum([i, j, k]) == 0 for i in l for j in l for k in l if i != j and j != k and i != k)\n", "raw_completion": "```python\ndef triples_sum_to_zero(l: list):\n    return any(sum([i, j, k]) == 0 for i in l for j in l for k in l if i != j and j != k and i != k)\n```"}
{"task_id": "HumanEval/41", "completion": "\ndef car_race_collision(n: int):\n    return n*(n-1)//2\n", "raw_completion": "```python\ndef car_race_collision(n: int):\n    return n*(n-1)//2\n```"}
{"task_id": "HumanEval/42", "completion": "\ndef incr_list(l: list):\n    return [x+1 for x in l]\n", "raw_completion": "```python\ndef incr_list(l: list):\n    return [x+1 for x in l]\n```"}
{"task_id": "HumanEval/43", "completion": "\ndef pairs_sum_to_zero(l):\n    return any(-x in l for x in l if x != 0)\n", "raw_completion": "```python\ndef pairs_sum_to_zero(l):\n    return any(-x in l for x in l if x != 0)\n```"}
{"task_id": "HumanEval/44", "completion": "\ndef change_base(x: int, base: int) -> str:\n    return '' if x == 0 else change_base(x // base, base) + str(x % base)\n", "raw_completion": "```python\ndef change_base(x: int, base: int) -> str:\n    return '' if x == 0 else change_base(x // base, base) + str(x % base)\n```\n"}
{"task_id": "HumanEval/45", "completion": "\ndef triangle_area(a, h):\n    return (a * h)/2\n", "raw_completion": "```python\ndef triangle_area(a, h):\n    return (a * h)/2\n```"}
{"task_id": "HumanEval/46", "completion": "\ndef fib4(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    seq = [0, 0, 2, 0]\n    for i in range(3, n+1):\n        seq[3] = seq[0] + seq[1] + seq[2] + seq[3]\n        seq[0], seq[1], seq[2] = seq[1], seq[2], seq[3]\n    return seq[3]\n", "raw_completion": "```python\ndef fib4(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    seq = [0, 0, 2, 0]\n    for i in range(3, n+1):\n        seq[3] = seq[0] + seq[1] + seq[2] + seq[3]\n        seq[0], seq[1], seq[2] = seq[1], seq[2], seq[3]\n    return seq[3]\n```\n"}
{"task_id": "HumanEval/47", "completion": "\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    \"\"\"\n    l.sort()\n    n = len(l)\n    mid = n//2\n    if n % 2 == 0:\n        return (l[mid-1] + l[mid])/2\n    else:\n        return l[mid]\n", "raw_completion": "```python\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    \"\"\"\n    l.sort()\n    n = len(l)\n    mid = n//2\n    if n % 2 == 0:\n        return (l[mid-1] + l[mid])/2\n    else:\n        return l[mid]\n```"}
{"task_id": "HumanEval/48", "completion": "\ndef is_palindrome(text: str) -> bool:\n    return text == text[::-1]\n", "raw_completion": "```python\ndef is_palindrome(text: str) -> bool:\n    return text == text[::-1]\n```"}
{"task_id": "HumanEval/49", "completion": "\ndef modp(n: int, p: int) -> int:\n    return pow(2, n, p)\n", "raw_completion": "```python\ndef modp(n: int, p: int) -> int:\n    return pow(2, n, p)\n```"}
{"task_id": "HumanEval/5", "completion": "\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    return [x for pair in zip(numbers, [delimiter]*len(numbers)) for x in pair][:-1*bool(numbers)]\n", "raw_completion": "```python\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    return [x for pair in zip(numbers, [delimiter]*len(numbers)) for x in pair][:-1*bool(numbers)]\n```\n"}
{"task_id": "HumanEval/50", "completion": "\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n", "raw_completion": "```python\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n```"}
{"task_id": "HumanEval/51", "completion": "\ndef remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])\n", "raw_completion": "```python\ndef remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])\n```"}
{"task_id": "HumanEval/52", "completion": "\ndef below_threshold(l: list, t: int) -> bool:\n    return all(num < t for num in l)\n", "raw_completion": "```python\ndef below_threshold(l: list, t: int) -> bool:\n    return all(num < t for num in l)\n```"}
{"task_id": "HumanEval/53", "completion": "\ndef add(x: int, y: int) -> int:\n    return x + y\n", "raw_completion": "```python\ndef add(x: int, y: int) -> int:\n    return x + y\n```"}
{"task_id": "HumanEval/54", "completion": "\ndef same_chars(s0: str, s1: str) -> bool:\n    return sorted(s0) == sorted(s1)\n", "raw_completion": "```python\ndef same_chars(s0: str, s1: str) -> bool:\n    return sorted(s0) == sorted(s1)\n```"}
{"task_id": "HumanEval/55", "completion": "\ndef fib(n: int) -> int:\n    if n < 2:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n", "raw_completion": "```python\ndef fib(n: int) -> int:\n    if n < 2:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n```"}
{"task_id": "HumanEval/56", "completion": "\ndef correct_bracketing(brackets: str):\n    return brackets.count(\"<\") == brackets.count(\">\")\n", "raw_completion": "```python\ndef correct_bracketing(brackets: str):\n    return brackets.count(\"<\") == brackets.count(\">\")\n```"}
{"task_id": "HumanEval/57", "completion": "\ndef monotonic(l: list):\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))\n", "raw_completion": "```python\ndef monotonic(l: list):\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))\n```"}
{"task_id": "HumanEval/58", "completion": "\n\ndef common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))\n\n", "raw_completion": "```python\n\ndef common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))\n\n```"}
{"task_id": "HumanEval/59", "completion": "\ndef largest_prime_factor(n: int):\n    factor = 2\n    while factor <= n/2:\n        if n % factor == 0:\n            n = n / factor\n        else:\n            factor += 1\n    return int(n)\n", "raw_completion": "```python\ndef largest_prime_factor(n: int):\n    factor = 2\n    while factor <= n/2:\n        if n % factor == 0:\n            n = n / factor\n        else:\n            factor += 1\n    return int(n)\n```"}
{"task_id": "HumanEval/6", "completion": "\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    return [max([0]+[paren_string.count('('*i + ')'*i) for i in range(1,paren_string.count('()')+1)]) for paren_string in paren_string.split()]\n", "raw_completion": "```python\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    return [max([0]+[paren_string.count('('*i + ')'*i) for i in range(1,paren_string.count('()')+1)]) for paren_string in paren_string.split()]\n```"}
{"task_id": "HumanEval/60", "completion": "\ndef sum_to_n(n: int):\n    return sum(range(1, n+1))\n", "raw_completion": "```python\ndef sum_to_n(n: int):\n    return sum(range(1, n+1))\n```"}
{"task_id": "HumanEval/61", "completion": "\ndef correct_bracketing(brackets: str):\n    return brackets.count(\"(\") == brackets.count(\")\") and brackets[0]!=\")\" and brackets[-1]!=\"(\"\n", "raw_completion": "```python\ndef correct_bracketing(brackets: str):\n    return brackets.count(\"(\") == brackets.count(\")\") and brackets[0]!=\")\" and brackets[-1]!=\"(\"\n```"}
{"task_id": "HumanEval/62", "completion": "\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [xs[i] * i for i in range(1, len(xs))]\n", "raw_completion": "```python\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [xs[i] * i for i in range(1, len(xs))]\n```"}
{"task_id": "HumanEval/63", "completion": "\ndef fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    \n    prev_1 = 1\n    prev_2 = 1\n    prev_3 = 0\n    result = 0\n    \n    for i in range(2, n):\n        result = prev_1 + prev_2 + prev_3\n        prev_3 = prev_2\n        prev_2 = prev_1\n        prev_1 = result\n    \n    return result\n", "raw_completion": "```python\ndef fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    \n    prev_1 = 1\n    prev_2 = 1\n    prev_3 = 0\n    result = 0\n    \n    for i in range(2, n):\n        result = prev_1 + prev_2 + prev_3\n        prev_3 = prev_2\n        prev_2 = prev_1\n        prev_1 = result\n    \n    return result\n```"}
{"task_id": "HumanEval/64", "completion": "\n\ndef vowels_count(s):\n    vowels = \"aeiouy\"\n    s = s.lower()\n    count = 0\n    if s[-1] == 'y':\n        vowels = vowels[:5] + 'y'\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n\n", "raw_completion": "```python\n\ndef vowels_count(s):\n    vowels = \"aeiouy\"\n    s = s.lower()\n    count = 0\n    if s[-1] == 'y':\n        vowels = vowels[:5] + 'y'\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n\n```"}
{"task_id": "HumanEval/65", "completion": "\ndef circular_shift(x, shift):\n    x_str = str(x)\n    shift %= len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        shifted_num = x_str[-shift:] + x_str[:-shift]\n        if shift > len(x_str):\n            return shifted_num[::-1]\n        else:\n            return shifted_num\n", "raw_completion": "```python\ndef circular_shift(x, shift):\n    x_str = str(x)\n    shift %= len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        shifted_num = x_str[-shift:] + x_str[:-shift]\n        if shift > len(x_str):\n            return shifted_num[::-1]\n        else:\n            return shifted_num\n```"}
{"task_id": "HumanEval/66", "completion": "\ndef digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())\n", "raw_completion": "```python\ndef digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())\n```"}
{"task_id": "HumanEval/67", "completion": "\ndef fruit_distribution(s, n):\n    fruits = s.split()\n    apples = int(fruits[0])\n    oranges = int(fruits[-2])\n    mango = n - apples - oranges\n    return mango\n", "raw_completion": "```python\ndef fruit_distribution(s, n):\n    fruits = s.split()\n    apples = int(fruits[0])\n    oranges = int(fruits[-2])\n    mango = n - apples - oranges\n    return mango\n```"}
{"task_id": "HumanEval/68", "completion": "\ndef pluck(arr):\n    even_nodes = [num for num in arr if num % 2 == 0]\n    if not even_nodes:\n        return []\n    min_val = min(even_nodes)\n    min_val_idxs = [i for i, val in enumerate(arr) if val == min_val]\n    return [min_val, min(min_val_idxs)]\n", "raw_completion": "```python\ndef pluck(arr):\n    even_nodes = [num for num in arr if num % 2 == 0]\n    if not even_nodes:\n        return []\n    min_val = min(even_nodes)\n    min_val_idxs = [i for i, val in enumerate(arr) if val == min_val]\n    return [min_val, min(min_val_idxs)]\n```"}
{"task_id": "HumanEval/69", "completion": "\ndef search(lst):\n    for num in sorted(set(lst), reverse=True):\n        if lst.count(num) >= num > 0:\n            return num\n    return -1\n", "raw_completion": "```python\ndef search(lst):\n    for num in sorted(set(lst), reverse=True):\n        if lst.count(num) >= num > 0:\n            return num\n    return -1\n```"}
{"task_id": "HumanEval/7", "completion": "\nfrom typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [string for string in strings if substring in string]\n", "raw_completion": "```python\nfrom typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [string for string in strings if substring in string]\n```"}
{"task_id": "HumanEval/70", "completion": "\ndef strange_sort_list(lst):\n    result = []\n    lst.sort()\n    while len(lst) > 0:\n        result.append(lst.pop(0))\n        if len(lst) > 0:\n            result.append(lst.pop(len(lst)-1))\n    return result\n", "raw_completion": "```python\ndef strange_sort_list(lst):\n    result = []\n    lst.sort()\n    while len(lst) > 0:\n        result.append(lst.pop(0))\n        if len(lst) > 0:\n            result.append(lst.pop(len(lst)-1))\n    return result\n```"}
{"task_id": "HumanEval/71", "completion": "\ndef triangle_area(a, b, c):\n    if a+b>c and b+c>a and c+a>b:\n        s = (a+b+c)/2\n        area = (s*(s-a)*(s-b)*(s-c))**0.5\n        return round(area, 2)\n    else:\n        return -1\n", "raw_completion": "```python\ndef triangle_area(a, b, c):\n    if a+b>c and b+c>a and c+a>b:\n        s = (a+b+c)/2\n        area = (s*(s-a)*(s-b)*(s-c))**0.5\n        return round(area, 2)\n    else:\n        return -1\n```"}
{"task_id": "HumanEval/72", "completion": "\ndef will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w\n", "raw_completion": "```python\ndef will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w\n```"}
{"task_id": "HumanEval/73", "completion": "\ndef smallest_change(arr):\n    i = 0\n    j = len(arr) - 1\n    count = 0\n    \n    while i <= j:\n        if arr[i] != arr[j]:\n            count += 1\n        i += 1\n        j -= 1\n    \n    return count\n", "raw_completion": "```python\ndef smallest_change(arr):\n    i = 0\n    j = len(arr) - 1\n    count = 0\n    \n    while i <= j:\n        if arr[i] != arr[j]:\n            count += 1\n        i += 1\n        j -= 1\n    \n    return count\n```"}
{"task_id": "HumanEval/74", "completion": "\ndef total_match(lst1, lst2):\n    if sum(len(word) for word in lst1) < sum(len(word) for word in lst2):\n        return lst1\n    else:\n        return lst2\n", "raw_completion": "```python\ndef total_match(lst1, lst2):\n    if sum(len(word) for word in lst1) < sum(len(word) for word in lst2):\n        return lst1\n    else:\n        return lst2\n```"}
{"task_id": "HumanEval/75", "completion": "\ndef is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True   \n    count = 0\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            count += 1\n    return count == 3\n", "raw_completion": "```python\ndef is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True   \n    count = 0\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            count += 1\n    return count == 3\n```"}
{"task_id": "HumanEval/76", "completion": "\ndef is_simple_power(x, n):\n    return (x > 0 and n > 0) and ((x == 1 and n == 1) or (math.log(x, n).is_integer()))\n", "raw_completion": "```python\ndef is_simple_power(x, n):\n    return (x > 0 and n > 0) and ((x == 1 and n == 1) or (math.log(x, n).is_integer()))\n```"}
{"task_id": "HumanEval/77", "completion": "\ndef iscube(a):\n    return (a**(1/3)).is_integer()\n", "raw_completion": "```python\ndef iscube(a):\n    return (a**(1/3)).is_integer()\n```"}
{"task_id": "HumanEval/78", "completion": "\ndef hex_key(num):\n    primes = {\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"}\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count\n", "raw_completion": "```python\ndef hex_key(num):\n    primes = {\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"}\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count\n```"}
{"task_id": "HumanEval/79", "completion": "\n\ndef decimal_to_binary(decimal):\n    return f'db{bin(decimal)[2:]}db'\n\n", "raw_completion": "```python\n\ndef decimal_to_binary(decimal):\n    return f'db{bin(decimal)[2:]}db'\n\n```"}
{"task_id": "HumanEval/8", "completion": "\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    return (sum(numbers), math.prod(numbers)) if numbers else (0, 1)\n", "raw_completion": "```python\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    return (sum(numbers), math.prod(numbers)) if numbers else (0, 1)\n```"}
{"task_id": "HumanEval/80", "completion": "\ndef is_happy(s):\n    return len(s) >= 3 and all(s[i] != s[i+1] and s[i+1] != s[i+2] and s[i] != s[i+2] for i in range(len(s)-2))\n", "raw_completion": "```python\ndef is_happy(s):\n    return len(s) >= 3 and all(s[i] != s[i+1] and s[i+1] != s[i+2] and s[i] != s[i+2] for i in range(len(s)-2))\n```"}
{"task_id": "HumanEval/81", "completion": "\ndef numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n", "raw_completion": "```python\ndef numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n```"}
{"task_id": "HumanEval/82", "completion": "\nimport math\n\ndef prime_length(string):\n    return string != '' and all(len(string) % i != 0 for i in range(2, int(math.sqrt(len(string))) + 1))\n", "raw_completion": "```python\nimport math\n\ndef prime_length(string):\n    return string != '' and all(len(string) % i != 0 for i in range(2, int(math.sqrt(len(string))) + 1))\n```"}
{"task_id": "HumanEval/83", "completion": "\ndef starts_one_ends(n):\n    return 2*9**(n-1) if n==1 else 2*9**(n-1) + 8*(n-2)*9**(n-2)\n", "raw_completion": "```python\ndef starts_one_ends(n):\n    return 2*9**(n-1) if n==1 else 2*9**(n-1) + 8*(n-2)*9**(n-2)\n```"}
{"task_id": "HumanEval/84", "completion": "\ndef solve(N):\n    return bin(sum(int(i) for i in str(N)))[2:]\n", "raw_completion": "```python\ndef solve(N):\n    return bin(sum(int(i) for i in str(N)))[2:]\n```"}
{"task_id": "HumanEval/85", "completion": "\ndef add(lst):\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n", "raw_completion": "```python\ndef add(lst):\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\n```"}
{"task_id": "HumanEval/86", "completion": "\ndef anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split())\n", "raw_completion": "```python\ndef anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split())\n```"}
{"task_id": "HumanEval/87", "completion": "\ndef get_row(lst, x):\n    return [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x] if lst else []\n", "raw_completion": "```python\ndef get_row(lst, x):\n    return [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x] if lst else []\n```"}
{"task_id": "HumanEval/88", "completion": "\ndef sort_array(array):\n    sorted_array = array.copy()\n    if len(sorted_array) <= 1:\n        return sorted_array\n        \n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n        sorted_array.sort(reverse=True)\n    else:\n        sorted_array.sort()\n        \n    return sorted_array\n", "raw_completion": "```python\ndef sort_array(array):\n    sorted_array = array.copy()\n    if len(sorted_array) <= 1:\n        return sorted_array\n        \n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n        sorted_array.sort(reverse=True)\n    else:\n        sorted_array.sort()\n        \n    return sorted_array\n```"}
{"task_id": "HumanEval/89", "completion": "\ndef encrypt(s):\n    res = ''\n    for c in s:\n        if c.isalpha():\n            val = ord(c) + 2 * 2\n            if c.isupper():\n                res += chr((val - 65) % 26 + 65)\n            else:\n                res += chr((val - 97) % 26 + 97)\n        else:\n            res += c\n    return res\n", "raw_completion": "```python\ndef encrypt(s):\n    res = ''\n    for c in s:\n        if c.isalpha():\n            val = ord(c) + 2 * 2\n            if c.isupper():\n                res += chr((val - 65) % 26 + 65)\n            else:\n                res += chr((val - 97) % 26 + 97)\n        else:\n            res += c\n    return res\n```"}
{"task_id": "HumanEval/9", "completion": "\ndef rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max = []\n    max_num = None\n    for num in numbers:\n        if not max_num or num > max_num:\n            max_num = num\n        rolling_max.append(max_num)\n    return rolling_max\n", "raw_completion": "```python\ndef rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max = []\n    max_num = None\n    for num in numbers:\n        if not max_num or num > max_num:\n            max_num = num\n        rolling_max.append(max_num)\n    return rolling_max\n```"}
{"task_id": "HumanEval/90", "completion": "\ndef next_smallest(lst):\n    if len(set(lst)) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    return sorted_lst[1]\n", "raw_completion": "```python\ndef next_smallest(lst):\n    if len(set(lst)) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    return sorted_lst[1]\n```"}
{"task_id": "HumanEval/91", "completion": "\ndef is_bored(S):\n    return sum(1 for sentence in S.split(\". \") + S.split(\"? \") + S.split(\"! \")\n               if sentence.strip().startswith(\"I\"))\n", "raw_completion": "```python\ndef is_bored(S):\n    return sum(1 for sentence in S.split(\". \") + S.split(\"? \") + S.split(\"! \")\n               if sentence.strip().startswith(\"I\"))\n```"}
{"task_id": "HumanEval/92", "completion": "\ndef any_int(x, y, z):\n    return type(x) == int and type(y) == int and type(z) == int and (x == y + z or y == x + z or z == x + y)\n", "raw_completion": "```python\ndef any_int(x, y, z):\n    return type(x) == int and type(y) == int and type(z) == int and (x == y + z or y == x + z or z == x + y)\n```"}
{"task_id": "HumanEval/93", "completion": "\n\ndef encode(message):\n    encoded = ''\n    vowels = 'aeiouAEIOU'\n    for letter in message:\n        if letter in vowels:\n            encoded += chr(ord(letter)+2)\n        elif letter.isalpha():\n            if letter.isupper():\n                encoded += letter.lower()\n            else:\n                encoded += letter.upper()\n        else:\n            encoded += letter\n    return encoded\n\n", "raw_completion": "```python\n\ndef encode(message):\n    encoded = ''\n    vowels = 'aeiouAEIOU'\n    for letter in message:\n        if letter in vowels:\n            encoded += chr(ord(letter)+2)\n        elif letter.isalpha():\n            if letter.isupper():\n                encoded += letter.lower()\n            else:\n                encoded += letter.upper()\n        else:\n            encoded += letter\n    return encoded\n\n```"}
{"task_id": "HumanEval/94", "completion": "\ndef skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    primes = [num for num in lst if is_prime(num)]\n    max_prime = max(primes)\n    return sum(int(digit) for digit in str(max_prime))\n", "raw_completion": "```python\ndef skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    primes = [num for num in lst if is_prime(num)]\n    max_prime = max(primes)\n    return sum(int(digit) for digit in str(max_prime))\n```"}
{"task_id": "HumanEval/95", "completion": "\ndef check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    all_keys = list(dict.keys())\n    if all(isinstance(key, str) for key in all_keys):\n       return all(key.islower() for key in all_keys) or all(key.isupper() for key in all_keys)\n    return False\n", "raw_completion": "```python\ndef check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    all_keys = list(dict.keys())\n    if all(isinstance(key, str) for key in all_keys):\n       return all(key.islower() for key in all_keys) or all(key.isupper() for key in all_keys)\n    return False\n```"}
{"task_id": "HumanEval/96", "completion": "\ndef count_up_to(n):\n    if n < 2:\n        return []\n    primes = [2]\n    for num in range(3, n):\n        for div in range(2, int(num ** 0.5) + 1):\n            if num % div == 0:\n                break\n        else:\n            primes.append(num)\n    return primes\n", "raw_completion": "```python\ndef count_up_to(n):\n    if n < 2:\n        return []\n    primes = [2]\n    for num in range(3, n):\n        for div in range(2, int(num ** 0.5) + 1):\n            if num % div == 0:\n                break\n        else:\n            primes.append(num)\n    return primes\n```"}
{"task_id": "HumanEval/97", "completion": "\ndef multiply(a, b):\n    return abs(a % 10 * b % 10)\n", "raw_completion": "```python\ndef multiply(a, b):\n    return abs(a % 10 * b % 10)\n```"}
{"task_id": "HumanEval/98", "completion": "\ndef count_upper(s):\n    count = 0\n    vowels = 'AEIOU'\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in vowels:\n            count += 1\n    return count\n", "raw_completion": "```python\ndef count_upper(s):\n    count = 0\n    vowels = 'AEIOU'\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in vowels:\n            count += 1\n    return count\n```"}
{"task_id": "HumanEval/99", "completion": "\ndef closest_integer(value):\n    value = float(value)\n    sign = 1 if value >= 0 else -1\n    abs_val = abs(value)\n    int_part = int(abs_val)\n    decimal_part = abs_val - int_part\n    if decimal_part >= 0.5:\n        return sign * (int_part + 1)\n    else:\n        return sign * int_part\n", "raw_completion": "```python\ndef closest_integer(value):\n    value = float(value)\n    sign = 1 if value >= 0 else -1\n    abs_val = abs(value)\n    int_part = int(abs_val)\n    decimal_part = abs_val - int_part\n    if decimal_part >= 0.5:\n        return sign * (int_part + 1)\n    else:\n        return sign * int_part\n```"}
