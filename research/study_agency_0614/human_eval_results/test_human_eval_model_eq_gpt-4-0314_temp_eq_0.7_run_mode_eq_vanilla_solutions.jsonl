{"task_id": "HumanEval/0", "completion": "\nfrom typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n", "raw_completion": "```python\nfrom typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n```"}
{"task_id": "HumanEval/1", "completion": "\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    stack = []\n    result = []\n    current_group = ''\n    for char in paren_string:\n        if char == '(':\n            if not stack:\n                current_group = ''\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n                current_group += '()'\n            if not stack:\n                result.append(current_group)\n    return result\n", "raw_completion": "```python\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    stack = []\n    result = []\n    current_group = ''\n    for char in paren_string:\n        if char == '(':\n            if not stack:\n                current_group = ''\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n                current_group += '()'\n            if not stack:\n                result.append(current_group)\n    return result\n```"}
{"task_id": "HumanEval/10", "completion": "\ndef is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string[:i] + string[::-1]\n    return string + string[::-1]\n\n", "raw_completion": "```python\ndef is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string[:i] + string[::-1]\n    return string + string[::-1]\n\n```"}
{"task_id": "HumanEval/100", "completion": "\n\ndef make_a_pile(n):\n    pile = []\n    for i in range(n):\n        pile.append(n + 2*i)\n    return pile\n", "raw_completion": "```python\n\ndef make_a_pile(n):\n    pile = []\n    for i in range(n):\n        pile.append(n + 2*i)\n    return pile\n```"}
{"task_id": "HumanEval/101", "completion": "\ndef words_string(s):\n    s = s.replace(\",\", \" \")\n    return s.split()\n", "raw_completion": "```python\ndef words_string(s):\n    s = s.replace(\",\", \" \")\n    return s.split()\n```"}
{"task_id": "HumanEval/102", "completion": "\ndef choose_num(x, y):\n    max_even = -1\n    for num in range(x, y+1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even\n", "raw_completion": "```python\ndef choose_num(x, y):\n    max_even = -1\n    for num in range(x, y+1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even\n```"}
{"task_id": "HumanEval/103", "completion": "\ndef rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)\n", "raw_completion": "```python\ndef rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)\n```"}
{"task_id": "HumanEval/104", "completion": "\ndef unique_digits(x):\n    filtered_numbers = []\n    for number in x:\n        if not any(digit in '02468' for digit in str(number)):\n            filtered_numbers.append(number)\n    return sorted(filtered_numbers)\n", "raw_completion": "```python\ndef unique_digits(x):\n    filtered_numbers = []\n    for number in x:\n        if not any(digit in '02468' for digit in str(number)):\n            filtered_numbers.append(number)\n    return sorted(filtered_numbers)\n```"}
{"task_id": "HumanEval/105", "completion": "\ndef by_length(arr):\n    number_names = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\",\n                   6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    sorted_filtered_arr = sorted(filter(lambda x: x in number_names, arr), reverse=True)\n    return [number_names[x] for x in sorted_filtered_arr]\n", "raw_completion": "```python\ndef by_length(arr):\n    number_names = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\",\n                   6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    sorted_filtered_arr = sorted(filter(lambda x: x in number_names, arr), reverse=True)\n    return [number_names[x] for x in sorted_filtered_arr]\n```"}
{"task_id": "HumanEval/106", "completion": "\ndef f(n):\n    def factorial(x):\n        return 1 if x == 0 else x * factorial(x - 1)\n\n    def sum_n(x):\n        return (x * (x + 1)) // 2\n\n    return [factorial(i) if i % 2 == 0 else sum_n(i) for i in range(1, n+1)]\n", "raw_completion": "```python\ndef f(n):\n    def factorial(x):\n        return 1 if x == 0 else x * factorial(x - 1)\n\n    def sum_n(x):\n        return (x * (x + 1)) // 2\n\n    return [factorial(i) if i % 2 == 0 else sum_n(i) for i in range(1, n+1)]\n```"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even = 0\n    odd = 0\n\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n\n    return (even, odd)", "raw_completion": "def even_odd_palindrome(n):\n    even = 0\n    odd = 0\n\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n\n    return (even, odd)"}
{"task_id": "HumanEval/108", "completion": "\ndef count_nums(arr):\n    def sum_digits(num):\n        return sum(int(digit) for digit in str(num).replace(\"-\", \"\")) * (-1 if num < 0 else 1)\n    return sum(1 for num in arr if sum_digits(num) > 0)\n", "raw_completion": "```python\ndef count_nums(arr):\n    def sum_digits(num):\n        return sum(int(digit) for digit in str(num).replace(\"-\", \"\")) * (-1 if num < 0 else 1)\n    return sum(1 for num in arr if sum_digits(num) > 0)\n```"}
{"task_id": "HumanEval/109", "completion": "\ndef move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr.insert(0, arr.pop())\n    return False\n", "raw_completion": "```python\ndef move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr.insert(0, arr.pop())\n    return False\n```"}
{"task_id": "HumanEval/11", "completion": "\nfrom typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n", "raw_completion": "```python\nfrom typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n```"}
{"task_id": "HumanEval/110", "completion": "\ndef exchange(lst1, lst2):\n    odd_lst1 = [num for num in lst1 if num % 2 != 0]\n    even_lst2 = [num for num in lst2 if num % 2 == 0]\n\n    if len(odd_lst1) <= len(even_lst2):\n        return \"YES\"\n    else:\n        return \"NO\"\n", "raw_completion": "```python\ndef exchange(lst1, lst2):\n    odd_lst1 = [num for num in lst1 if num % 2 != 0]\n    even_lst2 = [num for num in lst2 if num % 2 == 0]\n\n    if len(odd_lst1) <= len(even_lst2):\n        return \"YES\"\n    else:\n        return \"NO\"\n```"}
{"task_id": "HumanEval/111", "completion": "\ndef histogram(test):\n    words = test.split()\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    max_count = 0\n    max_words = {}\n    for word, count in word_count.items():\n        if count > max_count:\n            max_words = {word: count}\n            max_count = count\n        elif count == max_count:\n            max_words[word] = count\n    return max_words\n", "raw_completion": "```python\ndef histogram(test):\n    words = test.split()\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    max_count = 0\n    max_words = {}\n    for word, count in word_count.items():\n        if count > max_count:\n            max_words = {word: count}\n            max_count = count\n        elif count == max_count:\n            max_words[word] = count\n    return max_words\n```"}
{"task_id": "HumanEval/112", "completion": "\ndef reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])\n", "raw_completion": "```python\ndef reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])\n```"}
{"task_id": "HumanEval/113", "completion": "\ndef odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for c in s if int(c) % 2 == 1)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result\n", "raw_completion": "```python\ndef odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for c in s if int(c) % 2 == 1)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result\n```"}
{"task_id": "HumanEval/114", "completion": "\nimport math\n\ndef minSubArraySum(nums):\n    min_sum = math.inf\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums) + 1):\n            min_sum = min(min_sum, sum(nums[i:j]))\n    return min_sum\n", "raw_completion": "```python\nimport math\n\ndef minSubArraySum(nums):\n    min_sum = math.inf\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums) + 1):\n            min_sum = min(min_sum, sum(nums[i:j]))\n    return min_sum\n```"}
{"task_id": "HumanEval/115", "completion": "\ndef max_fill(grid, capacity):\n    import math\n    water_units = sum([row.count(1) for row in grid])\n    return math.ceil(water_units / capacity)\n", "raw_completion": "```python\ndef max_fill(grid, capacity):\n    import math\n    water_units = sum([row.count(1) for row in grid])\n    return math.ceil(water_units / capacity)\n```"}
{"task_id": "HumanEval/116", "completion": "\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n", "raw_completion": "```python\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n```"}
{"task_id": "HumanEval/117", "completion": "\ndef select_words(s, n):\n    vowels = \"AEIOUaeiou\"\n    words = s.split()\n    result = []\n    \n    for word in words:\n        consonants = sum(1 for ch in word if ch not in vowels)\n        if consonants == n:\n            result.append(word)\n    \n    return result\n", "raw_completion": "```python\ndef select_words(s, n):\n    vowels = \"AEIOUaeiou\"\n    words = s.split()\n    result = []\n    \n    for word in words:\n        consonants = sum(1 for ch in word if ch not in vowels)\n        if consonants == n:\n            result.append(word)\n    \n    return result\n```"}
{"task_id": "HumanEval/118", "completion": "\ndef get_closest_vowel(word):\n    vowels = \"AEIOUaeiou\"\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and i != len(word)-1:\n            return word[i]\n    return \"\"\n", "raw_completion": "```python\ndef get_closest_vowel(word):\n    vowels = \"AEIOUaeiou\"\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and i != len(word)-1:\n            return word[i]\n    return \"\"\n```"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    open_count = lst[0].count(\"(\") + lst[1].count(\"(\")\n    close_count = lst[0].count(\")\") + lst[1].count(\")\")\n    return \"Yes\" if open_count == close_count and lst[0].count(\"(\") >= lst[0].count(\")\") and lst[1].count(\")\") >= lst[1].count(\"(\") else \"No\"", "raw_completion": "def match_parens(lst):\n    open_count = lst[0].count(\"(\") + lst[1].count(\"(\")\n    close_count = lst[0].count(\")\") + lst[1].count(\")\")\n    return \"Yes\" if open_count == close_count and lst[0].count(\"(\") >= lst[0].count(\")\") and lst[1].count(\")\") >= lst[1].count(\"(\") else \"No\""}
{"task_id": "HumanEval/12", "completion": "\nfrom typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n", "raw_completion": "```python\nfrom typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n```"}
{"task_id": "HumanEval/120", "completion": "\ndef maximum(arr, k):\n    arr.sort()\n    return arr[-k:]\n", "raw_completion": "```python\ndef maximum(arr, k):\n    arr.sort()\n    return arr[-k:]\n```"}
{"task_id": "HumanEval/121", "completion": "\ndef solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)\n", "raw_completion": "```python\ndef solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)\n```"}
{"task_id": "HumanEval/122", "completion": "\ndef add_elements(arr, k):\n    return sum([num for num in arr[:k] if 0 <= num < 100])\n", "raw_completion": "```python\ndef add_elements(arr, k):\n    return sum([num for num in arr[:k] if 0 <= num < 100])\n```"}
{"task_id": "HumanEval/123", "completion": "\ndef get_odd_collatz(n):\n    odd_collatz = []\n    while n != 1:\n        if n % 2 == 1:\n            odd_collatz.append(n)\n        n = (n * 3 + 1) if n % 2 == 1 else (n // 2)\n    odd_collatz.append(1)\n    return sorted(odd_collatz)\n", "raw_completion": "```python\ndef get_odd_collatz(n):\n    odd_collatz = []\n    while n != 1:\n        if n % 2 == 1:\n            odd_collatz.append(n)\n        n = (n * 3 + 1) if n % 2 == 1 else (n // 2)\n    odd_collatz.append(1)\n    return sorted(odd_collatz)\n```"}
{"task_id": "HumanEval/124", "completion": "\ndef valid_date(date):\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    month, day, year = date.split('-')\n    if not (month.isdigit() and day.isdigit() and year.isdigit()):\n        return False\n    int_month = int(month)\n    int_day = int(day)\n    if not (1 <= int_month <= 12):\n        return False\n    day_limits = [0, 31, 29 if year == '2020' else 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if not (1 <= int_day <= day_limits[int_month]):\n        return False\n    return True\n", "raw_completion": "```python\ndef valid_date(date):\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    month, day, year = date.split('-')\n    if not (month.isdigit() and day.isdigit() and year.isdigit()):\n        return False\n    int_month = int(month)\n    int_day = int(day)\n    if not (1 <= int_month <= 12):\n        return False\n    day_limits = [0, 31, 29 if year == '2020' else 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if not (1 <= int_day <= day_limits[int_month]):\n        return False\n    return True\n```"}
{"task_id": "HumanEval/125", "completion": "\n\ndef split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and (ord(c) % 2 != 0))\n", "raw_completion": "```python\n\ndef split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and (ord(c) % 2 != 0))\n```"}
{"task_id": "HumanEval/126", "completion": "\ndef is_sorted(lst):\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            return False\n        if lst.count(lst[i]) > 1:\n            return False\n    return True\n", "raw_completion": "```python\ndef is_sorted(lst):\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            return False\n        if lst.count(lst[i]) > 1:\n            return False\n    return True\n```"}
{"task_id": "HumanEval/127", "completion": "\ndef intersection(interval1, interval2):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    if end < start:\n        return \"NO\"\n\n    length = end - start\n\n    return \"YES\" if is_prime(length) else \"NO\"\n", "raw_completion": "```python\ndef intersection(interval1, interval2):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    if end < start:\n        return \"NO\"\n\n    length = end - start\n\n    return \"YES\" if is_prime(length) else \"NO\"\n```"}
{"task_id": "HumanEval/128", "completion": "\ndef prod_signs(arr):\n    if not arr:\n        return None\n    magnitude_sum = 0\n    sign_product = 1\n    for num in arr:\n        magnitude_sum += abs(num)\n        if num != 0:\n            sign_product *= num // abs(num)\n    return magnitude_sum * sign_product\n", "raw_completion": "```python\ndef prod_signs(arr):\n    if not arr:\n        return None\n    magnitude_sum = 0\n    sign_product = 1\n    for num in arr:\n        magnitude_sum += abs(num)\n        if num != 0:\n            sign_product *= num // abs(num)\n    return magnitude_sum * sign_product\n```"}
{"task_id": "HumanEval/129", "completion": "\ndef minPath(grid, k):\n    N = len(grid)\n    neighbors = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    \n    def dfs(y, x, k, path):\n        if k == 1:\n            return [grid[y][x]]\n        \n        min_path = [grid[y][x]] * (k - 1)\n        \n        for ny, nx in [(y+dy, x+dx) for dy, dx in neighbors if 0 <= y+dy < N and 0 <= x+dx < N]:\n            new_path = dfs(ny, nx, k-1, path)\n            if new_path < min_path:\n                min_path = new_path\n        return [grid[y][x]] + min_path\n        \n    ans = [N*N] * k\n    for y in range(N):\n        for x in range(N):\n            path = dfs(y, x, k, [])\n            if path < ans:\n                ans = path\n        \n    return ans\n", "raw_completion": "```python\ndef minPath(grid, k):\n    N = len(grid)\n    neighbors = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    \n    def dfs(y, x, k, path):\n        if k == 1:\n            return [grid[y][x]]\n        \n        min_path = [grid[y][x]] * (k - 1)\n        \n        for ny, nx in [(y+dy, x+dx) for dy, dx in neighbors if 0 <= y+dy < N and 0 <= x+dx < N]:\n            new_path = dfs(ny, nx, k-1, path)\n            if new_path < min_path:\n                min_path = new_path\n        return [grid[y][x]] + min_path\n        \n    ans = [N*N] * k\n    for y in range(N):\n        for x in range(N):\n            path = dfs(y, x, k, [])\n            if path < ans:\n                ans = path\n        \n    return ans\n```"}
{"task_id": "HumanEval/13", "completion": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n", "raw_completion": "```python\ndef greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n```"}
{"task_id": "HumanEval/130", "completion": "\ndef tri(n):\n    def trib(n):\n        if n == 1:\n            return 3\n        elif n % 2 == 0:\n            return 1 + n / 2\n        else:\n            return trib(n - 1) + trib(n - 2) + trib(n + 1)\n\n    trib_sequence = []\n    for i in range(n + 1):\n        trib_sequence.append(trib(i))\n    return trib_sequence\n", "raw_completion": "```python\ndef tri(n):\n    def trib(n):\n        if n == 1:\n            return 3\n        elif n % 2 == 0:\n            return 1 + n / 2\n        else:\n            return trib(n - 1) + trib(n - 2) + trib(n + 1)\n\n    trib_sequence = []\n    for i in range(n + 1):\n        trib_sequence.append(trib(i))\n    return trib_sequence\n```"}
{"task_id": "HumanEval/131", "completion": "\ndef digits(n):\n    product = 1\n    all_even = True\n    for digit in str(n):\n        num_digit = int(digit)\n        if num_digit % 2 != 0:\n            all_even = False\n            product *= num_digit\n    return 0 if all_even else product\n", "raw_completion": "```python\ndef digits(n):\n    product = 1\n    all_even = True\n    for digit in str(n):\n        num_digit = int(digit)\n        if num_digit % 2 != 0:\n            all_even = False\n            product *= num_digit\n    return 0 if all_even else product\n```"}
{"task_id": "HumanEval/132", "completion": "\ndef is_nested(string):\n    count = 0\n    for char in string:\n        if char == '[':\n            count += 1\n        elif char == ']':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0\n", "raw_completion": "```python\ndef is_nested(string):\n    count = 0\n    for char in string:\n        if char == '[':\n            count += 1\n        elif char == ']':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0\n```"}
{"task_id": "HumanEval/133", "completion": "\ndef sum_squares(lst):\n    return sum([int(x + 1) ** 2 if x > 0 and x != int(x) else int(x) ** 2 for x in lst])\n", "raw_completion": "```python\ndef sum_squares(lst):\n    return sum([int(x + 1) ** 2 if x > 0 and x != int(x) else int(x) ** 2 for x in lst])\n```"}
{"task_id": "HumanEval/134", "completion": "\ndef check_if_last_char_is_a_letter(txt):\n    if len(txt) == 0:\n        return False\n    last_char = txt[-1]\n    return last_char.isalpha() and (len(txt) == 1 or txt[-2] == \" \")\n", "raw_completion": "```python\ndef check_if_last_char_is_a_letter(txt):\n    if len(txt) == 0:\n        return False\n    last_char = txt[-1]\n    return last_char.isalpha() and (len(txt) == 1 or txt[-2] == \" \")\n```"}
{"task_id": "HumanEval/135", "completion": "\ndef can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i\n    return largest_index\n", "raw_completion": "```python\ndef can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i\n    return largest_index\n```"}
{"task_id": "HumanEval/136", "completion": "\ndef largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n    \n    for num in lst:\n        if num < 0 and (largest_negative is None or num > largest_negative):\n            largest_negative = num\n        if num > 0 and (smallest_positive is None or num < smallest_positive):\n            smallest_positive = num\n            \n    return (largest_negative, smallest_positive)\n", "raw_completion": "```python\ndef largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n    \n    for num in lst:\n        if num < 0 and (largest_negative is None or num > largest_negative):\n            largest_negative = num\n        if num > 0 and (smallest_positive is None or num < smallest_positive):\n            smallest_positive = num\n            \n    return (largest_negative, smallest_positive)\n```"}
{"task_id": "HumanEval/137", "completion": "\ndef compare_one(a, b):\n    a_val = float(str(a).replace(',', '.'))\n    b_val = float(str(b).replace(',', '.'))\n    if a_val == b_val:\n        return None\n    elif a_val > b_val:\n        return a\n    else:\n        return b\n", "raw_completion": "```python\ndef compare_one(a, b):\n    a_val = float(str(a).replace(',', '.'))\n    b_val = float(str(b).replace(',', '.'))\n    if a_val == b_val:\n        return None\n    elif a_val > b_val:\n        return a\n    else:\n        return b\n```"}
{"task_id": "HumanEval/138", "completion": "\ndef is_equal_to_sum_even(n):\n    return n >= 8 and n % 2 == 0\n", "raw_completion": "```python\ndef is_equal_to_sum_even(n):\n    return n >= 8 and n % 2 == 0\n```"}
{"task_id": "HumanEval/139", "completion": "\ndef special_factorial(n):\n    def factorial(m):\n        return 1 if m == 0 else m * factorial(m-1)\n\n    result = 1\n    for i in range(1, n+1):\n        result *= factorial(i)\n    return result\n", "raw_completion": "```python\ndef special_factorial(n):\n    def factorial(m):\n        return 1 if m == 0 else m * factorial(m-1)\n\n    result = 1\n    for i in range(1, n+1):\n        result *= factorial(i)\n    return result\n```"}
{"task_id": "HumanEval/14", "completion": "\nfrom typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]\n", "raw_completion": "```python\nfrom typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]\n```"}
{"task_id": "HumanEval/140", "completion": "\ndef fix_spaces(text):\n    while \"  \" in text:\n        text = text.replace(\"  \", \" \")\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"__\", \"-\")\n    return text\n", "raw_completion": "```python\ndef fix_spaces(text):\n    while \"  \" in text:\n        text = text.replace(\"  \", \" \")\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"__\", \"-\")\n    return text\n```"}
{"task_id": "HumanEval/141", "completion": "\ndef file_name_check(file_name):\n    if not (file_name.count('.') == 1 and file_name.split('.')[0] and file_name.split('.')[0][0].isalpha()):\n        return 'No'\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n", "raw_completion": "```python\ndef file_name_check(file_name):\n    if not (file_name.count('.') == 1 and file_name.split('.')[0] and file_name.split('.')[0][0].isalpha()):\n        return 'No'\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n```"}
{"task_id": "HumanEval/142", "completion": "\ndef sum_squares(lst):\n    result = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0 and i % 4 == 0:\n            result += num ** 3\n        elif i % 3 == 0:\n            result += num ** 2\n        elif i % 4 == 0:\n            result += num ** 3\n        else:\n            result += num\n    return result\n", "raw_completion": "```python\ndef sum_squares(lst):\n    result = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0 and i % 4 == 0:\n            result += num ** 3\n        elif i % 3 == 0:\n            result += num ** 2\n        elif i % 4 == 0:\n            result += num ** 3\n        else:\n            result += num\n    return result\n```"}
{"task_id": "HumanEval/143", "completion": "\ndef words_in_sentence(sentence):\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)\n", "raw_completion": "```python\ndef words_in_sentence(sentence):\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)\n```"}
{"task_id": "HumanEval/144", "completion": "\ndef simplify(x, n):\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n\n    result = (x_num * n_num) / (x_denom * n_denom)\n\n    return result.is_integer()\n", "raw_completion": "```python\ndef simplify(x, n):\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n\n    result = (x_num * n_num) / (x_denom * n_denom)\n\n    return result.is_integer()\n```"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), x))", "raw_completion": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), x))"}
{"task_id": "HumanEval/146", "completion": "\ndef specialFilter(nums):\n    return len([num for num in nums if num > 10 and str(num)[0] in \"13579\" and str(num)[-1] in \"13579\"])\n", "raw_completion": "```python\ndef specialFilter(nums):\n    return len([num for num in nums if num > 10 and str(num)[0] in \"13579\" and str(num)[-1] in \"13579\"])\n```"}
{"task_id": "HumanEval/147", "completion": "\ndef get_max_triples(n):\n    count_0 = count_1 = count_2 = 0\n    for i in range(1, n + 1):\n        ai = i * i - i + 1\n        if ai % 3 == 0:\n            count_0 += 1\n        elif ai % 3 == 1:\n            count_1 += 1\n        else:\n            count_2 += 1\n    return count_0 * (count_0 - 1) * (count_0 - 2) // 6 + count_1 * count_2 * (count_0 + count_1 - 1) // 2\n", "raw_completion": "```python\ndef get_max_triples(n):\n    count_0 = count_1 = count_2 = 0\n    for i in range(1, n + 1):\n        ai = i * i - i + 1\n        if ai % 3 == 0:\n            count_0 += 1\n        elif ai % 3 == 1:\n            count_1 += 1\n        else:\n            count_2 += 1\n    return count_0 * (count_0 - 1) * (count_0 - 2) // 6 + count_1 * count_2 * (count_0 + count_1 - 1) // 2\n```"}
{"task_id": "HumanEval/148", "completion": "\ndef bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start, end = sorted([planets.index(planet1), planets.index(planet2)])\n    return tuple(planets[start + 1:end])\n", "raw_completion": "```python\ndef bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start, end = sorted([planets.index(planet1), planets.index(planet2)])\n    return tuple(planets[start + 1:end])\n```"}
{"task_id": "HumanEval/149", "completion": "\ndef sorted_list_sum(lst):\n    even_length_strings = [word for word in lst if len(word) % 2 == 0]\n    even_length_strings.sort(key=lambda x: (len(x), x))\n    return even_length_strings\n", "raw_completion": "```python\ndef sorted_list_sum(lst):\n    even_length_strings = [word for word in lst if len(word) % 2 == 0]\n    even_length_strings.sort(key=lambda x: (len(x), x))\n    return even_length_strings\n```"}
{"task_id": "HumanEval/15", "completion": "\ndef string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))\n", "raw_completion": "```python\ndef string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))\n```"}
{"task_id": "HumanEval/150", "completion": "\ndef x_or_y(n, x, y):\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x\n", "raw_completion": "```python\ndef x_or_y(n, x, y):\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x\n```"}
{"task_id": "HumanEval/151", "completion": "\ndef double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x >= 0 and x % 2 != 0)\n", "raw_completion": "```python\ndef double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x >= 0 and x % 2 != 0)\n```"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "raw_completion": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]"}
{"task_id": "HumanEval/153", "completion": "\ndef Strongest_Extension(class_name, extensions):\n    def strength(ext):\n        CAP = sum(1 for c in ext if c.isupper())\n        SM = sum(1 for c in ext if c.islower())\n        return CAP - SM\n\n    strongest_ext = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_ext}\"\n", "raw_completion": "```python\ndef Strongest_Extension(class_name, extensions):\n    def strength(ext):\n        CAP = sum(1 for c in ext if c.isupper())\n        SM = sum(1 for c in ext if c.islower())\n        return CAP - SM\n\n    strongest_ext = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_ext}\"\n```"}
{"task_id": "HumanEval/154", "completion": "\ndef cycpattern_check(a, b):\n    for i in range(len(b)):\n        if b in a:\n            return True\n        b = b[1:] + b[0]\n    return False\n", "raw_completion": "```python\ndef cycpattern_check(a, b):\n    for i in range(len(b)):\n        if b in a:\n            return True\n        b = b[1:] + b[0]\n    return False\n```"}
{"task_id": "HumanEval/155", "completion": "\ndef even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n", "raw_completion": "```python\ndef even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n```"}
{"task_id": "HumanEval/156", "completion": "\ndef int_to_mini_roman(number):\n    val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    syb = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i']\n    roman_number = ''\n    for i in range(len(val)):\n        while number >= val[i]:\n            roman_number += syb[i]\n            number -= val[i]\n    return roman_number\n", "raw_completion": "```python\ndef int_to_mini_roman(number):\n    val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    syb = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i']\n    roman_number = ''\n    for i in range(len(val)):\n        while number >= val[i]:\n            roman_number += syb[i]\n            number -= val[i]\n    return roman_number\n```"}
{"task_id": "HumanEval/157", "completion": "\ndef right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n", "raw_completion": "```python\ndef right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n```"}
{"task_id": "HumanEval/158", "completion": "\ndef find_max(words):\n    words.sort(key=lambda x: (-len(set(x)), x))\n    return words[0]\n", "raw_completion": "```python\ndef find_max(words):\n    words.sort(key=lambda x: (-len(set(x)), x))\n    return words[0]\n```"}
{"task_id": "HumanEval/159", "completion": "\ndef eat(number, need, remaining):\n    carrots_to_eat = min(need, remaining)\n    total_eaten = number + carrots_to_eat\n    left_over = remaining - carrots_to_eat\n    return [total_eaten, left_over]\n", "raw_completion": "```python\ndef eat(number, need, remaining):\n    carrots_to_eat = min(need, remaining)\n    total_eaten = number + carrots_to_eat\n    left_over = remaining - carrots_to_eat\n    return [total_eaten, left_over]\n```"}
{"task_id": "HumanEval/16", "completion": "\ndef count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))\n", "raw_completion": "```python\ndef count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))\n```"}
{"task_id": "HumanEval/160", "completion": "\ndef do_algebra(operator, operand):\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += operator[i] + str(operand[i+1])\n    return eval(expression)\n", "raw_completion": "```python\ndef do_algebra(operator, operand):\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += operator[i] + str(operand[i+1])\n    return eval(expression)\n```"}
{"task_id": "HumanEval/161", "completion": "\ndef solve(s):\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.lower() if c.isupper() else c.upper() for c in s)\n", "raw_completion": "```python\ndef solve(s):\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.lower() if c.isupper() else c.upper() for c in s)\n```"}
{"task_id": "HumanEval/162", "completion": "\ndef string_to_md5(text):\n    from hashlib import md5\n    if not text:\n        return None\n    return md5(text.encode('utf-8')).hexdigest()\n", "raw_completion": "```python\ndef string_to_md5(text):\n    from hashlib import md5\n    if not text:\n        return None\n    return md5(text.encode('utf-8')).hexdigest()\n```"}
{"task_id": "HumanEval/163", "completion": "\ndef generate_integers(a, b):\n    return [x for x in range(min(a, b), max(a, b) + 1) if x % 2 == 0]\n", "raw_completion": "```python\ndef generate_integers(a, b):\n    return [x for x in range(min(a, b), max(a, b) + 1) if x % 2 == 0]\n```"}
{"task_id": "HumanEval/17", "completion": "\nfrom typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_dict = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    return [note_dict[note] for note in notes]\n", "raw_completion": "```python\nfrom typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_dict = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    return [note_dict[note] for note in notes]\n```"}
{"task_id": "HumanEval/18", "completion": "\ndef how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n", "raw_completion": "```python\ndef how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n```"}
{"task_id": "HumanEval/19", "completion": "\nfrom typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)\n", "raw_completion": "```python\nfrom typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)\n```"}
{"task_id": "HumanEval/2", "completion": "\ndef truncate_number(number: float) -> float:\n    return number - int(number)\n\n", "raw_completion": "```python\ndef truncate_number(number: float) -> float:\n    return number - int(number)\n\n```"}
{"task_id": "HumanEval/20", "completion": "\nfrom typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n    return result\n", "raw_completion": "```python\nfrom typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n    return result\n```"}
{"task_id": "HumanEval/21", "completion": "\nfrom typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(x - min_num) / range_num for x in numbers]\n", "raw_completion": "```python\nfrom typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(x - min_num) / range_num for x in numbers]\n```"}
{"task_id": "HumanEval/22", "completion": "\nfrom typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]\n", "raw_completion": "```python\nfrom typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]\n```"}
{"task_id": "HumanEval/23", "completion": "\ndef strlen(string: str) -> int:\n    return len(string)\n", "raw_completion": "```python\ndef strlen(string: str) -> int:\n    return len(string)\n```"}
{"task_id": "HumanEval/24", "completion": "\ndef largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n", "raw_completion": "```python\ndef largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n```"}
{"task_id": "HumanEval/25", "completion": "\nfrom typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n", "raw_completion": "```python\nfrom typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n```"}
{"task_id": "HumanEval/26", "completion": "\nfrom typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    output = []\n    for number in numbers:\n        if numbers.count(number) == 1:\n            output.append(number)\n    return output\n", "raw_completion": "```python\nfrom typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    output = []\n    for number in numbers:\n        if numbers.count(number) == 1:\n            output.append(number)\n    return output\n```"}
{"task_id": "HumanEval/27", "completion": "\ndef flip_case(string: str) -> str:\n    flipped_string = \"\"\n    for char in string:\n        if char.islower():\n            flipped_string += char.upper()\n        else:\n            flipped_string += char.lower()\n    return flipped_string\n", "raw_completion": "```python\ndef flip_case(string: str) -> str:\n    flipped_string = \"\"\n    for char in string:\n        if char.islower():\n            flipped_string += char.upper()\n        else:\n            flipped_string += char.lower()\n    return flipped_string\n```"}
{"task_id": "HumanEval/28", "completion": "\nfrom typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\n", "raw_completion": "```python\nfrom typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\n```"}
{"task_id": "HumanEval/29", "completion": "\nfrom typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]\n", "raw_completion": "```python\nfrom typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]\n```"}
{"task_id": "HumanEval/3", "completion": "\nfrom typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n", "raw_completion": "```python\nfrom typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n```"}
{"task_id": "HumanEval/30", "completion": "\ndef get_positive(l: list):\n    return [i for i in l if i > 0]\n", "raw_completion": "```python\ndef get_positive(l: list):\n    return [i for i in l if i > 0]\n```"}
{"task_id": "HumanEval/31", "completion": "\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n", "raw_completion": "```python\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n```"}
{"task_id": "HumanEval/32", "completion": "\nimport math\n\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    epsilon = 1e-12\n    x = 0\n    f_x = poly(xs, x)\n    while abs(f_x) > epsilon:\n        x_new = x - f_x / (poly(xs, x + epsilon) - f_x) * epsilon\n        x, f_x = x_new, poly(xs, x_new)\n    return x\n", "raw_completion": "```python\nimport math\n\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    epsilon = 1e-12\n    x = 0\n    f_x = poly(xs, x)\n    while abs(f_x) > epsilon:\n        x_new = x - f_x / (poly(xs, x + epsilon) - f_x) * epsilon\n        x, f_x = x_new, poly(xs, x_new)\n    return x\n```"}
{"task_id": "HumanEval/33", "completion": "\ndef sort_third(l: list):\n    divisible_by_three = sorted([x for i, x in enumerate(l) if i % 3 == 0])\n    result = []\n    idx = 0\n    for i in range(len(l)):\n        if i % 3 == 0:\n            result.append(divisible_by_three[idx])\n            idx += 1\n        else:\n            result.append(l[i])\n    return result\n", "raw_completion": "```python\ndef sort_third(l: list):\n    divisible_by_three = sorted([x for i, x in enumerate(l) if i % 3 == 0])\n    result = []\n    idx = 0\n    for i in range(len(l)):\n        if i % 3 == 0:\n            result.append(divisible_by_three[idx])\n            idx += 1\n        else:\n            result.append(l[i])\n    return result\n```"}
{"task_id": "HumanEval/34", "completion": "\ndef unique(l: list):\n    return sorted(set(l))\n", "raw_completion": "```python\ndef unique(l: list):\n    return sorted(set(l))\n```"}
{"task_id": "HumanEval/35", "completion": "\ndef max_element(l: list):\n    return max(l)\n", "raw_completion": "```python\ndef max_element(l: list):\n    return max(l)\n```"}
{"task_id": "HumanEval/36", "completion": "\ndef fizz_buzz(n: int):\n    return sum(str(i).count(\"7\") for i in range(n) if i % 11 == 0 or i % 13 == 0)\n", "raw_completion": "```python\ndef fizz_buzz(n: int):\n    return sum(str(i).count(\"7\") for i in range(n) if i % 11 == 0 or i % 13 == 0)\n```"}
{"task_id": "HumanEval/37", "completion": "\ndef sort_even(l: list):\n    even_indices = [i for i in range(0, len(l), 2)]\n    sorted_even_values = sorted([l[i] for i in even_indices])\n\n    l_prime = l.copy()\n    for index, value in zip(even_indices, sorted_even_values):\n        l_prime[index] = value\n\n    return l_prime\n", "raw_completion": "```python\ndef sort_even(l: list):\n    even_indices = [i for i in range(0, len(l), 2)]\n    sorted_even_values = sorted([l[i] for i in even_indices])\n\n    l_prime = l.copy()\n    for index, value in zip(even_indices, sorted_even_values):\n        l_prime[index] = value\n\n    return l_prime\n```"}
{"task_id": "HumanEval/38", "completion": "\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n", "raw_completion": "```python\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n```"}
{"task_id": "HumanEval/39", "completion": "\ndef prime_fib(n: int):\n\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    def fibonacci_sequence():\n        a, b = 0, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    count = 0\n    for i in fibonacci_sequence():\n        if is_prime(i):\n            count += 1\n            if count == n:\n                return i\n", "raw_completion": "```python\ndef prime_fib(n: int):\n\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    def fibonacci_sequence():\n        a, b = 0, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    count = 0\n    for i in fibonacci_sequence():\n        if is_prime(i):\n            count += 1\n            if count == n:\n                return i\n```"}
{"task_id": "HumanEval/4", "completion": "\nfrom typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers)/len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return mad\n", "raw_completion": "```python\nfrom typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers)/len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return mad\n```"}
{"task_id": "HumanEval/40", "completion": "\ndef triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n", "raw_completion": "```python\ndef triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n```"}
{"task_id": "HumanEval/41", "completion": "\ndef car_race_collision(n: int):\n    return n * (n - 1) // 2\n", "raw_completion": "```python\ndef car_race_collision(n: int):\n    return n * (n - 1) // 2\n```"}
{"task_id": "HumanEval/42", "completion": "\ndef incr_list(l: list):\n    return [x + 1 for x in l]\n", "raw_completion": "```python\ndef incr_list(l: list):\n    return [x + 1 for x in l]\n```"}
{"task_id": "HumanEval/43", "completion": "\ndef pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n", "raw_completion": "```python\ndef pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n```"}
{"task_id": "HumanEval/44", "completion": "\ndef change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])\n", "raw_completion": "```python\ndef change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])\n```"}
{"task_id": "HumanEval/45", "completion": "\ndef triangle_area(a, h):\n    return 0.5 * a * h\n", "raw_completion": "```python\ndef triangle_area(a, h):\n    return 0.5 * a * h\n```"}
{"task_id": "HumanEval/46", "completion": "\ndef fib4(n: int):\n    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    if n == 3: return 0\n\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    \n    return d\n", "raw_completion": "```python\ndef fib4(n: int):\n    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    if n == 3: return 0\n\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    \n    return d\n```"}
{"task_id": "HumanEval/47", "completion": "\ndef median(l: list):\n    l.sort()\n    length = len(l)\n    mid = length // 2\n    return l[mid] if length % 2 != 0 else (l[mid - 1] + l[mid]) / 2\n", "raw_completion": "```python\ndef median(l: list):\n    l.sort()\n    length = len(l)\n    mid = length // 2\n    return l[mid] if length % 2 != 0 else (l[mid - 1] + l[mid]) / 2\n```"}
{"task_id": "HumanEval/48", "completion": "\ndef is_palindrome(text: str):\n    return text == text[::-1]\n", "raw_completion": "```python\ndef is_palindrome(text: str):\n    return text == text[::-1]\n```"}
{"task_id": "HumanEval/49", "completion": "\ndef modp(n: int, p: int):\n    return pow(2, n, p)\n", "raw_completion": "```python\ndef modp(n: int, p: int):\n    return pow(2, n, p)\n```"}
{"task_id": "HumanEval/5", "completion": "\nfrom typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for num in numbers[:-1]:\n        result.extend([num, delimeter])\n    if numbers:\n        result.append(numbers[-1])\n    return result\n", "raw_completion": "```python\nfrom typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for num in numbers[:-1]:\n        result.extend([num, delimeter])\n    if numbers:\n        result.append(numbers[-1])\n    return result\n```"}
{"task_id": "HumanEval/50", "completion": "\ndef encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n", "raw_completion": "```python\ndef encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n```"}
{"task_id": "HumanEval/51", "completion": "\ndef remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])\n", "raw_completion": "```python\ndef remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])\n```"}
{"task_id": "HumanEval/52", "completion": "\ndef below_threshold(l: list, t: int):\n    return all(x < t for x in l)\n", "raw_completion": "```python\ndef below_threshold(l: list, t: int):\n    return all(x < t for x in l)\n```"}
{"task_id": "HumanEval/53", "completion": "\ndef add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n", "raw_completion": "```python\ndef add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n```"}
{"task_id": "HumanEval/54", "completion": "\ndef same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)\n", "raw_completion": "```python\ndef same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)\n```"}
{"task_id": "HumanEval/55", "completion": "\ndef fib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n", "raw_completion": "```python\ndef fib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n```"}
{"task_id": "HumanEval/56", "completion": "\ndef correct_bracketing(brackets: str):\n    count = 0\n    for b in brackets:\n        if b == \"<\":\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0\n", "raw_completion": "```python\ndef correct_bracketing(brackets: str):\n    count = 0\n    for b in brackets:\n        if b == \"<\":\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0\n```"}
{"task_id": "HumanEval/57", "completion": "\ndef monotonic(l: list):\n    if len(l) < 2:\n        return True\n    direction = l[1] - l[0]\n    for i in range(2, len(l)):\n        if (l[i] - l[i-1]) * direction < 0:\n            return False\n    return True\n", "raw_completion": "```python\ndef monotonic(l: list):\n    if len(l) < 2:\n        return True\n    direction = l[1] - l[0]\n    for i in range(2, len(l)):\n        if (l[i] - l[i-1]) * direction < 0:\n            return False\n    return True\n```"}
{"task_id": "HumanEval/58", "completion": "\ndef common(l1: list, l2: list):\n    return sorted(set(l1) & set(l2))\n", "raw_completion": "```python\ndef common(l1: list, l2: list):\n    return sorted(set(l1) & set(l2))\n```"}
{"task_id": "HumanEval/59", "completion": "\ndef largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n", "raw_completion": "```python\ndef largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n```"}
{"task_id": "HumanEval/6", "completion": "\nfrom typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = depth = 0\n        for paren in group:\n            if paren == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            else:\n                depth -= 1\n        result.append(max_depth)\n    return result\n", "raw_completion": "```python\nfrom typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = depth = 0\n        for paren in group:\n            if paren == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            else:\n                depth -= 1\n        result.append(max_depth)\n    return result\n```"}
{"task_id": "HumanEval/60", "completion": "\ndef sum_to_n(n: int):\n    return sum(range(1, n+1))\n", "raw_completion": "```python\ndef sum_to_n(n: int):\n    return sum(range(1, n+1))\n```"}
{"task_id": "HumanEval/61", "completion": "\ndef correct_bracketing(brackets: str):\n    count = 0\n    for b in brackets:\n        if b == '(':\n            count += 1\n        elif b == ')':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0\n", "raw_completion": "```python\ndef correct_bracketing(brackets: str):\n    count = 0\n    for b in brackets:\n        if b == '(':\n            count += 1\n        elif b == ')':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0\n```"}
{"task_id": "HumanEval/62", "completion": "\ndef derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]\n", "raw_completion": "```python\ndef derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]\n```"}
{"task_id": "HumanEval/63", "completion": "\ndef fibfib(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n", "raw_completion": "```python\ndef fibfib(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n```"}
{"task_id": "HumanEval/64", "completion": "\ndef vowels_count(s):\n    s = s.lower()\n    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s[-1] == \"y\":\n        count += 1\n    return count\n", "raw_completion": "```python\ndef vowels_count(s):\n    s = s.lower()\n    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s[-1] == \"y\":\n        count += 1\n    return count\n```"}
{"task_id": "HumanEval/65", "completion": "\ndef circular_shift(x, shift):\n    str_x = str(x)\n    length = len(str_x)\n    if shift > length:\n        return str_x[::-1]\n    return str_x[-shift % length:] + str_x[:-shift % length]\n", "raw_completion": "```python\ndef circular_shift(x, shift):\n    str_x = str(x)\n    length = len(str_x)\n    if shift > length:\n        return str_x[::-1]\n    return str_x[-shift % length:] + str_x[:-shift % length]\n```"}
{"task_id": "HumanEval/66", "completion": "\ndef digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())\n", "raw_completion": "```python\ndef digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())\n```"}
{"task_id": "HumanEval/67", "completion": "\n\ndef fruit_distribution(s,n):\n    s_list = s.split()\n    apples = int(s_list[0])\n    oranges = int(s_list[-2])\n    mangoes = n - apples - oranges\n    return mangoes\n\n", "raw_completion": "```python\n\ndef fruit_distribution(s,n):\n    s_list = s.split()\n    apples = int(s_list[0])\n    oranges = int(s_list[-2])\n    mangoes = n - apples - oranges\n    return mangoes\n\n```"}
{"task_id": "HumanEval/68", "completion": "\ndef pluck(arr):\n    smallest_even = None\n    index = 0\n    for i, node in enumerate(arr):\n        if node % 2 == 0 and (smallest_even is None or node < smallest_even):\n            smallest_even = node\n            index = i\n    return [smallest_even, index] if smallest_even is not None else []\n", "raw_completion": "```python\ndef pluck(arr):\n    smallest_even = None\n    index = 0\n    for i, node in enumerate(arr):\n        if node % 2 == 0 and (smallest_even is None or node < smallest_even):\n            smallest_even = node\n            index = i\n    return [smallest_even, index] if smallest_even is not None else []\n```"}
{"task_id": "HumanEval/69", "completion": "\ndef search(lst):\n    max_value = -1\n    for num in lst:\n        if num > max_value and num <= lst.count(num):\n            max_value = num\n    return max_value\n", "raw_completion": "```python\ndef search(lst):\n    max_value = -1\n    for num in lst:\n        if num > max_value and num <= lst.count(num):\n            max_value = num\n    return max_value\n```"}
{"task_id": "HumanEval/7", "completion": "\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]\n", "raw_completion": "```python\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]\n```"}
{"task_id": "HumanEval/70", "completion": "\ndef strange_sort_list(lst):\n    lst_sorted = sorted(lst)\n    result = []\n    while lst_sorted:\n        result.append(lst_sorted.pop(0))\n        if lst_sorted:\n            result.append(lst_sorted.pop(-1))\n    return result\n", "raw_completion": "```python\ndef strange_sort_list(lst):\n    lst_sorted = sorted(lst)\n    result = []\n    while lst_sorted:\n        result.append(lst_sorted.pop(0))\n        if lst_sorted:\n            result.append(lst_sorted.pop(-1))\n    return result\n```"}
{"task_id": "HumanEval/71", "completion": "\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c))**0.5\n        return round(area, 2)\n    else:\n        return -1\n\n", "raw_completion": "```python\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c))**0.5\n        return round(area, 2)\n    else:\n        return -1\n\n```"}
{"task_id": "HumanEval/72", "completion": "\ndef will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w\n", "raw_completion": "```python\ndef will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w\n```"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    changes = 0\n    i, j = 0, len(arr) - 1\n    while i < j:\n        if arr[i] != arr[j]:\n            changes += 1\n        i += 1\n        j -= 1\n    return changes", "raw_completion": "def smallest_change(arr):\n    changes = 0\n    i, j = 0, len(arr) - 1\n    while i < j:\n        if arr[i] != arr[j]:\n            changes += 1\n        i += 1\n        j -= 1\n    return changes"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    count1 = sum(len(i) for i in lst1)\n    count2 = sum(len(i) for i in lst2)\n    if count1 <= count2:\n        return lst1\n    else:\n        return lst2", "raw_completion": "def total_match(lst1, lst2):\n    count1 = sum(len(i) for i in lst1)\n    count2 = sum(len(i) for i in lst2)\n    if count1 <= count2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "completion": "\n\ndef is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if a < 100:\n        for i in range(2, a):\n            for j in range(i, a):\n                for k in range(j, a):\n                    if is_prime(i) and is_prime(j) and is_prime(k) and i * j * k == a:\n                        return True\n    return False\n\n", "raw_completion": "```python\n\ndef is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if a < 100:\n        for i in range(2, a):\n            for j in range(i, a):\n                for k in range(j, a):\n                    if is_prime(i) and is_prime(j) and is_prime(k) and i * j * k == a:\n                        return True\n    return False\n\n```"}
{"task_id": "HumanEval/76", "completion": "\ndef is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 0\n    while n ** power <= x:\n        if n ** power == x:\n            return True\n        power += 1\n    return False\n", "raw_completion": "```python\ndef is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 0\n    while n ** power <= x:\n        if n ** power == x:\n            return True\n        power += 1\n    return False\n```"}
{"task_id": "HumanEval/77", "completion": "\ndef iscube(a):\n    return round(abs(a)**(1/3))**3 == abs(a)\n", "raw_completion": "```python\ndef iscube(a):\n    return round(abs(a)**(1/3))**3 == abs(a)\n```"}
{"task_id": "HumanEval/78", "completion": "\ndef hex_key(num):\n    prime_hex_digits = \"2357BD\"\n    return sum(1 for ch in num if ch in prime_hex_digits)\n", "raw_completion": "```python\ndef hex_key(num):\n    prime_hex_digits = \"2357BD\"\n    return sum(1 for ch in num if ch in prime_hex_digits)\n```"}
{"task_id": "HumanEval/79", "completion": "\ndef decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\"\n", "raw_completion": "```python\ndef decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\"\n```"}
{"task_id": "HumanEval/8", "completion": "\nfrom typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_numbers = sum(numbers)\n    product_numbers = 1\n    for number in numbers:\n        product_numbers *= number\n    return sum_numbers, product_numbers\n", "raw_completion": "```python\nfrom typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_numbers = sum(numbers)\n    product_numbers = 1\n    for number in numbers:\n        product_numbers *= number\n    return sum_numbers, product_numbers\n```"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "raw_completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "\ndef numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n", "raw_completion": "```python\ndef numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n```"}
{"task_id": "HumanEval/82", "completion": "\ndef prime_length(string):\n    if len(string) < 2:\n        return False\n    for i in range(2, len(string)):\n        if len(string) % i == 0:\n            return False\n    return True\n", "raw_completion": "```python\ndef prime_length(string):\n    if len(string) < 2:\n        return False\n    for i in range(2, len(string)):\n        if len(string) % i == 0:\n            return False\n    return True\n```"}
{"task_id": "HumanEval/83", "completion": "\ndef starts_one_ends(n):\n    if n == 1:\n        return 2\n    return 20 * pow(10, n - 2)\n", "raw_completion": "```python\ndef starts_one_ends(n):\n    if n == 1:\n        return 2\n    return 20 * pow(10, n - 2)\n```"}
{"task_id": "HumanEval/84", "completion": "\ndef solve(N):\n    binary_N = bin(N)[2:]\n    sum_digits = sum(int(digit) for digit in binary_N)\n    return bin(sum_digits)[2:]\n", "raw_completion": "```python\ndef solve(N):\n    binary_N = bin(N)[2:]\n    sum_digits = sum(int(digit) for digit in binary_N)\n    return bin(sum_digits)[2:]\n```"}
{"task_id": "HumanEval/85", "completion": "\ndef add(lst):\n    return sum(val for i, val in enumerate(lst) if i % 2 != 0 and val % 2 == 0)\n", "raw_completion": "```python\ndef add(lst):\n    return sum(val for i, val in enumerate(lst) if i % 2 != 0 and val % 2 == 0)\n```"}
{"task_id": "HumanEval/86", "completion": "\ndef anti_shuffle(s):\n    words = s.split(' ')\n    sorted_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(sorted_words)\n", "raw_completion": "```python\ndef anti_shuffle(s):\n    words = s.split(' ')\n    sorted_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(sorted_words)\n```"}
{"task_id": "HumanEval/87", "completion": "\ndef get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, elem in enumerate(row):\n            if elem == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result\n", "raw_completion": "```python\ndef get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, elem in enumerate(row):\n            if elem == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result\n```"}
{"task_id": "HumanEval/88", "completion": "\ndef sort_array(array):\n    sorted_array = sorted(array)\n    if len(array) < 2 or sum([array[0], array[-1]]) % 2 == 1:\n        return sorted_array\n    return sorted_array[::-1]\n", "raw_completion": "```python\ndef sort_array(array):\n    sorted_array = sorted(array)\n    if len(array) < 2 or sum([array[0], array[-1]]) % 2 == 1:\n        return sorted_array\n    return sorted_array[::-1]\n```"}
{"task_id": "HumanEval/89", "completion": "\ndef encrypt(s):\n    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            shift = 2 * 2\n            if char.islower():\n                encrypted += chr(((ord(char) - 97 + shift) % 26) + 97)\n            else:\n                encrypted += chr(((ord(char) - 65 + shift) % 26) + 65)\n        else:\n            encrypted += char\n    return encrypted\n", "raw_completion": "```python\ndef encrypt(s):\n    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            shift = 2 * 2\n            if char.islower():\n                encrypted += chr(((ord(char) - 97 + shift) % 26) + 97)\n            else:\n                encrypted += chr(((ord(char) - 65 + shift) % 26) + 65)\n        else:\n            encrypted += char\n    return encrypted\n```"}
{"task_id": "HumanEval/9", "completion": "\nfrom typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_list = []\n    max_value = float('-inf')\n    \n    for number in numbers:\n        max_value = max(max_value, number)\n        max_list.append(max_value)\n    \n    return max_list\n", "raw_completion": "```python\nfrom typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_list = []\n    max_value = float('-inf')\n    \n    for number in numbers:\n        max_value = max(max_value, number)\n        max_list.append(max_value)\n    \n    return max_list\n```"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    unique_lst = list(set(lst))\n    if len(unique_lst) < 2:\n        return None\n    else:\n        unique_lst.sort()\n        return unique_lst[1]", "raw_completion": "def next_smallest(lst):\n    unique_lst = list(set(lst))\n    if len(unique_lst) < 2:\n        return None\n    else:\n        unique_lst.sort()\n        return unique_lst[1]"}
{"task_id": "HumanEval/91", "completion": "\ndef is_bored(S):\n    boredoms = 0\n    sentences = S.replace('!', '.').replace('?', '.').split('.')\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0] == 'I':\n            boredoms += 1\n    return boredoms\n", "raw_completion": "```python\ndef is_bored(S):\n    boredoms = 0\n    sentences = S.replace('!', '.').replace('?', '.').split('.')\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0] == 'I':\n            boredoms += 1\n    return boredoms\n```"}
{"task_id": "HumanEval/92", "completion": "\ndef any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x + y == z or x + z == y or y + z == x\n    else:\n        return False\n", "raw_completion": "```python\ndef any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x + y == z or x + z == y or y + z == x\n    else:\n        return False\n```"}
{"task_id": "HumanEval/93", "completion": "\ndef encode(message):\n    def switch_case(ch):\n        if ch.islower():\n            return ch.upper()\n        return ch.lower()\n\n    def swap_vowel(ch):\n        vowels = \"aeiouAEIOU\"\n        if ch in vowels:\n            pos = vowels.index(ch)\n            return vowels[(pos + 2) % len(vowels)]\n        return ch\n\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            swapped_ch = swap_vowel(ch)\n            result += switch_case(swapped_ch)\n        else:\n            result += ch\n    return result\n", "raw_completion": "```python\ndef encode(message):\n    def switch_case(ch):\n        if ch.islower():\n            return ch.upper()\n        return ch.lower()\n\n    def swap_vowel(ch):\n        vowels = \"aeiouAEIOU\"\n        if ch in vowels:\n            pos = vowels.index(ch)\n            return vowels[(pos + 2) % len(vowels)]\n        return ch\n\n    result = \"\"\n    for ch in message:\n        if ch.isalpha():\n            swapped_ch = swap_vowel(ch)\n            result += switch_case(swapped_ch)\n        else:\n            result += ch\n    return result\n```"}
{"task_id": "HumanEval/94", "completion": "\ndef skjkasdkd(lst):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    largest_prime = max(filter(is_prime, lst))\n    return sum(int(digit) for digit in str(largest_prime))\n", "raw_completion": "```python\ndef skjkasdkd(lst):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    largest_prime = max(filter(is_prime, lst))\n    return sum(int(digit) for digit in str(largest_prime))\n```"}
{"task_id": "HumanEval/95", "completion": "\ndef check_dict_case(dict):\n    if not dict:\n        return False\n    lower_keys = [k for k in dict.keys() if isinstance(k, str) and k.islower()]\n    upper_keys = [k for k in dict.keys() if isinstance(k, str) and k.isupper()]\n    return len(lower_keys) == len(dict) or len(upper_keys) == len(dict)\n", "raw_completion": "```python\ndef check_dict_case(dict):\n    if not dict:\n        return False\n    lower_keys = [k for k in dict.keys() if isinstance(k, str) and k.islower()]\n    upper_keys = [k for k in dict.keys() if isinstance(k, str) and k.isupper()]\n    return len(lower_keys) == len(dict) or len(upper_keys) == len(dict)\n```"}
{"task_id": "HumanEval/96", "completion": "\ndef count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for num in range(n):\n        if is_prime(num):\n            primes.append(num)\n    return primes\n", "raw_completion": "```python\ndef count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for num in range(n):\n        if is_prime(num):\n            primes.append(num)\n    return primes\n```"}
{"task_id": "HumanEval/97", "completion": "\ndef multiply(a, b):\n    return (a % 10) * (b % 10)\n", "raw_completion": "```python\ndef multiply(a, b):\n    return (a % 10) * (b % 10)\n```"}
{"task_id": "HumanEval/98", "completion": "\ndef count_upper(s):\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in \"AEIOU\")\n", "raw_completion": "```python\ndef count_upper(s):\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in \"AEIOU\")\n```"}
{"task_id": "HumanEval/99", "completion": "\ndef closest_integer(value):\n    float_value = float(value)\n    rounded = round(float_value)\n    if abs(float_value - rounded) == 0.5 and rounded % 2 != 0:\n        rounded += -1 if float_value < 0 else 1\n    return rounded\n", "raw_completion": "```python\ndef closest_integer(value):\n    float_value = float(value)\n    rounded = round(float_value)\n    if abs(float_value - rounded) == 0.5 and rounded % 2 != 0:\n        rounded += -1 if float_value < 0 else 1\n    return rounded\n```"}
