{"task_id": "HumanEval/0", "completion": "\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    return any(abs(numbers[i] - numbers[j]) < threshold for i in range(len(numbers)) for j in range(i+1, len(numbers)))\n", "raw_completion": "```python\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    return any(abs(numbers[i] - numbers[j]) < threshold for i in range(len(numbers)) for j in range(i+1, len(numbers)))\n```"}
{"task_id": "HumanEval/1", "completion": "\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    return [group.replace(\" \", \"\") for group in paren_string.split(\")\")]\n", "raw_completion": "```python\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    return [group.replace(\" \", \"\") for group in paren_string.split(\")\")]\n```"}
{"task_id": "HumanEval/10", "completion": "\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    \n    def is_palindrome(string: str) -> bool:\n        \"\"\" Test if given string is a palindrome \"\"\"\n        return string == string[::-1]\n    \n    for i in range(len(string)-1, -1, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string\n", "raw_completion": "```python\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    \n    def is_palindrome(string: str) -> bool:\n        \"\"\" Test if given string is a palindrome \"\"\"\n        return string == string[::-1]\n    \n    for i in range(len(string)-1, -1, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string\n```"}
{"task_id": "HumanEval/100", "completion": "\ndef make_a_pile(n):\n    return [2 * i + n + 1 for i in range(n)]\n", "raw_completion": "```python\ndef make_a_pile(n):\n    return [2 * i + n + 1 for i in range(n)]\n```\nNote: The above code assumes that `n` is a positive integer."}
{"task_id": "HumanEval/101", "completion": "\ndef words_string(s):\n    return s.replace(\",\", \" \").split()\n", "raw_completion": "```python\ndef words_string(s):\n    return s.replace(\",\", \" \").split()\n```"}
{"task_id": "HumanEval/102", "completion": "\ndef choose_num(x, y):\n    return max(num for num in range(x, y+1) if num % 2 == 0, default=-1)\n", "raw_completion": "```python\ndef choose_num(x, y):\n    return max(num for num in range(x, y+1) if num % 2 == 0, default=-1)\n```"}
{"task_id": "HumanEval/103", "completion": "\ndef rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)\n", "raw_completion": "```python\ndef rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)\n```"}
{"task_id": "HumanEval/104", "completion": "\ndef unique_digits(x):\n    return sorted([num for num in x if all(digit % 2 != 0 for digit in str(num))])\n", "raw_completion": "```python\ndef unique_digits(x):\n    return sorted([num for num in x if all(digit % 2 != 0 for digit in str(num))])\n```"}
{"task_id": "HumanEval/105", "completion": "\ndef by_length(arr):\n    names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    arr = [x for x in arr if 1 <= x <= 9]\n    arr.sort()\n    arr.reverse()\n    return [names[x-1] for x in arr]\n", "raw_completion": "```python\ndef by_length(arr):\n    names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    arr = [x for x in arr if 1 <= x <= 9]\n    arr.sort()\n    arr.reverse()\n    return [names[x-1] for x in arr]\n```"}
{"task_id": "HumanEval/106", "completion": "\ndef f(n):\n    return [math.factorial(i) if i % 2 == 0 else sum(range(1, i+1)) for i in range(1, n+1)]\n", "raw_completion": "```python\ndef f(n):\n    return [math.factorial(i) if i % 2 == 0 else sum(range(1, i+1)) for i in range(1, n+1)]\n```"}
{"task_id": "HumanEval/107", "completion": "\n\ndef even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n\n", "raw_completion": "```python\n\ndef even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n\n```"}
{"task_id": "HumanEval/108", "completion": "\ndef count_nums(arr):\n    return sum([1 for num in arr if sum(int(digit) for digit in str(abs(num))) > 0])\n", "raw_completion": "```python\ndef count_nums(arr):\n    return sum([1 for num in arr if sum(int(digit) for digit in str(abs(num))) > 0])\n```"}
{"task_id": "HumanEval/109", "completion": "\ndef move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    sorted_arr = sorted(arr)\n    return any(arr == sorted_arr[i:] + sorted_arr[:i] for i in range(len(arr)))\n", "raw_completion": "```python\ndef move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    sorted_arr = sorted(arr)\n    return any(arr == sorted_arr[i:] + sorted_arr[:i] for i in range(len(arr)))\n```"}
{"task_id": "HumanEval/11", "completion": "\ndef string_xor(a: str, b: str) -> str:\n    return bin(int(a, 2) ^ int(b, 2))[2:]\n", "raw_completion": "```python\ndef string_xor(a: str, b: str) -> str:\n    return bin(int(a, 2) ^ int(b, 2))[2:]\n```\nor\n```python\ndef string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n```"}
{"task_id": "HumanEval/110", "completion": "\ndef exchange(lst1, lst2):\n    evens_in_lst1 = sum(x % 2 == 0 for x in lst1)\n    odds_in_lst2 = sum(x % 2 == 1 for x in lst2)\n    return \"YES\" if evens_in_lst1 >= odds_in_lst2 else \"NO\"\n", "raw_completion": "```python\ndef exchange(lst1, lst2):\n    evens_in_lst1 = sum(x % 2 == 0 for x in lst1)\n    odds_in_lst2 = sum(x % 2 == 1 for x in lst2)\n    return \"YES\" if evens_in_lst1 >= odds_in_lst2 else \"NO\"\n```"}
{"task_id": "HumanEval/111", "completion": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n    \"\"\"\n    letter_count = {}\n    for letter in test.split():\n        letter_count[letter] = letter_count.get(letter, 0) + 1\n    max_count = max(letter_count.values())\n    return {letter: count for letter, count in letter_count.items() if count == max_count}\n", "raw_completion": "```python\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n    \"\"\"\n    letter_count = {}\n    for letter in test.split():\n        letter_count[letter] = letter_count.get(letter, 0) + 1\n    max_count = max(letter_count.values())\n    return {letter: count for letter, count in letter_count.items() if count == max_count}\n```"}
{"task_id": "HumanEval/112", "completion": "\ndef reverse_delete(s, c):\n    result = ''.join(filter(lambda x: x not in c, s))\n    return result, result == result[::-1]\n", "raw_completion": "```python\ndef reverse_delete(s, c):\n    result = ''.join(filter(lambda x: x not in c, s))\n    return result, result == result[::-1]\n```"}
{"task_id": "HumanEval/113", "completion": "\ndef odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(int(digit) % 2 != 0 for digit in string), string.count('i'), string, string.count('i')) for string in lst]\n", "raw_completion": "```python\ndef odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(int(digit) % 2 != 0 for digit in string), string.count('i'), string, string.count('i')) for string in lst]\n```"}
{"task_id": "HumanEval/114", "completion": "import math\n\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    min_sum = math.inf\n    current_sum = 0\n    for num in nums:\n        current_sum = max(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "raw_completion": "import math\n\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    min_sum = math.inf\n    current_sum = 0\n    for num in nums:\n        current_sum = max(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "\ndef max_fill(grid, capacity):\n    num_buckets = 0\n    for row in grid:\n        for well in row:\n            num_buckets += math.ceil(well / capacity)\n    return num_buckets\n", "raw_completion": "```python\ndef max_fill(grid, capacity):\n    num_buckets = 0\n    for row in grid:\n        for well in row:\n            num_buckets += math.ceil(well / capacity)\n    return num_buckets\n```"}
{"task_id": "HumanEval/116", "completion": "\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n", "raw_completion": "```python\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n```"}
{"task_id": "HumanEval/117", "completion": "\n\ndef select_words(s, n):\n    words = s.split()\n    consonant_words = []\n    for word in words:\n        consonant_count = 0\n        for letter in word:\n            if letter.lower() not in ['a', 'e', 'i', 'o', 'u']:\n                consonant_count += 1\n        if consonant_count == n:\n            consonant_words.append(word)\n    return consonant_words\n\n", "raw_completion": "```python\n\ndef select_words(s, n):\n    words = s.split()\n    consonant_words = []\n    for word in words:\n        consonant_count = 0\n        for letter in word:\n            if letter.lower() not in ['a', 'e', 'i', 'o', 'u']:\n                consonant_count += 1\n        if consonant_count == n:\n            consonant_words.append(word)\n    return consonant_words\n\n```"}
{"task_id": "HumanEval/118", "completion": "\n\ndef get_closest_vowel(word):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(word) - 2, 0, -1):\n        if word[i].lower() in vowels and word[i-1].lower() not in vowels and word[i+1].lower() not in vowels:\n            return word[i]\n    return \"\"\n\n", "raw_completion": "```python\n\ndef get_closest_vowel(word):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(word) - 2, 0, -1):\n        if word[i].lower() in vowels and word[i-1].lower() not in vowels and word[i+1].lower() not in vowels:\n            return word[i]\n    return \"\"\n\n```"}
{"task_id": "HumanEval/119", "completion": "\ndef match_parens(lst):\n    open_count = 0\n    for char in ''.join(lst):\n        if char == '(':\n            open_count += 1\n        elif char == ')':\n            if open_count > 0:\n                open_count -= 1\n            else:\n                return 'No'\n    if open_count == 0:\n        return 'Yes'\n    else:\n        return 'No'\n", "raw_completion": "```python\ndef match_parens(lst):\n    open_count = 0\n    for char in ''.join(lst):\n        if char == '(':\n            open_count += 1\n        elif char == ')':\n            if open_count > 0:\n                open_count -= 1\n            else:\n                return 'No'\n    if open_count == 0:\n        return 'Yes'\n    else:\n        return 'No'\n```"}
{"task_id": "HumanEval/12", "completion": "\ndef longest(strings: List[str]) -> Optional[str]:\n    return max(strings, key=len) if strings else None\n", "raw_completion": "```python\ndef longest(strings: List[str]) -> Optional[str]:\n    return max(strings, key=len) if strings else None\n```"}
{"task_id": "HumanEval/120", "completion": "\ndef maximum(arr, k):\n    return sorted(arr)[-k:]\n", "raw_completion": "```python\ndef maximum(arr, k):\n    return sorted(arr)[-k:]\n```"}
{"task_id": "HumanEval/121", "completion": "\ndef solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)\n", "raw_completion": "```python\ndef solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)\n```"}
{"task_id": "HumanEval/122", "completion": "\ndef add_elements(arr, k):\n    return sum(num for num in arr[:k] if abs(num) < 100)\n", "raw_completion": "```python\ndef add_elements(arr, k):\n    return sum(num for num in arr[:k] if abs(num) < 100)\n```"}
{"task_id": "HumanEval/123", "completion": "\ndef get_odd_collatz(n):\n    seq = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        seq.append(n)\n    return sorted(set(filter(lambda x: x % 2 == 1, seq)))\n", "raw_completion": "```python\ndef get_odd_collatz(n):\n    seq = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        seq.append(n)\n    return sorted(set(filter(lambda x: x % 2 == 1, seq)))\n```"}
{"task_id": "HumanEval/124", "completion": "\nimport re\n\ndef valid_date(date):\n    if not isinstance(date, str):\n        return False\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    month, day, year = map(int, date.split('-'))\n    if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    return True\n", "raw_completion": "```python\nimport re\n\ndef valid_date(date):\n    if not isinstance(date, str):\n        return False\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    month, day, year = map(int, date.split('-'))\n    if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    return True\n```"}
{"task_id": "HumanEval/125", "completion": "\ndef split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if 'a' <= char <= 'z' and ord(char) % 2 != 0)\n", "raw_completion": "```python\ndef split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if 'a' <= char <= 'z' and ord(char) % 2 != 0)\n```"}
{"task_id": "HumanEval/126", "completion": "\ndef is_sorted(lst):\n    return lst == sorted(lst) and all(lst.count(x) == 1 for x in lst)\n", "raw_completion": "Here's the complete function definition for the task:\n\n```python\ndef is_sorted(lst):\n    return lst == sorted(lst) and all(lst.count(x) == 1 for x in lst)\n```"}
{"task_id": "HumanEval/127", "completion": "\nimport math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n    if is_prime(length):\n        return \"YES\"\n    return \"NO\"\n", "raw_completion": "```python\nimport math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n    if is_prime(length):\n        return \"YES\"\n    return \"NO\"\n```"}
{"task_id": "HumanEval/128", "completion": "\ndef prod_signs(arr):\n    if len(arr) == 0:\n        return None\n    sign = 1\n    magnitude_sum = 0\n    for num in arr:\n        sign *= num // abs(num) if num != 0 else 0\n        magnitude_sum += abs(num)\n    return sign * magnitude_sum\n", "raw_completion": "```python\ndef prod_signs(arr):\n    if len(arr) == 0:\n        return None\n    sign = 1\n    magnitude_sum = 0\n    for num in arr:\n        sign *= num // abs(num) if num != 0 else 0\n        magnitude_sum += abs(num)\n    return sign * magnitude_sum\n```"}
{"task_id": "HumanEval/129", "completion": "\ndef minPath(grid, k):\n    N = len(grid)\n    values = []\n    for i in range(N):\n        for j in range(N):\n            values.append(grid[i][j])\n    values.sort()\n    return values[:k]\n", "raw_completion": "```python\ndef minPath(grid, k):\n    N = len(grid)\n    values = []\n    for i in range(N):\n        for j in range(N):\n            values.append(grid[i][j])\n    values.sort()\n    return values[:k]\n```"}
{"task_id": "HumanEval/13", "completion": "\nimport math\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    return math.gcd(a, b)\n", "raw_completion": "```python\nimport math\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    return math.gcd(a, b)\n```"}
{"task_id": "HumanEval/130", "completion": "\ndef tri(n):\n    tribonacci = [3]\n    if n == 0:\n        return tribonacci\n    tribonacci.append(1)\n    if n == 1:\n        return tribonacci\n    tribonacci.append(n//2 + 1)\n    for i in range(3, n+1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i//2)\n        else:\n            tribonacci.append(tribonacci[i-1] + tribonacci[i-2] + tribonacci[i+1])\n    return tribonacci\n  ", "raw_completion": "```python\ndef tri(n):\n    tribonacci = [3]\n    if n == 0:\n        return tribonacci\n    tribonacci.append(1)\n    if n == 1:\n        return tribonacci\n    tribonacci.append(n//2 + 1)\n    for i in range(3, n+1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i//2)\n        else:\n            tribonacci.append(tribonacci[i-1] + tribonacci[i-2] + tribonacci[i+1])\n    return tribonacci\n  ```"}
{"task_id": "HumanEval/131", "completion": "\ndef digits(n):\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product if product > 1 else 0\n", "raw_completion": "```python\ndef digits(n):\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product if product > 1 else 0\n```"}
{"task_id": "HumanEval/132", "completion": "\n\ndef is_nested(string):\n    # Remove any characters that are not square brackets\n    string = ''.join(char for char in string if char=='[' or char==']')\n    \n    # Check if the string contains a nested subsequence\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) > 0 and stack[-1] == '[':\n                stack.pop()\n    \n    return len(stack) > 0\n\n", "raw_completion": "```python\n\ndef is_nested(string):\n    # Remove any characters that are not square brackets\n    string = ''.join(char for char in string if char=='[' or char==']')\n    \n    # Check if the string contains a nested subsequence\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) > 0 and stack[-1] == '[':\n                stack.pop()\n    \n    return len(stack) > 0\n\n```"}
{"task_id": "HumanEval/133", "completion": "\nimport math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])\n", "raw_completion": "```python\nimport math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])\n```"}
{"task_id": "HumanEval/134", "completion": "\ndef check_if_last_char_is_a_letter(txt):\n    words = txt.split()\n    if len(words) == 0:\n        return False\n    last_word = words[-1]\n    if not last_word.isalpha():\n        return False\n    last_char = last_word[-1]\n    if last_char.isalpha():\n        return True\n    else:\n        return False\n", "raw_completion": "```python\ndef check_if_last_char_is_a_letter(txt):\n    words = txt.split()\n    if len(words) == 0:\n        return False\n    last_word = words[-1]\n    if not last_word.isalpha():\n        return False\n    last_char = last_word[-1]\n    if last_char.isalpha():\n        return True\n    else:\n        return False\n```"}
{"task_id": "HumanEval/135", "completion": "\ndef can_arrange(arr):\n    for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1\n", "raw_completion": "```python\ndef can_arrange(arr):\n    for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1\n```"}
{"task_id": "HumanEval/136", "completion": "\ndef largest_smallest_integers(lst):\n    neg_integers = [num for num in lst if num < 0]\n    pos_integers = [num for num in lst if num > 0]\n    \n    max_neg = max(neg_integers) if neg_integers else None\n    min_pos = min(pos_integers) if pos_integers else None\n    \n    return (max_neg, min_pos)\n", "raw_completion": "```\ndef largest_smallest_integers(lst):\n    neg_integers = [num for num in lst if num < 0]\n    pos_integers = [num for num in lst if num > 0]\n    \n    max_neg = max(neg_integers) if neg_integers else None\n    min_pos = min(pos_integers) if pos_integers else None\n    \n    return (max_neg, min_pos)\n```"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if a == b:\n        return None\n    \n    if isinstance(a, str) and isinstance(b, str):\n        if \",\" in a:\n            a = a.replace(\",\", \".\")\n        if \",\" in b:\n            b = b.replace(\",\", \".\")\n        if float(a) > float(b):\n            return a\n        else:\n            return b\n    \n    if isinstance(a, str):\n        if \",\" in a:\n            a = a.replace(\",\", \".\")\n        if float(a) > b:\n            return a\n        else:\n            return b\n    \n    if isinstance(b, str):\n        if \",\" in b:\n            b = b.replace(\",\", \".\")\n        if a > float(b):\n            return a\n        else:\n            return b\n    \n    if isinstance(a, int) or isinstance(a, float):\n        if isinstance(b, int) or isinstance(b, float):\n            if a > b:\n                return a\n            else:\n                return b\n    \n    return None", "raw_completion": "def compare_one(a, b):\n    if a == b:\n        return None\n    \n    if isinstance(a, str) and isinstance(b, str):\n        if \",\" in a:\n            a = a.replace(\",\", \".\")\n        if \",\" in b:\n            b = b.replace(\",\", \".\")\n        if float(a) > float(b):\n            return a\n        else:\n            return b\n    \n    if isinstance(a, str):\n        if \",\" in a:\n            a = a.replace(\",\", \".\")\n        if float(a) > b:\n            return a\n        else:\n            return b\n    \n    if isinstance(b, str):\n        if \",\" in b:\n            b = b.replace(\",\", \".\")\n        if a > float(b):\n            return a\n        else:\n            return b\n    \n    if isinstance(a, int) or isinstance(a, float):\n        if isinstance(b, int) or isinstance(b, float):\n            if a > b:\n                return a\n            else:\n                return b\n    \n    return None"}
{"task_id": "HumanEval/138", "completion": "\ndef is_equal_to_sum_even(n):\n    return n % 4 == 0 and n >= 8\n", "raw_completion": "```python\ndef is_equal_to_sum_even(n):\n    return n % 4 == 0 and n >= 8\n```"}
{"task_id": "HumanEval/139", "completion": "\ndef special_factorial(n):\n    factorial = 1\n    for i in range(n, 0, -1):\n        factorial *= i\n    return factorial\n", "raw_completion": "```python\ndef special_factorial(n):\n    factorial = 1\n    for i in range(n, 0, -1):\n        factorial *= i\n    return factorial\n```\n"}
{"task_id": "HumanEval/14", "completion": "\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]\n", "raw_completion": "```python\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]\n```"}
{"task_id": "HumanEval/140", "completion": "\ndef fix_spaces(text):\n    return text.replace(\" \", \"_\").replace(\"   \", \"-\").replace(\"  \", \"_\")\n", "raw_completion": "```python\ndef fix_spaces(text):\n    return text.replace(\" \", \"_\").replace(\"   \", \"-\").replace(\"  \", \"_\")\n```"}
{"task_id": "HumanEval/141", "completion": "\nimport re\n\ndef file_name_check(file_name):\n    if re.match(r'^[a-zA-Z][a-zA-Z0-9]*\\.[txt|exe|dll]$', file_name):\n        return 'Yes'\n    else:\n        return 'No'\n", "raw_completion": "```python\nimport re\n\ndef file_name_check(file_name):\n    if re.match(r'^[a-zA-Z][a-zA-Z0-9]*\\.[txt|exe|dll]$', file_name):\n        return 'Yes'\n    else:\n        return 'No'\n```"}
{"task_id": "HumanEval/142", "completion": "\ndef sum_squares(lst):\n    return sum([x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst)])\n", "raw_completion": "```python\ndef sum_squares(lst):\n    return sum([x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst)])\n```"}
{"task_id": "HumanEval/143", "completion": "\ndef words_in_sentence(sentence):\n    def is_prime(number):\n        if number < 2:\n            return False\n        for i in range(2, int(number ** 0.5) + 1):\n            if number % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return ' '.join(result)\n", "raw_completion": "```python\ndef words_in_sentence(sentence):\n    def is_prime(number):\n        if number < 2:\n            return False\n        for i in range(2, int(number ** 0.5) + 1):\n            if number % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return ' '.join(result)\n```"}
{"task_id": "HumanEval/144", "completion": "\ndef simplify(x, n):\n    result = float(x) * float(n)\n    return result.is_integer()\n", "raw_completion": "```python\ndef simplify(x, n):\n    result = float(x) * float(n)\n    return result.is_integer()\n```"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(x)), nums.index(x)))", "raw_completion": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(x)), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "\n\ndef specialFilter(nums):\n    return sum([1 for num in nums if num > 10 and str(num)[0] % 2 != 0 and str(num)[-1] % 2 != 0])\n\n", "raw_completion": "```python\n\ndef specialFilter(nums):\n    return sum([1 for num in nums if num > 10 and str(num)[0] % 2 != 0 and str(num)[-1] % 2 != 0])\n\n```"}
{"task_id": "HumanEval/147", "completion": "\ndef get_max_triples(n):\n    count = 0\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n", "raw_completion": "```python\ndef get_max_triples(n):\n    count = 0\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n```"}
{"task_id": "HumanEval/148", "completion": "\ndef bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    if index1 > index2:\n        index1, index2 = index2, index1\n    \n    return tuple(planets[index1+1:index2])\n", "raw_completion": "```python\ndef bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    if index1 > index2:\n        index1, index2 = index2, index1\n    \n    return tuple(planets[index1+1:index2])\n```"}
{"task_id": "HumanEval/149", "completion": "\ndef sorted_list_sum(lst):\n    return sorted([s for s in lst if len(s) % 2 == 0], key=lambda x: (len(x), x))\n", "raw_completion": "```python\ndef sorted_list_sum(lst):\n    return sorted([s for s in lst if len(s) % 2 == 0], key=lambda x: (len(x), x))\n```"}
{"task_id": "HumanEval/15", "completion": "\ndef string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))\n", "raw_completion": "```python\ndef string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))\n```"}
{"task_id": "HumanEval/150", "completion": "\nimport math\n\ndef x_or_y(n, x, y):\n    if n < 2:\n        return y\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    return x\n\n", "raw_completion": "```python\nimport math\n\ndef x_or_y(n, x, y):\n    if n < 2:\n        return y\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    return x\n\n```"}
{"task_id": "HumanEval/151", "completion": "\ndef double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and isinstance(x, int) and x % 2 != 0)\n", "raw_completion": "```python\ndef double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and isinstance(x, int) and x % 2 != 0)\n```"}
{"task_id": "HumanEval/152", "completion": "\ndef compare(game, guess):\n    return [0 if game[i] == guess[i] else abs(game[i] - guess[i]) for i in range(len(game))]\n", "raw_completion": "```python\ndef compare(game, guess):\n    return [0 if game[i] == guess[i] else abs(game[i] - guess[i]) for i in range(len(game))]\n```"}
{"task_id": "HumanEval/153", "completion": "\ndef Strongest_Extension(class_name, extensions):\n    strongest = None\n    strength = None\n    for extension in extensions:\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        curr_strength = CAP - SM\n        if strength is None or curr_strength > strength:\n            strength = curr_strength\n            strongest = extension\n    return class_name + '.' + strongest\n\n", "raw_completion": "```python\ndef Strongest_Extension(class_name, extensions):\n    strongest = None\n    strength = None\n    for extension in extensions:\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        curr_strength = CAP - SM\n        if strength is None or curr_strength > strength:\n            strength = curr_strength\n            strongest = extension\n    return class_name + '.' + strongest\n\n```"}
{"task_id": "HumanEval/154", "completion": "\n\ndef cycpattern_check(a, b):\n    return b in a * 2\n\n", "raw_completion": "```python\n\ndef cycpattern_check(a, b):\n    return b in a * 2\n\n```"}
{"task_id": "HumanEval/155", "completion": "\ndef even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n", "raw_completion": "```python\ndef even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n```"}
{"task_id": "HumanEval/156", "completion": "\ndef int_to_mini_roman(number):\n    roman_numerals = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n\n    result = ''\n    for decimal, numeral in roman_numerals.items():\n        result += numeral * (number // decimal)\n        number %= decimal\n\n    return result\n", "raw_completion": "```python\ndef int_to_mini_roman(number):\n    roman_numerals = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n\n    result = ''\n    for decimal, numeral in roman_numerals.items():\n        result += numeral * (number // decimal)\n        number %= decimal\n\n    return result\n```"}
{"task_id": "HumanEval/157", "completion": "\ndef right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2\n", "raw_completion": "```python\ndef right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2\n```"}
{"task_id": "HumanEval/158", "completion": "\ndef find_max(words):\n    return max(words, key=lambda x: (len(set(x)), x))\n", "raw_completion": "```python\ndef find_max(words):\n    return max(words, key=lambda x: (len(set(x)), x))\n```"}
{"task_id": "HumanEval/159", "completion": "\ndef eat(number, need, remaining):\n    total_carrots = number + min(need, remaining)\n    carrots_left = max(0, remaining - need)\n    return [total_carrots, carrots_left]\n", "raw_completion": "```python\ndef eat(number, need, remaining):\n    total_carrots = number + min(need, remaining)\n    carrots_left = max(0, remaining - need)\n    return [total_carrots, carrots_left]\n```"}
{"task_id": "HumanEval/16", "completion": "\ndef count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))\n", "raw_completion": "```python\ndef count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))\n```"}
{"task_id": "HumanEval/160", "completion": "\n\ndef do_algebra(operator, operand):\n    expression = str(operand[0])\n    for i, op in enumerate(operator):\n        expression += op + str(operand[i+1])\n    return eval(expression)\n\n", "raw_completion": "```python\n\ndef do_algebra(operator, operand):\n    expression = str(operand[0])\n    for i, op in enumerate(operator):\n        expression += op + str(operand[i+1])\n    return eval(expression)\n\n```\n\nNote: This code constructs a string representation of the algebraic expression using the given operator and operand lists. It then uses the `eval` function to evaluate the expression and return the result."}
{"task_id": "HumanEval/161", "completion": "\ndef solve(s):\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in s]) if any(char.isalpha() for char in s) else s[::-1]\n", "raw_completion": "```python\ndef solve(s):\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in s]) if any(char.isalpha() for char in s) else s[::-1]\n```"}
{"task_id": "HumanEval/162", "completion": "\nimport hashlib\n\ndef string_to_md5(text):\n    if text:\n        return hashlib.md5(text.encode()).hexdigest()\n    else:\n        return None\n", "raw_completion": "```python\nimport hashlib\n\ndef string_to_md5(text):\n    if text:\n        return hashlib.md5(text.encode()).hexdigest()\n    else:\n        return None\n```"}
{"task_id": "HumanEval/163", "completion": "\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n\n    return list(filter(lambda x: int(x) % 2 == 0, [str(i) for i in range(min(a, b), max(a, b)+1)]))\n", "raw_completion": "```python\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n\n    return list(filter(lambda x: int(x) % 2 == 0, [str(i) for i in range(min(a, b), max(a, b)+1)]))\n```"}
{"task_id": "HumanEval/17", "completion": "\nfrom typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    return [4 if note == 'o' else 2 if note == 'o|' else 1 for note in music_string.split()]\n", "raw_completion": "```python\nfrom typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    return [4 if note == 'o' else 2 if note == 'o|' else 1 for note in music_string.split()]\n```"}
{"task_id": "HumanEval/18", "completion": "\ndef how_many_times(string: str, substring: str) -> int:\n    count = 0\n    if len(substring) == 0:\n        return count\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n", "raw_completion": "```python\ndef how_many_times(string: str, substring: str) -> int:\n    count = 0\n    if len(substring) == 0:\n        return count\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n```"}
{"task_id": "HumanEval/19", "completion": "\ndef sort_numbers(numbers: str) -> str:\n    numbers_list = numbers.split()\n    numbers_dict = {'zero': '0', 'one': '1', 'two': '2', 'three': '3', 'four': '4', 'five': '5', 'six': '6', 'seven': '7', 'eight': '8', 'nine': '9'}\n    sorted_numbers = sorted(numbers_list, key=lambda x: numbers_dict[x])\n    return ' '.join(sorted_numbers)\n", "raw_completion": "```python\ndef sort_numbers(numbers: str) -> str:\n    numbers_list = numbers.split()\n    numbers_dict = {'zero': '0', 'one': '1', 'two': '2', 'three': '3', 'four': '4', 'five': '5', 'six': '6', 'seven': '7', 'eight': '8', 'nine': '9'}\n    sorted_numbers = sorted(numbers_list, key=lambda x: numbers_dict[x])\n    return ' '.join(sorted_numbers)\n```"}
{"task_id": "HumanEval/2", "completion": "\ndef truncate_number(number: float) -> float:\n    return number % 1\n", "raw_completion": "```python\ndef truncate_number(number: float) -> float:\n    return number % 1\n```"}
{"task_id": "HumanEval/20", "completion": "\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_elements = []\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_elements = [numbers[i], numbers[i + 1]]\n    return tuple(closest_elements)\n", "raw_completion": "```python\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_elements = []\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_elements = [numbers[i], numbers[i + 1]]\n    return tuple(closest_elements)\n```"}
{"task_id": "HumanEval/21", "completion": "\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n", "raw_completion": "```python\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n```"}
{"task_id": "HumanEval/22", "completion": "\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [item for item in values if isinstance(item, int)]\n", "raw_completion": "```python\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [item for item in values if isinstance(item, int)]\n```"}
{"task_id": "HumanEval/23", "completion": "\ndef strlen(string: str) -> int:\n    return len(string)\n", "raw_completion": "```python\ndef strlen(string: str) -> int:\n    return len(string)\n```"}
{"task_id": "HumanEval/24", "completion": "\ndef largest_divisor(n: int) -> int:\n    return max([i for i in range(1, n) if n % i == 0])\n", "raw_completion": "```python\ndef largest_divisor(n: int) -> int:\n    return max([i for i in range(1, n) if n % i == 0])\n```"}
{"task_id": "HumanEval/25", "completion": "\nfrom typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n+1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    return factors\n", "raw_completion": "```python\nfrom typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    for i in range(2, n+1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    return factors\n```"}
{"task_id": "HumanEval/26", "completion": "\nfrom typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return list(dict.fromkeys(numbers))\n", "raw_completion": "```python\nfrom typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return list(dict.fromkeys(numbers))\n```"}
{"task_id": "HumanEval/27", "completion": "\ndef flip_case(string: str) -> str:\n    return string.swapcase()\n", "raw_completion": "```python\ndef flip_case(string: str) -> str:\n    return string.swapcase()\n```"}
{"task_id": "HumanEval/28", "completion": "\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\n", "raw_completion": "```python\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\n```"}
{"task_id": "HumanEval/29", "completion": "\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]\n", "raw_completion": "```python\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]\n```"}
{"task_id": "HumanEval/3", "completion": "\ndef below_zero(operations: List[int]) -> bool:\n    return any(sum(operations[:i+1]) < 0 for i in range(len(operations)))\n", "raw_completion": "```python\ndef below_zero(operations: List[int]) -> bool:\n    return any(sum(operations[:i+1]) < 0 for i in range(len(operations)))\n```"}
{"task_id": "HumanEval/30", "completion": "\ndef get_positive(l: list):\n    return [num for num in l if num > 0]\n", "raw_completion": "```python\ndef get_positive(l: list):\n    return [num for num in l if num > 0]\n```"}
{"task_id": "HumanEval/31", "completion": "\nimport math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n", "raw_completion": "```python\nimport math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n```"}
{"task_id": "HumanEval/32", "completion": "\ndef find_zero(xs: list):\n    return next(x for x in range(-100, 101) if poly(xs, x) == 0)\n", "raw_completion": "```python\ndef find_zero(xs: list):\n    return next(x for x in range(-100, 101) if poly(xs, x) == 0)\n```"}
{"task_id": "HumanEval/33", "completion": "\ndef sort_third(l: list):\n    return [sorted(l[i*3:i*3+3]) if i%3==0 else l[i*3:i*3+3] for i in range(len(l)//3 + 1)]\n", "raw_completion": "```python\ndef sort_third(l: list):\n    return [sorted(l[i*3:i*3+3]) if i%3==0 else l[i*3:i*3+3] for i in range(len(l)//3 + 1)]\n```"}
{"task_id": "HumanEval/34", "completion": "\ndef unique(l: list):\n    return sorted(list(set(l)))\n", "raw_completion": "```python\ndef unique(l: list):\n    return sorted(list(set(l)))\n```\n"}
{"task_id": "HumanEval/35", "completion": "\ndef max_element(l: list):\n    return max(l)\n", "raw_completion": "```python\ndef max_element(l: list):\n    return max(l)\n```"}
{"task_id": "HumanEval/36", "completion": "\ndef fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count\n", "raw_completion": "```python\ndef fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count\n```"}
{"task_id": "HumanEval/37", "completion": "\ndef sort_even(l: list):\n    return [l[i] if i % 2 == 1 else sorted(l[::2])[i//2] for i in range(len(l))]\n", "raw_completion": "```python\ndef sort_even(l: list):\n    return [l[i] if i % 2 == 1 else sorted(l[::2])[i//2] for i in range(len(l))]\n```"}
{"task_id": "HumanEval/38", "completion": "\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # reverse the cyclic encoding\n    groups = [s[len(s) - ((3 * i) % len(s)):len(s) - ((3 * i) % len(s)) - 3:-1] for i in range((len(s) + 2) // 3)]\n    return \"\".join(groups)\n", "raw_completion": "```python\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # reverse the cyclic encoding\n    groups = [s[len(s) - ((3 * i) % len(s)):len(s) - ((3 * i) % len(s)) - 3:-1] for i in range((len(s) + 2) // 3)]\n    return \"\".join(groups)\n```"}
{"task_id": "HumanEval/39", "completion": "\ndef prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 1:\n            return n\n        prev, current = 0, 1\n        for _ in range(n-1):\n            prev, current = current, prev + current\n        return current\n\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(fibonacci(num)):\n            count += 1\n            if count == n:\n                return fibonacci(num)\n        num += 1\n", "raw_completion": "```python\ndef prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 1:\n            return n\n        prev, current = 0, 1\n        for _ in range(n-1):\n            prev, current = current, prev + current\n        return current\n\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(fibonacci(num)):\n            count += 1\n            if count == n:\n                return fibonacci(num)\n        num += 1\n```"}
{"task_id": "HumanEval/4", "completion": "\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(num - mean) for num in numbers) / len(numbers)\n", "raw_completion": "```python\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(num - mean) for num in numbers) / len(numbers)\n```"}
{"task_id": "HumanEval/40", "completion": "\ndef triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n", "raw_completion": "```python\ndef triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n```"}
{"task_id": "HumanEval/41", "completion": "\ndef car_race_collision(n: int):\n    return n*(n-1)//2\n", "raw_completion": "```python\ndef car_race_collision(n: int):\n    return n*(n-1)//2\n```"}
{"task_id": "HumanEval/42", "completion": "\ndef incr_list(l: list):\n    return [x + 1 for x in l]\n", "raw_completion": "```python\ndef incr_list(l: list):\n    return [x + 1 for x in l]\n```"}
{"task_id": "HumanEval/43", "completion": "\ndef pairs_sum_to_zero(l):\n    return any(-x in l for x in l if x != 0)\n", "raw_completion": "```python\ndef pairs_sum_to_zero(l):\n    return any(-x in l for x in l if x != 0)\n```"}
{"task_id": "HumanEval/44", "completion": "\ndef change_base(x: int, base: int) -> str:\n    return str(int(x, base))\n", "raw_completion": "```python\ndef change_base(x: int, base: int) -> str:\n    return str(int(x, base))\n```"}
{"task_id": "HumanEval/45", "completion": "\ndef triangle_area(a, h):\n    return (a * h) / 2\n", "raw_completion": "```python\ndef triangle_area(a, h):\n    return (a * h) / 2\n```"}
{"task_id": "HumanEval/46", "completion": "\ndef fib4(n: int):\n    if n < 2:\n        return 0\n    fib_list = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib_list[i % 4] = fib_list[(i-1) % 4] + fib_list[(i-2) % 4] + fib_list[(i-3) % 4] + fib_list[(i-4) % 4]\n    return fib_list[n % 4]\n", "raw_completion": "```python\ndef fib4(n: int):\n    if n < 2:\n        return 0\n    fib_list = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib_list[i % 4] = fib_list[(i-1) % 4] + fib_list[(i-2) % 4] + fib_list[(i-3) % 4] + fib_list[(i-4) % 4]\n    return fib_list[n % 4]\n```"}
{"task_id": "HumanEval/47", "completion": "\ndef median(l: list):\n    l.sort()\n    n = len(l)\n    middle = n // 2\n    if n % 2 == 0:\n        return (l[middle - 1] + l[middle]) / 2\n    else:\n        return l[middle]\n", "raw_completion": "```python\ndef median(l: list):\n    l.sort()\n    n = len(l)\n    middle = n // 2\n    if n % 2 == 0:\n        return (l[middle - 1] + l[middle]) / 2\n    else:\n        return l[middle]\n```"}
{"task_id": "HumanEval/48", "completion": "\ndef is_palindrome(text: str):\n    return text == text[::-1]\n", "raw_completion": "```python\ndef is_palindrome(text: str):\n    return text == text[::-1]\n```"}
{"task_id": "HumanEval/49", "completion": "\ndef modp(n: int, p: int):\n    return pow(2, n, p)\n", "raw_completion": "```python\ndef modp(n: int, p: int):\n    return pow(2, n, p)\n```\nHere's the complete function definition for the `modp` function. It uses the `pow()` function to calculate 2 raised to the power of n modulo p."}
{"task_id": "HumanEval/5", "completion": "\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result\n", "raw_completion": "```python\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result\n```"}
{"task_id": "HumanEval/50", "completion": "\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n", "raw_completion": "```python\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n```"}
{"task_id": "HumanEval/51", "completion": "\ndef remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in text if char not in vowels)\n", "raw_completion": "```python\ndef remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in text if char not in vowels)\n```"}
{"task_id": "HumanEval/52", "completion": "\ndef below_threshold(l, t):\n    return all(num < t for num in l)\n", "raw_completion": "```python\ndef below_threshold(l, t):\n    return all(num < t for num in l)\n```"}
{"task_id": "HumanEval/53", "completion": "\ndef add(x: int, y: int):\n    return x + y\n", "raw_completion": "```python\ndef add(x: int, y: int):\n    return x + y\n```"}
{"task_id": "HumanEval/54", "completion": "\ndef same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)\n", "raw_completion": "```python\ndef same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)\n```"}
{"task_id": "HumanEval/55", "completion": "\ndef fib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n", "raw_completion": "```python\ndef fib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n```"}
{"task_id": "HumanEval/56", "completion": "\ndef correct_bracketing(brackets: str) -> bool:\n    return brackets.count(\"<\") == brackets.count(\">\")\n", "raw_completion": "```python\ndef correct_bracketing(brackets: str) -> bool:\n    return brackets.count(\"<\") == brackets.count(\">\")\n```"}
{"task_id": "HumanEval/57", "completion": "\ndef monotonic(l: list):\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))\n", "raw_completion": "```python\ndef monotonic(l: list):\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))\n```"}
{"task_id": "HumanEval/58", "completion": "\ndef common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))\n", "raw_completion": "```python\ndef common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))\n```"}
{"task_id": "HumanEval/59", "completion": "\nimport math\n\ndef largest_prime_factor(n: int):\n    factor = 2\n    while factor <= math.sqrt(n):\n        if n % factor == 0:\n            n //= factor\n        else:\n            factor += 1\n    return n\n", "raw_completion": "```python\nimport math\n\ndef largest_prime_factor(n: int):\n    factor = 2\n    while factor <= math.sqrt(n):\n        if n % factor == 0:\n            n //= factor\n        else:\n            factor += 1\n    return n\n```"}
{"task_id": "HumanEval/6", "completion": "\nfrom typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    count = 0\n    max_count = 0\n    \n    for char in paren_string:\n        if char == '(':\n            count += 1\n            if count > max_count:\n                max_count = count\n        elif char == ')':\n            count -= 1\n        \n        if char == ' ':\n            result.append(max_count)\n            count = 0\n            max_count = 0\n    \n    result.append(max_count)\n    \n    return result\n", "raw_completion": "```python\nfrom typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    count = 0\n    max_count = 0\n    \n    for char in paren_string:\n        if char == '(':\n            count += 1\n            if count > max_count:\n                max_count = count\n        elif char == ')':\n            count -= 1\n        \n        if char == ' ':\n            result.append(max_count)\n            count = 0\n            max_count = 0\n    \n    result.append(max_count)\n    \n    return result\n```"}
{"task_id": "HumanEval/60", "completion": "\ndef sum_to_n(n: int) -> int:\n    return sum(range(1, n+1))\n", "raw_completion": "```python\ndef sum_to_n(n: int) -> int:\n    return sum(range(1, n+1))\n```"}
{"task_id": "HumanEval/61", "completion": "\ndef correct_bracketing(brackets: str):\n    return brackets.count(\"(\") == brackets.count(\")\")\n", "raw_completion": "```python\ndef correct_bracketing(brackets: str):\n    return brackets.count(\"(\") == brackets.count(\")\")\n```"}
{"task_id": "HumanEval/62", "completion": "\ndef derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))]\n", "raw_completion": "```python\ndef derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))]\n```"}
{"task_id": "HumanEval/63", "completion": "\ndef fibfib(n: int):\n    if n <= 1:\n        return 0\n    fib = [0, 0, 1]\n    for i in range(3, n+1):\n        fib.append(fib[i-1] + fib[i-2] + fib[i-3])\n    return fib[n]\n", "raw_completion": "```python\ndef fibfib(n: int):\n    if n <= 1:\n        return 0\n    fib = [0, 0, 1]\n    for i in range(3, n+1):\n        fib.append(fib[i-1] + fib[i-2] + fib[i-3])\n    return fib[n]\n```"}
{"task_id": "HumanEval/64", "completion": "\ndef vowels_count(s):\n    return sum(1 for char in s.lower() if char in 'aeiou') + (s[-1].lower() == 'y' and not s[-2].lower() in 'aeiou')\n", "raw_completion": "```python\ndef vowels_count(s):\n    return sum(1 for char in s.lower() if char in 'aeiou') + (s[-1].lower() == 'y' and not s[-2].lower() in 'aeiou')\n```"}
{"task_id": "HumanEval/65", "completion": "\ndef circular_shift(x, shift):\n    if shift > len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(x)[-shift:] + str(x)[:-shift]\n", "raw_completion": "```python\ndef circular_shift(x, shift):\n    if shift > len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(x)[-shift:] + str(x)[:-shift]\n```"}
{"task_id": "HumanEval/66", "completion": "\ndef digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())\n", "raw_completion": "```python\ndef digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())\n```"}
{"task_id": "HumanEval/67", "completion": "\ndef fruit_distribution(s, n):\n    fruits = s.split(' ')\n    apples = int(fruits[0])\n    oranges = int(fruits[3])\n    return n - apples - oranges\n", "raw_completion": "```python\ndef fruit_distribution(s, n):\n    fruits = s.split(' ')\n    apples = int(fruits[0])\n    oranges = int(fruits[3])\n    return n - apples - oranges\n```"}
{"task_id": "HumanEval/68", "completion": "\ndef pluck(arr):\n    even_values = [x for x in arr if x % 2 == 0]\n    if not even_values:\n        return []\n    smallest_value = min(even_values)\n    smallest_index = arr.index(smallest_value)\n    return [smallest_value, smallest_index]\n", "raw_completion": "```\ndef pluck(arr):\n    even_values = [x for x in arr if x % 2 == 0]\n    if not even_values:\n        return []\n    smallest_value = min(even_values)\n    smallest_index = arr.index(smallest_value)\n    return [smallest_value, smallest_index]\n```"}
{"task_id": "HumanEval/69", "completion": "\ndef search(lst):\n    return max([num for num in lst if (lst.count(num) >= num and num > 0)], default=-1)\n", "raw_completion": "```python\ndef search(lst):\n    return max([num for num in lst if (lst.count(num) >= num and num > 0)], default=-1)\n```"}
{"task_id": "HumanEval/7", "completion": "\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [string for string in strings if substring in string]\n", "raw_completion": "```python\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [string for string in strings if substring in string]\n```"}
{"task_id": "HumanEval/70", "completion": "\ndef strange_sort_list(lst):\n    lst.sort()\n    sorted_lst = []\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst\n", "raw_completion": "```python\ndef strange_sort_list(lst):\n    lst.sort()\n    sorted_lst = []\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst\n```"}
{"task_id": "HumanEval/71", "completion": "\ndef triangle_area(a, b, c):\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n", "raw_completion": "```python\ndef triangle_area(a, b, c):\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n```"}
{"task_id": "HumanEval/72", "completion": "\ndef will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w\n", "raw_completion": "```python\ndef will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w\n```"}
{"task_id": "HumanEval/73", "completion": "\ndef smallest_change(arr):\n    return len(arr) - max([arr[:i] == arr[-i:] for i in range(1, len(arr) + 1)].index(True), 0)\n", "raw_completion": "```python\ndef smallest_change(arr):\n    return len(arr) - max([arr[:i] == arr[-i:] for i in range(1, len(arr) + 1)].index(True), 0)\n```"}
{"task_id": "HumanEval/74", "completion": "\ndef total_match(lst1, lst2):\n    if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2):\n        return lst1\n    else:\n        return lst2\n", "raw_completion": "```python\ndef total_match(lst1, lst2):\n    if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2):\n        return lst1\n    else:\n        return lst2\n```"}
{"task_id": "HumanEval/75", "completion": "\ndef is_multiply_prime(a):\n    count = 0\n    if a < 2:\n        return False\n    for i in range(2, a):\n        if a % i == 0:\n            return False\n    while a > 1:\n        for i in range(2, a):\n            if a % i == 0:\n                count += 1\n                a //= i\n                break\n        else:\n            count += 1\n            break\n    return count == 3\n", "raw_completion": "```python\ndef is_multiply_prime(a):\n    count = 0\n    if a < 2:\n        return False\n    for i in range(2, a):\n        if a % i == 0:\n            return False\n    while a > 1:\n        for i in range(2, a):\n            if a % i == 0:\n                count += 1\n                a //= i\n                break\n        else:\n            count += 1\n            break\n    return count == 3\n```"}
{"task_id": "HumanEval/76", "completion": "\ndef is_simple_power(x, n):\n    return x > 0 and n > 0 and n ** int(x ** (1 / n)) == x\n", "raw_completion": "```python\ndef is_simple_power(x, n):\n    return x > 0 and n > 0 and n ** int(x ** (1 / n)) == x\n```"}
{"task_id": "HumanEval/77", "completion": "\ndef iscube(a):\n    return (a**(1/3)).is_integer()\n", "raw_completion": "```python\ndef iscube(a):\n    return (a**(1/3)).is_integer()\n```"}
{"task_id": "HumanEval/78", "completion": "\ndef hex_key(num):\n    prime_digits = set(['2', '3', '5', '7', 'B', 'D'])\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count\n", "raw_completion": "```python\ndef hex_key(num):\n    prime_digits = set(['2', '3', '5', '7', 'B', 'D'])\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count\n```"}
{"task_id": "HumanEval/79", "completion": "\ndef decimal_to_binary(decimal):\n    return f\"db{bin(decimal)[2:]}db\"\n", "raw_completion": "```python\ndef decimal_to_binary(decimal):\n    return f\"db{bin(decimal)[2:]}db\"\n```"}
{"task_id": "HumanEval/8", "completion": "\nfrom typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    s = sum(numbers)\n    p = 1\n    for num in numbers:\n        p *= num\n    return (s, p)\n", "raw_completion": "```python\nfrom typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    s = sum(numbers)\n    p = 1\n    for num in numbers:\n        p *= num\n    return (s, p)\n```"}
{"task_id": "HumanEval/80", "completion": "\ndef is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n", "raw_completion": "```python\ndef is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n```"}
{"task_id": "HumanEval/81", "completion": "\ndef numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append(\"A+\")\n        elif grade > 3.7:\n            letter_grades.append(\"A\")\n        elif grade > 3.3:\n            letter_grades.append(\"A-\")\n        elif grade > 3.0:\n            letter_grades.append(\"B+\")\n        elif grade > 2.7:\n            letter_grades.append(\"B\")\n        elif grade > 2.3:\n            letter_grades.append(\"B-\")\n        elif grade > 2.0:\n            letter_grades.append(\"C+\")\n        elif grade > 1.7:\n            letter_grades.append(\"C\")\n        elif grade > 1.3:\n            letter_grades.append(\"C-\")\n        elif grade > 1.0:\n            letter_grades.append(\"D+\")\n        elif grade > 0.7:\n            letter_grades.append(\"D\")\n        elif grade > 0.0:\n            letter_grades.append(\"D-\")\n        else:\n            letter_grades.append(\"E\")\n    return letter_grades\n", "raw_completion": "```python\ndef numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append(\"A+\")\n        elif grade > 3.7:\n            letter_grades.append(\"A\")\n        elif grade > 3.3:\n            letter_grades.append(\"A-\")\n        elif grade > 3.0:\n            letter_grades.append(\"B+\")\n        elif grade > 2.7:\n            letter_grades.append(\"B\")\n        elif grade > 2.3:\n            letter_grades.append(\"B-\")\n        elif grade > 2.0:\n            letter_grades.append(\"C+\")\n        elif grade > 1.7:\n            letter_grades.append(\"C\")\n        elif grade > 1.3:\n            letter_grades.append(\"C-\")\n        elif grade > 1.0:\n            letter_grades.append(\"D+\")\n        elif grade > 0.7:\n            letter_grades.append(\"D\")\n        elif grade > 0.0:\n            letter_grades.append(\"D-\")\n        else:\n            letter_grades.append(\"E\")\n    return letter_grades\n```\n"}
{"task_id": "HumanEval/82", "completion": "\nimport math\n\ndef prime_length(string):\n    return all(string_length % i != 0 for i in range(2, int(math.sqrt(string_length)) + 1))\n", "raw_completion": "```python\nimport math\n\ndef prime_length(string):\n    return all(string_length % i != 0 for i in range(2, int(math.sqrt(string_length)) + 1))\n```"}
{"task_id": "HumanEval/83", "completion": "\ndef starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count\n", "raw_completion": "```python\ndef starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count\n```"}
{"task_id": "HumanEval/84", "completion": "\ndef solve(N):\n    return str(bin(N))[2:].count('1')\n", "raw_completion": "```python\ndef solve(N):\n    return str(bin(N))[2:].count('1')\n```"}
{"task_id": "HumanEval/85", "completion": "\ndef add(lst):\n    return sum([x for i, x in enumerate(lst) if i % 2 != 0 and x % 2 == 0])\n", "raw_completion": "```python\ndef add(lst):\n    return sum([x for i, x in enumerate(lst) if i % 2 != 0 and x % 2 == 0])\n```"}
{"task_id": "HumanEval/86", "completion": "\ndef anti_shuffle(s):\n    words = s.split(\" \")\n    new_words = []\n    for word in words:\n        sorted_word = \"\".join(sorted(word))\n        new_words.append(sorted_word)\n    return \" \".join(new_words)\n", "raw_completion": "```python\ndef anti_shuffle(s):\n    words = s.split(\" \")\n    new_words = []\n    for word in words:\n        sorted_word = \"\".join(sorted(word))\n        new_words.append(sorted_word)\n    return \" \".join(new_words)\n```"}
{"task_id": "HumanEval/87", "completion": "\ndef get_row(lst, x):\n    return [(i, j) for i, row in enumerate(lst) for j, val in sorted(enumerate(row), key=lambda x: x[1], reverse=True) if val == x]\n", "raw_completion": "Here is the completed code:\n\n```python\ndef get_row(lst, x):\n    return [(i, j) for i, row in enumerate(lst) for j, val in sorted(enumerate(row), key=lambda x: x[1], reverse=True) if val == x]\n```"}
{"task_id": "HumanEval/88", "completion": "\ndef sort_array(array):\n    if sum([array[0], array[-1]]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n", "raw_completion": "```python\ndef sort_array(array):\n    if sum([array[0], array[-1]]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n```"}
{"task_id": "HumanEval/89", "completion": "\ndef encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    for char in s:\n        index = alphabet.index(char)\n        newIndex = (index + 2*len(alphabet)) % len(alphabet)\n        encrypted += alphabet[newIndex]\n    return encrypted\n", "raw_completion": "```python\ndef encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    for char in s:\n        index = alphabet.index(char)\n        newIndex = (index + 2*len(alphabet)) % len(alphabet)\n        encrypted += alphabet[newIndex]\n    return encrypted\n```"}
{"task_id": "HumanEval/9", "completion": "\ndef rolling_max(numbers: List[int]) -> List[int]:\n    return [max(numbers[:i+1]) for i in range(len(numbers))]\n", "raw_completion": "```python\ndef rolling_max(numbers: List[int]) -> List[int]:\n    return [max(numbers[:i+1]) for i in range(len(numbers))]\n```"}
{"task_id": "HumanEval/90", "completion": "\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n", "raw_completion": "```python\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n```"}
{"task_id": "HumanEval/91", "completion": "\nimport re\n\ndef is_bored(S):\n    return len(re.findall(r'\\bI\\b', S))\n", "raw_completion": "```python\nimport re\n\ndef is_bored(S):\n    return len(re.findall(r'\\bI\\b', S))\n```"}
{"task_id": "HumanEval/92", "completion": "\ndef any_int(x, y, z):\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and (x == y + z or y == x + z or z == x + y)\n", "raw_completion": "```python\ndef any_int(x, y, z):\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and (x == y + z or y == x + z or z == x + y)\n```"}
{"task_id": "HumanEval/93", "completion": "\ndef encode(message):\n    encoded_message = \"\"\n    for letter in message:\n        if letter.isalpha():\n            if letter.lower() in ['a', 'e', 'i', 'o', 'u']:\n                encoded_message += chr(ord(letter) + 2)\n            else:\n                encoded_message += letter.swapcase()\n        else:\n            encoded_message += letter\n    return encoded_message\n", "raw_completion": "```python\ndef encode(message):\n    encoded_message = \"\"\n    for letter in message:\n        if letter.isalpha():\n            if letter.lower() in ['a', 'e', 'i', 'o', 'u']:\n                encoded_message += chr(ord(letter) + 2)\n            else:\n                encoded_message += letter.swapcase()\n        else:\n            encoded_message += letter\n    return encoded_message\n```"}
{"task_id": "HumanEval/94", "completion": "\ndef largest_prime_digit_sum(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    \n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n    \n    largest_prime = None\n    for num in lst:\n        if is_prime(num) and (largest_prime is None or num > largest_prime):\n            largest_prime = num\n    \n    if largest_prime is None:\n        return 0\n    \n    return sum_of_digits(largest_prime)\n", "raw_completion": "```python\ndef largest_prime_digit_sum(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    \n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n    \n    largest_prime = None\n    for num in lst:\n        if is_prime(num) and (largest_prime is None or num > largest_prime):\n            largest_prime = num\n    \n    if largest_prime is None:\n        return 0\n    \n    return sum_of_digits(largest_prime)\n```"}
{"task_id": "HumanEval/95", "completion": "\ndef check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    keys = list(dict.keys())\n    first_key = keys[0]\n    if first_key.islower():\n        for key in keys:\n            if not key.islower():\n                return False\n        return True\n    elif first_key.isupper():\n        for key in keys:\n            if not key.isupper():\n                return False\n        return True\n    else:\n        return False\n", "raw_completion": "```python\ndef check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    keys = list(dict.keys())\n    first_key = keys[0]\n    if first_key.islower():\n        for key in keys:\n            if not key.islower():\n                return False\n        return True\n    elif first_key.isupper():\n        for key in keys:\n            if not key.isupper():\n                return False\n        return True\n    else:\n        return False\n```"}
{"task_id": "HumanEval/96", "completion": "\ndef count_up_to(n):\n    primes = []\n    if n <= 1:\n        return primes\n    for num in range(2, n):\n        if all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)):\n            primes.append(num)\n    return primes\n", "raw_completion": "```python\ndef count_up_to(n):\n    primes = []\n    if n <= 1:\n        return primes\n    for num in range(2, n):\n        if all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)):\n            primes.append(num)\n    return primes\n```"}
{"task_id": "HumanEval/97", "completion": "\ndef multiply(a, b):\n    return abs(a) % 10 * abs(b) % 10\n", "raw_completion": "```python\ndef multiply(a, b):\n    return abs(a) % 10 * abs(b) % 10\n```\nNote: The function returns the product of the unit digits of the two input integers. The `abs()` function is used to handle negative numbers, and the `%` operator is used to retrieve the unit digit of each number."}
{"task_id": "HumanEval/98", "completion": "\ndef count_upper(s):\n    vowels = ['A', 'E', 'I', 'O', 'U']\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].upper() in vowels:\n            count += 1\n    return count\n", "raw_completion": "```python\ndef count_upper(s):\n    vowels = ['A', 'E', 'I', 'O', 'U']\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].upper() in vowels:\n            count += 1\n    return count\n```"}
{"task_id": "HumanEval/99", "completion": "\ndef closest_integer(value):\n    return int(value) if int(value) == float(value) else round(float(value))\n", "raw_completion": "```python\ndef closest_integer(value):\n    return int(value) if int(value) == float(value) else round(float(value))\n```"}
